syntax = "proto2";
import "goby/middleware/protobuf/app_config.proto";
import "goby/protobuf/option_extensions.proto";

package goby.apps.middleware.protobuf;

message GobyToolConfig
{
    option (goby.msg).cfg.tool = {
        is_tool: true
        has_subtools: true
        has_help_action: true
    };

    optional goby.middleware.protobuf.AppConfig app = 1
        [(goby.field) = { cfg { action: DEVELOPER } }];

    enum Action
    {
        help = 0 [(goby.ev).cfg = {
            short_help_msg: "Print usage information",
            full_help_msg: "Usage: \"goby help [action]\"\n"
                           "Provides detailed usage information on the provided action.\n"
                           "Example: \"goby help log\" provides help in the 'log' action\n"
                           "\n"
                           "You can also override the help command line flag used by running, for example, \"goby help -hh log\" to pass \"-hh\" to \"goby log\" in order to show advanced command line options"

        }];
        zeromq = 1 [(goby.ev).cfg = {
            short_help_msg: "Interact with ZeroMQ Goby pub/sub",
            external_command: "goby_zeromq_tool"
        }];
        log = 2 [(goby.ev).cfg = {
            short_help_msg: "Manage goby log files",
        }];
        launch = 3 [(goby.ev).cfg = {
            short_help_msg: "Launch goby *.launch files",
            external_command: "goby_launch"
        }];
    }
    optional Action action = 2 [
        default = help,
        (goby.field) = {
            description: "The action this tool should take [can omit --action if 1st parameter]",
            cfg { position: { enable: true }, cli_short: "A", action: HIDDEN }
        }
    ];
}

message UnifiedLogToolConfig
{
    option (goby.msg).cfg.tool = {
        is_tool: true
        has_subtools: true
        has_help_action: true
    };

    optional goby.middleware.protobuf.AppConfig app = 1
        [(goby.field) = { cfg { action: DEVELOPER } }];

    enum Action
    {
        help = 0 [(goby.ev).cfg = {
            short_help_msg: "Print usage information",
            full_help_msg: "Usage: \"goby log help [action]\""
        }];
        convert = 1 [(goby.ev).cfg = {
            short_help_msg: "Convert .goby log files to other formats",
            external_command: "goby_log_tool"
        }];
    }
    optional Action action = 2 [
        default = help,
        (goby.field) = {
            description: "The action this tool should take [can omit --action if 1st parameter]",
            cfg { position: { enable: true }, cli_short: "A", action: HIDDEN }
        }
    ];
}

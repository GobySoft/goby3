syntax = "proto2";
import "goby/middleware/protobuf/app_config.proto";
import "goby/protobuf/option_extensions.proto";

package goby.apps.middleware.protobuf;

message LogToolConfig
{
    optional goby.middleware.protobuf.AppConfig app = 1
        [(goby.field) = { cfg { action: DEVELOPER } }];

    required string input_file = 10 [(goby.field) = {
        description: "Input goby_logger file to read (e.g. 'vehicle_20200204T121314.goby')  [can omit --input_file if 1st parameter]"
        cfg { position: { enable: true }, cli_short: "i" }
    }];

    optional string type_regex = 15 [
        default = ".*",
        (goby.field) = {
            description: "Regex that must match type to process this message entry into the output file"
            cfg { action: ADVANCED }
        }

    ];
    optional string group_regex = 16 [
        default = ".*",
        (goby.field) = {
            description: "Regex that must match group to process this message entry into the output file"
            cfg { action: ADVANCED }
        }

    ];
    optional string exclude_type_regex = 17 [
        default = "",
        (goby.field) = {
            description: "Regex that if it matches the type excludes processing this message entry into the output file"
            cfg { action: ADVANCED }
        }

    ];
    optional string exclude_group_regex = 18 [
        default = "",
        (goby.field) = {
            description: "Regex that if it matches the group excludes processing this message entry into the output file"
            cfg { action: ADVANCED }
        }

    ];

    optional string output_file = 20 [(goby.field) = {
        description: "Output file to write (default is determined by input_file name "
                     "and output format, e.g. vehicle_20200204T121314.txt for "
                     "DEBUG_TEXT, vehicle_20200204T121314.h5 for HDF5) [can omit --output_file if 2nd parameter]"
        cfg { position: { enable: true }, cli_short: "o" }
    }];

    enum OutputFormat
    {
        DEBUG_TEXT = 1;
        HDF5 = 2;
        JSON = 3;
    }

    optional OutputFormat format = 30 [
        default = DEBUG_TEXT,
        (goby.field) = { description: "Output format to convert file to." }
    ];

    optional bool write_hdf5_zero_length_dim = 31 [
        default = true,
        (goby.field) = {
            description: "If false, do not write HDF5 entries with zero-length dimensions (use NULL). This would be set false to workaround older buggy Java implementations of HDF5. Leave default (true) otherwise."
            cfg { action: DEVELOPER }
        }

    ];

    // if enabled, write a chunked file in pieces, flushing every
    // hdf5_chunk_length messages to ensure we do not use as much RAM
    optional int32 hdf5_chunk_length = 32 [(goby.field) = {
        description: "Set to the HDF chunk length to enable HDF5 chunking (in number of messages per file chunk). This will greatly reduce RAM usage on processing larger .goby files at the expense of somewhat larger .h5 output. The smaller the chunk length the less RAM used by goby_log_tool."
        cfg { action: ADVANCED }
    }];

    optional int32 hdf5_compression_level = 33 [(goby.field) = {
        description: "Set to a value from 0 (no compression) to 9 (max compression). Requires --hdf5_chunk_length to be set as HDF5 requires chunking for compression."
        cfg { action: ADVANCED }
    }];

    optional bool hdf5_write_presence = 34 [
        default = false,
        (goby.field) = {
            description: "If true, writes 'has_foo' fields to HDF5 file for field 'foo' that provides the boolean presence of the field in the original Protobuf message."
        }
    ];

    repeated string load_shared_library = 40
        [(goby.field).description =
             "Load a shared library (e.g., to load Protobuf files)"];
}

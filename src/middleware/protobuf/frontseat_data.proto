syntax = "proto2";
import "dccl/option_extensions.proto";
import "goby/middleware/protobuf/geographic.proto";

package goby.middleware.frontseat.protobuf;

message NodeStatus
{
    option (dccl.msg) = {
        unit_system: "si"
    };

    required double time = 1 [(dccl.field).units.derived_dimensions = "time"];
    optional string name = 2;
    optional VehicleType type = 3;

    // lat, lon, depth
    required .goby.middleware.protobuf.LatLonPoint global_fix = 10;
    // x, y, z on local cartesian grid
    optional CartesianCoordinate local_fix = 11;

    // roll, pitch, yaw
    required EulerAngles pose = 20;

    required Speed speed = 30;

    optional Source source = 40;

    extensions 1000 to max;
}

message DesiredCourse
{
    option (dccl.msg).unit_system = "si";

    required double time = 1 [(dccl.field).units.derived_dimensions = "time"];
    optional double heading = 2 [
        default = 0,
        (dccl.field).units.derived_dimensions = "plane_angle",
        (dccl.field).units.system = "angle::degree"
    ];
    optional double speed = 3
        [default = 0, (dccl.field).units.derived_dimensions = "length/time"];
    optional double depth = 4
        [default = 0, (dccl.field).units.derived_dimensions = "length"];
    optional double pitch = 5 [
        default = 0,
        (dccl.field).units.derived_dimensions = "plane_angle",
        (dccl.field).units.system = "angle::degree"
    ];

    optional double roll = 6 [
        default = 0,
        (dccl.field).units.derived_dimensions = "plane_angle",
        (dccl.field).units.system = "angle::degree"
    ];

    optional double z_rate = 7
        [default = 0, (dccl.field).units.derived_dimensions = "length/time"];
    optional double altitude = 8
        [default = 10, (dccl.field).units.derived_dimensions = "length"];

    extensions 1000 to max;
}

// Type of vehicle for a given node
enum VehicleType
{
    UNKNOWN = 0;
    AUV = 10;
    GLIDER = 11;

    USV = 20;
    USV_POWERED = 21;
    USV_SAILING = 22;

    ROV = 30;

    TARGET = 50;

    BUOY = 60;
    MOORING = 61;
    MOORING_SUBSURFACE = 62;
    MOORING_SURFACE = 63;

    SHIP = 100;

    OTHER = -1;
}

message Source
{
    enum Sensor
    {
        GPS = 1;
        USBL = 2;
        LBL = 3;
        INERTIAL_NAVIGATION_SYSTEM = 4;

        PRESSURE = 10;

        DVL = 20;
        RPM_LOOKUP = 30;

        MAGNETIC_COMPASS = 40;
    }

    optional Sensor position = 1;
    optional Sensor depth = 2;
    optional Sensor speed = 3;
    optional Sensor heading = 4;

    extensions 1000 to max;
}

// computed from LatLonPoint
message CartesianCoordinate
{
    option (dccl.msg).unit_system = "si";

    required double x = 1 [(dccl.field).units.derived_dimensions = "length"];
    required double y = 2 [(dccl.field).units.derived_dimensions = "length"];
    optional double z = 3
        [(dccl.field).units.derived_dimensions = "length", default = 0];

    extensions 1000 to max;
}

message EulerAngles
{
    option (dccl.msg).unit_system = "si";

    optional double roll = 1 [(dccl.field) = {
        units { derived_dimensions: "plane_angle" system: "angle::degree" }
    }];
    optional double pitch = 2 [(dccl.field) = {
        units { derived_dimensions: "plane_angle" system: "angle::degree" }
    }];
    optional double heading = 3 [(dccl.field) = {
        units { derived_dimensions: "plane_angle" system: "angle::degree" }
    }];
    optional double course_over_ground = 4 [(dccl.field) = {
        units { derived_dimensions: "plane_angle" system: "angle::degree" }
    }];

    optional double roll_rate = 10 [(dccl.field) = {
        units { derived_dimensions: "plane_angle/time" system: "angle::degree" }
    }];
    optional double pitch_rate = 11 [(dccl.field) = {
        units { derived_dimensions: "plane_angle/time" system: "angle::degree" }
    }];
    optional double heading_rate = 12 [(dccl.field) = {
        units { derived_dimensions: "plane_angle/time" system: "angle::degree" }
    }];

    extensions 1000 to max;
}

message Speed
{
    option (dccl.msg).unit_system = "si";

    required double over_ground = 1
        [(dccl.field).units.derived_dimensions = "length/time"];
    optional double over_water = 2
        [(dccl.field).units.derived_dimensions = "length/time"];

    extensions 1000 to max;
}

message CTDSample
{
    option (dccl.msg).unit_system = "si";

    required double time = 2 [(dccl.field).units.base_dimensions = "T"];

    // required "primary" measurements
    optional double conductivity = 10
        [(dccl.field).units = { derived_dimensions: "conductivity" }];
    required double temperature = 11 [(dccl.field).units = {
        system: "celsius"
        derived_dimensions: "temperature"
    }];

    required double pressure = 12
        [(dccl.field).units = { base_dimensions: "M L^-1 T^-2" }];

    // required "secondary" or calculated quantities (can be calculated
    // from "primary" measurements alone using empirical formulas).
    required double salinity = 20
        [(dccl.field).units = { base_dimensions: "-" }];
    required double sound_speed = 21
        [(dccl.field).units = { base_dimensions: "L T^-1" }];
    required double density = 22
        [(dccl.field).units = { base_dimensions: "M L^-3" }];

    required .goby.middleware.protobuf.LatLonPoint global_fix = 23;

    // algorithm used for secondary quantities
    enum SalinityAlgorithm
    {
        SAL_ALGORITHM_UNKNOWN = 0;
        UNESCO_44_PREKIN_AND_LEWIS_1980 = 1;
    }
    optional SalinityAlgorithm salinity_algorithm = 30
        [default = SAL_ALGORITHM_UNKNOWN];

    enum SoundSpeedAlgorithm
    {
        SS_ALGORITHM_UNKNOWN = 0;
        UNESCO_44_CHEN_AND_MILLERO_1977 = 1;
        MACKENZIE_1981 = 2;
        DEL_GROSSO_1974 = 3;
    }
    optional SoundSpeedAlgorithm sound_speed_algorithm = 31
        [default = SS_ALGORITHM_UNKNOWN];

    enum DensityAlgorithm
    {
        DENSITY_ALGORITHM_UNKNOWN = 0;
        UNESCO_38_MILLERO_AND_POISSON_1981 = 1;
    }
    optional DensityAlgorithm density_algorithm = 32
        [default = DENSITY_ALGORITHM_UNKNOWN];

    extensions 1000 to max;
}

message DatumUpdate
{
    option (dccl.msg) = {
        unit_system: "si"
    };

    required .goby.middleware.protobuf.LatLonPoint datum = 1;
}

syntax = "proto2";
import "dccl/option_extensions.proto";

import "goby/middleware/protobuf/frontseat.proto";
import "goby/acomms/protobuf/modem_message.proto";

package goby.middleware.frontseat.protobuf;

message BuoyancyStatus
{
    enum Status
    {
        BUOYANCY_IDLE = 0;
        BUOYANCY_IN_PROGRESS = 1;
        BUOYANCY_COMPLETED_SUCCESSFULLY = 2;
        BUOYANCY_COMPLETED_UNSUCCESSFULLY = 3;
    }

    optional Status status = 1 [default = BUOYANCY_IDLE];

    enum Error
    {
        ERROR_NONE = 0;
        ERROR_BUOYANCY_OPERATION_FAILED = 1;
        ERROR_OPERATION_CANCELLED = 2;
        ERROR_ZERO_FLOW = 3;
    }

    optional Error error = 2 [default = ERROR_NONE];
    optional string debug_string = 3;
    optional double buoyancy_newtons = 4;
}

message TrimStatus
{
    enum Status
    {
        TRIM_IDLE = 0;
        TRIM_IN_PROGRESS = 1;
        TRIM_COMPLETED_SUCCESSFULLY = 2;
        TRIM_COMPLETED_UNSUCCESSFULLY = 3;
    }

    optional Status status = 1 [default = TRIM_IDLE];

    enum Error
    {
        ERROR_NONE = 0;
        ERROR_TRIM_OPERATION_FAILED = 1;
        ERROR_CANNOT_TRIM_WHILE_SILENT = 2;
    }

    optional Error error = 2 [default = ERROR_NONE];
    optional string debug_string = 3;
    optional double pitch_trim_degrees = 4;
    optional double roll_trim_degrees = 5;
}

message BluefinExtraData
{
    option (dccl.msg).unit_system = "si";

    optional goby.acomms.protobuf.ModemRaw micro_modem_raw_out = 1;
    optional goby.acomms.protobuf.ModemRaw micro_modem_raw_in = 2;
    optional BuoyancyStatus buoyancy_status = 10;
    optional TrimStatus trim_status = 20;

    message PayloadStatus
    {
        required int32 id = 1;
        required uint64 expire_time = 2
            [(dccl.field).units = {prefix: "micro" base_dimensions: "T"}];
        required string msg = 3;
        required bool all_ok = 4;
    }

    repeated PayloadStatus payload_status = 30;

    message RawDVL
    {
        option (dccl.msg).unit_system = "si";
        optional double dvl_time = 1
            [(dccl.field).units.derived_dimensions = "time"];
        optional double u = 2 [(dccl.field).units.derived_dimensions =
                                   "velocity"];  // positive forward
        optional double v = 3 [(dccl.field).units.derived_dimensions =
                                   "velocity"];  // positive starboard
        optional double w = 4 [(dccl.field).units.derived_dimensions =
                                   "velocity"];  // positive down

        optional double beam1_range = 5
            [(dccl.field).units.derived_dimensions = "length"];
        optional double beam2_range = 6
            [(dccl.field).units.derived_dimensions = "length"];
        optional double beam3_range = 7
            [(dccl.field).units.derived_dimensions = "length"];
        optional double beam4_range = 8
            [(dccl.field).units.derived_dimensions = "length"];

        optional double temperature = 9 [(dccl.field).units = {
            system: "celsius"
            derived_dimensions: "temperature"
        }];
    }

    optional RawDVL dvl = 40;

    message RawThrusterRotation
    {
        required double rotation = 1 [(dccl.field).units = {
            system: "goby::util::units::rpm::system"
            derived_dimensions: "angular_velocity"
        }];
        optional double speed_from_lookup_table = 2
            [(dccl.field).units.derived_dimensions = "velocity"];
    }

    optional RawThrusterRotation thruster = 50;
}

extend InterfaceData
{
    optional BluefinExtraData bluefin_data = 1000;
}

message BluefinExtraCommands
{
    enum BluefinCommand
    {
        UNKNOWN_COMMAND = 0;
        DESIRED_COURSE = 1;
        TRIM_ADJUST = 3;
        BUOYANCY_ADJUST = 4;
        SILENT_MODE = 5;
        CANCEL_CURRENT_BEHAVIOR = 6;
        ABORT_MISSION = 7;
        MISSION_START_CONFIRM = 8;
        MISSION_END_CONFIRM = 9;
    }
    optional BluefinCommand command = 1 [default = UNKNOWN_COMMAND];

    enum SilentMode
    {
        NORMAL = 0;
        SILENT = 1;
    }
    optional SilentMode silent_mode = 10 [default = NORMAL];

    enum AbortReason
    {
        SUCCESSFUL_MISSION = 0;
        ABORT_WITH_ERRORS = 1;
    }

    optional AbortReason abort_reason = 11 [default = ABORT_WITH_ERRORS];

    enum StartConfirm
    {
        SUCCESS = 1;
        FAIL = 0;
    }
    optional StartConfirm start_confirm = 12 [default = SUCCESS];
}

extend CommandRequest
{
    optional BluefinExtraCommands bluefin_command = 1000;
}

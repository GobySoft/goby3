import "dccl/protobuf/option_extensions.proto";
import "dccl/arithmetic/protobuf/arithmetic_extensions.proto";

package goby.acomms.protobuf;

message NetworkHeader
{
    option (dccl.msg).id = 0xF000;
    option (dccl.msg).max_bytes = 8;
    option (dccl.msg).codec_version = 3;    

    enum Protocol
    {
        ICMP = 0x01;
        UDP = 0x11;
        SCTP = 0x84;
    }
    required Protocol protocol = 1;

    required uint32 srcdest_addr = 10 [(dccl.field).codec = "dccl.arithmetic",
                                       (dccl.field).(arithmetic).model = "goby.acomms.NetworkHeader.AddrModel"];
    
    // if Protocol == UDP
    message UDPHeader
    {
        repeated uint32 srcdest_port = 1 [(dccl.field).codec = "dccl.arithmetic",
                                           (dccl.field).max_repeat = 2,
                                           (dccl.field).(arithmetic).model = "goby.acomms.NetworkHeader.PortModel"];
    }
    required UDPHeader udp = 20;
    
    // if Protocol == ICMP
    message ICMPHeader
    {
        // not yet supported
    }
    // if Protocol == SCTP
    message SCTPHeader
    {
        // not yet supported
    }

    // total length of packet, if not supported by link layer
    // optional int32 total_length = 100;
    
}

// the real IP header
message IPv4Header
{
    option (dccl.msg).id = 0xF001;
    option (dccl.msg).max_bytes = 60;
    option (dccl.msg).codec_version = 3;

    // DCCL is little-endian - so multi-field bytes are written in "reverse" order
    
    // Internet Header Length (IHL) in 32-bit words
    required uint32 ihl = 2 [(dccl.field).min = 0, (dccl.field).max = 15];
    // Version, always 4 for IPv4
    required uint32 version = 1 [(dccl.field).min = 0, (dccl.field).max = 15];


    // Explicit Congestion Notification (ECN)
    required uint32 ecn = 4 [(dccl.field).min = 0, (dccl.field).max = 63];
    // Differentiated Services Code Point (DSCP)
    required uint32 dscp = 3 [(dccl.field).min = 0, (dccl.field).max = 3];

    required uint32 total_length = 5 [(dccl.field).codec = "net.short"];
    required uint32 identification = 6 [(dccl.field).codec = "net.short"];

    message FlagsFragOffset
    {
        required bool dont_fragment = 1;
        required bool more_fragments = 2;
        required uint32 fragment_offset = 3;
    }
    required FlagsFragOffset flags_frag_offset = 7 [(dccl.field).codec = "ip.v4.flagsfragoffset"];

    
    required uint32 ttl = 8 [(dccl.field).min = 0, (dccl.field).max = 255];
    required uint32 protocol = 9 [(dccl.field).min = 0, (dccl.field).max = 255];
    required uint32 header_checksum = 10 [(dccl.field).codec = "net.short"];

    required string source_ip_address = 11 [(dccl.field).codec = "ip.v4.address"];
    required string dest_ip_address = 12 [(dccl.field).codec = "ip.v4.address"];
    
}

message UDPHeader
{
    option (dccl.msg).id = 0xF002;
    option (dccl.msg).max_bytes = 8;
    option (dccl.msg).codec_version = 3;

    required uint32 source_port = 1 [(dccl.field).codec = "net.short"];
    required uint32 dest_port = 2 [(dccl.field).codec = "net.short"];
    required uint32 length = 3 [(dccl.field).codec = "net.short"];
    required uint32 checksum = 4 [(dccl.field).codec = "net.short"];
    
}


message ICMPHeader
{
    option (dccl.msg).id = 0xF003;
    option (dccl.msg).max_bytes = 8;
    option (dccl.msg).codec_version = 3;

    required uint32 type = 1 [(dccl.field).min = 0, (dccl.field).max = 255];
    required uint32 code = 2 [(dccl.field).min = 0, (dccl.field).max = 255];
    required uint32 checksum = 3 [(dccl.field).codec = "net.short"];
    required uint32 short1 = 4 [(dccl.field).codec = "net.short"];
    required uint32 short2 = 5 [(dccl.field).codec = "net.short"];    
}

message IPGatewayICMPControl
{
    enum MessageType
    {
        QUEUE_REPORT = 1;
    }
    required MessageType type = 1;
    required string address = 2;
    
    message QueueReport
    {
        message SubQueue
        {
            required int32 dest = 1;
            required int32 size = 2;
        }
        repeated SubQueue queue = 1;
    }
    optional QueueReport queue_report = 3;
}

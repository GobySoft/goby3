import "goby/common/protobuf/option_extensions.proto";

package goby.acomms.protobuf;

// known drivers - should make this somehow extensible outside Goby
enum DriverType {
  DRIVER_NONE = 1;
  DRIVER_WHOI_MICROMODEM = 2;
  DRIVER_ABC_EXAMPLE_MODEM = 3;
  DRIVER_UFIELD_SIM_DRIVER = 4;
  DRIVER_PB_STORE_SERVER = 5;
  DRIVER_UDP = 6;
  DRIVER_BLUEFIN_MOOS = 7;
  DRIVER_IRIDIUM = 8;
  DRIVER_IRIDIUM_SHORE = 9;
  DRIVER_BENTHOS_ATM900 = 10;  
}

message DriverConfig
{
  optional int32 modem_id = 1 [(goby.field).description="Unique number 1-31 to identify this node", (goby.field).example="1"];
  
  enum ConnectionType { CONNECTION_SERIAL = 1; // Modem is connected by a tty serial line (e.g. RS-232)
                        CONNECTION_TCP_AS_CLIENT = 2; // Modem is connected by ethernet and is serving clients
                        CONNECTION_TCP_AS_SERVER = 3; // Modem is connected by ethernet and expects us to serve it
  }
  
  optional ConnectionType connection_type = 2 [default = CONNECTION_SERIAL, (goby.field).description="Physical connection type from this computer (running Goby) to the acoustic modem"];
  optional string line_delimiter = 3 [default = "\r\n", (goby.field).description="String used to delimit new lines for this acoustic modem"]; // delimits lines on the serial or tcp interface
  
  // required if connection_type == CONNECTION_SERIAL
  optional string serial_port = 4 [(goby.field).description="Serial port for CONNECTION_SERIAL", (goby.field).example="/dev/ttyS0"]; 
  optional uint32 serial_baud = 5 [(goby.field).description="Baud rate for CONNECTION_SERIAL", (goby.field).example="19200"]; 

  // required if connection_type == CONNECTION_TCP_AS_CLIENT
  optional string tcp_server = 6 [(goby.field).description="IP Address or domain name for the server if CONNECTION_TCP_AS_CLIENT", (goby.field).example="192.168.1.111"]; 

  // required if connection_type == CONNECTION_TCP_AS_CLIENT or CONNECTION_TCP_AS_SERVER
  optional uint32 tcp_port = 7 [(goby.field).description="Port to serve on (for CONNECTION_TCP_AS_SERVER) or to connect to (for CONNECTION_TCP_AS_CLIENT)", (goby.field).example="50010"];

  optional uint32 reconnect_interval = 8 [(goby.field).description="Seconds between TCP reconnect attempts", default = 10];
  
  optional string raw_log = 9 [(goby.field).description="File to write raw modem log to. If %1% is present, is replaced with the current timestamp."];

  optional string driver_name = 10 [(goby.field).description="Driver name to load from plugin library"];
  
  extensions 1000 to max;
  // extensions 1000-1100 used by acomms_mm_driver.proto
  // extensions 1201-1202 used by acomms_abc_driver.proto (example driver)
  // extensions 1300-1320 used by ufield_sim_driver.proto
  // extensions 1321-1340 used by pb_modem_driver.proto
  // extensions 1341-1360 used by udp_driver.proto
  // extensions 1361-1380 used by bluefin_sim_driver.proto
  // extensions 1381-1400 used by iridium_driver.proto
  // extensions 1401-1420 used by MOOSSafir (external)
  // extensions 1421-1440 used by iridium_shore_driver.proto
  // extensions 1441-1460 used by benthos_atm900.proto
}


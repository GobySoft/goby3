%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: priority_graph.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: toby
%%CreationDate: 5/6/2011
%%BoundingBox: 0 0 821 333
%%HiResBoundingBox: 0 0 820.0401 332.6768
%%CropBox: 0 0 820.0401 332.6768
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 52 8%%BeginData: 6661 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD3EFFA8527D7D7DA8FD3CFFA8FD3DFF7D7D7DA87DFD3DFF7D527D
%FD3FA8FFFD3AA87DFFFFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FF
%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A87DFD04FFA8FD7AFFA8FFFFFFA8A8
%FD0EFFA8FFA8FFA8FFA87D7DFFFD04A87DFD06A8FD57FFA8FD04FFA8FD0D
%FFA8FD06FFA87DA8FFFFA87D527DA852277DFD59FFA8FD04FFA8FD0EFFA8
%A8A8FFA8FFA8FF525227FD05FFA8FFA8FFA8FD57FFA8FFFF7DA8A8FD0DFF
%A8FD53FF83AEFD0AFFA8AEFD0AFFA8A8FFA87D7DA8A8FD0DFFA8FD05FF7D
%7D7DFFA8A87D7D52A8527D7DFFA8FD3EFF7D83FD0AFF5858FD0AFFA8A8FD
%04FFA8FD0DFFA8FFFFFFA8FFA8A8A87D52277DA8A8A87D7D52A8FD3FFFA8
%A8FD0BFFA8FD0CFFA8FFFFFFA8A8FD0DFFA8A8FD07FFA8FFA8FD09FFA8FD
%3BFFA8A8FFFFA8FD09FFA8FFA8FD0BFFA8FD04FFA8FD0DFFA8FD06FFA87D
%A8FFFFA8A8FD057DA8FD3DFFA8FFFFA8FD18FFA8FFFFFFA8A8FD0EFFA8FF
%A8FFA8FF7DA87DA852A87DA87DA8527D7DFFA8FD3AFFA8A8FFFFFFA8FD07
%FFA8FFFFFFA8FD0BFFA8FD04FFA8FD0DFFA8FFA8FD06FFA87D52FD08FFA8
%FD3AFFA8FD04FFA8FD07FFA8FD10FFA8FF275252A8A8FD0DFFA8FFA8FFA8
%A8A8FFA8FFA8FFA8A8A8FFFD05A8FD38FFA8A8FD05FFA8FD05FFA8FD05FF
%A8FD0AFFA87DFD04FFA8FD55FFAEFD04FFA8A8FD05FFA8FD05FFA8FD11FF
%A8A8FFFFFFA8A8FD54FFA858AEFFFFA8A8FD0BFFA8FD07FFA8FD0BFFA8FD
%04FFA8FD51FFA8FFFFA858FFFFA8A8FD07FFA8FFFFFFA8FD13FFA8A8FFFF
%FFA8A8FD4EFFA8FFA8FFA8FD04FFA8A8FD08FFA8A8FFA8FD09FFA8FD0BFF
%A8FD04FFA8FD4DFFA8FD08FFA8A8FD09FFA8FD1AFFA87D7DA8A8FD16FF83
%83FD0AFFAE58FD0BFF58A8FD0AFF7DA8FD0AFF837DAEFD0AFFA8A8FD0AFF
%A8A8FD0BFFA8FD0AFFA858FFFF7D7DA8FD17FF5883FD0AFFA883FD0AFFA8
%58A8FD0AFF8383FD09FFA88358FD0BFFA8FD0BFFA8FD17FFA883FD04FFA8
%FD16FFA8AEA8FD09FFA8A8A8FD09FFA8FFA8FD09FFCBA8A8FD05FFA8FFA8
%FFA8FFA8FD0AFFA8A8FD0BFFA8FFA8FD0BFFA8FD09FFA8A8A8FD04FFA8FD
%15FFA8FD0BFFA8FD18FFA8FD08FFA8FFFFFFA8FD0BFFA8FD0BFFA8FFA8FD
%15FFA8FFFFA8FFFFFFA8A8FD14FFA8FFFFFFA8FD07FFA8A8FFFFA8FD07FF
%A8FFFFFFA8FD08FFA8FFFFA8FFA8FFA8FD05FFA8FD0BFFA8FD0BFFA8FD17
%FFA8A8FFFFA8FD04FFA8FD1FFFA8A8FD17FFA8A8FFFFA8A8FD0BFFA8FD07
%FFA8FD0BFFA8FFFFFFA8FD13FFA8FFFFFFA8A8FFA8FFA8A8FD12FFA8FD05
%FFA8FD05FFA8A8FD04FFA8FD05FFA8FFA8FFFFFFA8FD06FFA8A8FFA8FFA8
%FD07FFA8FD0BFFA8FD05FFA8FD05FFA8FD04FFA8A8FD0BFFA8FD05FFA8A8
%FD04FF7DFF7D7D52A8FD11FFA8FD0BFFA8FD18FFA8A8FD0BFFA8FD05FFA8
%FD05FFA8FD0BFFA8FD05FFA8FD11FFA8A8FD04FFA8A8FFA8FFA8A8FD10FF
%A8FD07FFA8FFFFFFA8A8FD06FFA8FD04FFA8FD08FFA8FFA8A8A8FD05FFA8
%FD05FFA8FD0BFFA8FD07FFA8FFFFFFA8FD07FFA8FD0BFFA8FFFFFFA8A8FD
%06FFA8FD04FFA8FD0FFFA8FD0BFFA8FD13FFA8FFA8FFFFFFA8FD17FFA8FD
%0BFFA8FD07FFA8FD0FFFA8A8FD07FFA8FFFFFFA8A8FD0EFFA8FD09FFA8FF
%A8A8FD08FFA8FFFFFFA8FFFFFFA8FFA8FFA8FFFFA8A8FD07FFA8FFFFFFA8
%FD07FFA8FFFFFF7DFD0BFFA8FD09FFA8FD0BFFA8FFA8A8FD08FFA8FD04FF
%A8FD0DFFA8FD0CFFA8FD10FFA8FD07FFA8FD0BFFA8FD0BFFA8FD0BFFA8FD
%09FFA8FD0EFFA8FD09FFA8FD04FFA8FD0CFFA8FD0BFFA8A8FD0AFFA8FFA8
%FFA8FD07FFA8A8A8FD09FFA8FFA8FD0BFFA8FD0BFFA8FD17FFA8A8FD0AFF
%A8FFFF7DA8A8FD0BFF83A8FD0BFFA8FD0BFFA8A8FD0AFFA8A8FD0AFFA8A8
%FD0BFF7DFD0BFFA8FD0BFFA8FD0BFFA8A8FD0AFFA8A8FFA87D7DA8FD0AFF
%A88383FD09FFA8A8A8FD07FFA8FFA8A8A8FD0AFFA87DFD0BFFA8FD0BFF7D
%A8FD0AFFA8FD0CFFA8A8FD0AFFA8A8FD07FFA8FFA8A87DFD04FFA8FD09FF
%A8A8AEFD0AFFA8FD0CFFA8FD0BFFA8FD0BFFA8FD0BFFA8FD0DFFA8FD0BFF
%A8FD0AFFA8FD0CFFA8FD04FFA8A8FD08FFA8A8FD0BFFA8A8FFA8FFFFFFA8
%FFA8FFFFFFA8FFA8FD09FFA8FFA8FD09FFA8FFA8FD09FFA8FD0BFFA8FD0F
%FFA8FD08FFA8FFFFA8FFFFFFA8FFA8FFFFFFA8FFA8FD04FFA8FD07FFA8A8
%FFFFA8FD08FFA8FFFFA8FFA8FD13FFA8FD0BFFA8FD0BFFA8FD0BFFA8FD0F
%FFA8FD08FFA8FD04FFA8FD07FFA8FFFFA8FFFFFFA8A8FD06FFA87DFFFFFF
%A8A8FD06FFA8A8FFA8A8A8FD07FFA8FFFFFFA8FD07FFA8FFFFFFA8FD07FF
%A8FFFFFFA8FD07FFA8FFFFFFA8FD07FFA8FD11FFA8FD06FFA8A8FFA8FFA8
%FD07FFA8FFFFFFA8FD04FFA8FD06FFA8FD04FFA8FD06FFA8A8FD0BFFA8FD
%0BFFA8FD0BFFA8FD05FFA8FD05FFA8FD1DFFA8FD06FFA8A8FD0FFFA8A8FF
%525252A8A8FFFFFFA8A8FD06FFA8FD04FFA8A8FD05FFA8FD05FFA8FD05FF
%A8FD05FFA8FD05FFA8FD05FFA8FD05FFA8FD05FFA8A8FD04FFA8FD06FFA8
%FD16FFA8A8A8FD05FFA8FD05FFA8FD04FFA8A8FD04FFA8FD04FFA8FD06FF
%A8FFA8FFA8A8A8FD0BFFA8FD0BFFA8FD0BFFA8FD07FFA8FFFFFFA8FD0BFF
%A8FD13FFA8FFA8FFA8A8A8FD0BFFA8FD06FFA8FFFFFFA8A8FFFFA8A8A8FD
%05FFA8A8A8FFFFA8A8FD07FFA8FFFFFFA8FD07FFA8FFFFFFA8FD07FFA8FF
%FFFFA8FD07FFA8A8FFFFA8A8FD0AFFA8FD09FFA8FD07FFA8FFFFA8A8FFFF
%A8A8FD07FFA8FFFFFFA8FD07FFA8FD04FFA8FFFFA8FD06FFA8FFA8FFFFFF
%A8FD0BFFA8FD0BFFA8FD0BFFA8FD09FFA8FFA8FD1FFFA8FFA8FFFFFFA8FD
%0BFFA8FD08FFA8FFFFFFA8A8FFA8A8FFA8FFA8FD06FFA8A8FD0BFFA8FD09
%FFA8FF7DFD09FFA8FFA8FD0BFFA8A8FD16FFA8FFFFFFA8FFA8FD06FFA8A8
%FD09FFA8FFA8FD09FFA8FD04FFA8A8A8FD09FFA8A8A8FD17FFA8FD0BFFA8
%FD0BFFA8FD0BFFA8FD17FFA8A8A8FD0BFFA8FD0AFFA8FFFFFF7D5252A87D
%FD09A87DFD0BA87DFD0BA87DFD0BA87DFD0BA87D7DFD18A87DA87DFD09A8
%7DFD0BA87DFD0CA8FFFFFFA8A8FD0AFFA8527DA8FD08FFA8527DA8FD09FF
%7D527DFD09FF7D527DFD09FFA87D7DFD09FFA87D52A8FD09FF7D52A8FD09
%FFA8527DA8FD09FF5252A8FD09FF7D7D7DFD0EFFA87D7DFD09FFA87D7DFD
%0AFF7D52A8FD09FFA8277DFD0AFF52A8A8FD08FFA8527DA8FD09FF7D7DA8
%FD09FF7D7D7DFD09FFA87D52FD09FFA8A8527DFD41FFA8FD7EFFA8A8FD3D
%FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                       
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2011-05-06T12:01:01-04:00</xap:CreateDate>
         <xap:ModifyDate>2011-05-06T12:01:01-04:00</xap:ModifyDate>
         <xap:MetadataDate>2011-05-06T12:01:01-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>104</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7va+b/OqXMP6X8nSWNjJ&#xA;CjSXMWoWlwy3MrRxpbCOsfImRyOfILQA13oFU/XV9QKgnRL1Sf2S9lUfdcnFW/0tf/8AVlvP+Ds/&#xA;+yjFVk+uXkMMk0mjXoSNS7kNZnZRU/8AHxiq/wDS1/8A9WW8/wCDs/8AsoxV36Wv/wDqy3n/AAdn&#xA;/wBlGKu/S1//ANWW8/4Oz/7KMVU4NcvJoY5o9GvSkqh0JazGzCo/4+MVVP0tf/8AVlvP+Ds/+yjF&#xA;Xfpa/wD+rLef8HZ/9lGKqcGuXk0Mc0ejXpSVQ6EtZjZhUf8AHxiqp+lr/wD6st5/wdn/ANlGKu/S&#xA;1/8A9WW8/wCDs/8AsoxVTh1y8lQumjXtAzIfis+qMUP/AB8eK4qqfpa//wCrLef8HZ/9lGKpD5r0&#xA;3VfMCWUKprekwW0xln/R1xaW8k68GURvItxslWqdv64qlui+V5bO7tb6GTzNcC0ml/cXF9aNFIod&#xA;x6MirMnKONz8C9gAOhIKrMP0tf8A/VlvP+Ds/wDsoxV36Wv/APqy3n/B2f8A2UYqpx65eSPIi6Ne&#xA;1ibg/wAVn1Kh/wDlo8GGKqn6Wv8A/qy3n/B2f/ZRirv0tf8A/VlvP+Ds/wDsoxVTj1y8keRF0a9r&#xA;E3B/is+pUP8A8tHgwxVU/S1//wBWW8/4Oz/7KMVd+lr/AP6st5/wdn/2UYqpjXLwzPCNGveaKrsO&#xA;Vn0csB/x8f5BxVU/S1//ANWW8/4Oz/7KMVd+lr//AKst5/wdn/2UYqpnXLwTJCdGvebqzqOVn0Qq&#xA;D/x8f5YxVU/S1/8A9WW8/wCDs/8AsoxV36Wv/wDqy3n/AAdn/wBlGKrbXXXl1VNNn066s5ZYJbiK&#xA;WY27RssLRo4HozSsDWdeq4qu8w/7wRf8xlj/ANRkOKplirsVdiqX3Usv1yVPXmiiiiiYLBGsjFpG&#xA;kBqCkjfsDpiqmkhd1UXl6CxAFbYKN/EmAAYqxaTzVrml6nY/4pk/Qum6hCYoFDR3cx1BS8jRc4Ye&#xA;Ppi3iZ+TIPCvbFXaf5y1XzFo8es+SkbXdJuVn+qXstxDZK7wgBVKS2plUNKHjJK7ca9Dsqsl1j82&#xA;LeDTP+dba9nuZI11IwajYxJao8jiRx6sBMoiRUO1C9ei0pirJtCudalisZNViks7y5tnlutOkkhn&#xA;9CVWjHETQpGr05ncbYqnWKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kpbcf&#xA;8pLYf8wd5/ydtcVSDWfKTQX7awNb1V/WvrZhp8lwr2cZlubZPghKbBPTqgJIBLHvirL41ZUCs5kI&#xA;6u1Kn58Qo/DFV2KuxVBVlGp3HpKrN6MFQzFRTnNXcBsVV2a834xx/boKu32P5vsdf8n8cVYgLj81&#xA;bO+065urSy1WCa39DUrCwlFvHBcDnIblJLlfUdSFSJUr1bkdhiq3T9Q/N/VLKO6k0rSvLkk0M4aw&#xA;vZpNQngnUhYCXtTHDJG9GZqMCAR3riqz0vzviFnHHP5duVWWD6/POt6jtEWkNz6SR/CrBfTEQavf&#xA;kT1KrI9K/TP+439N/Vv0t9Um+u/Uuf1f1OcXL0vV+Pj4ct8VTfFXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYqpXV1Ba273E7cY06mhJJJoqqBuzMTRQNydhiqSabaao3ma4v7mQRQSWsdNP8AhYxszuA5&#xA;kA3YqgDLUqKfCT1ysQ9VtIxnjMmQZY3LZZUiieWQ8Y41LO3gAKk4qkMOn6q3m86nJep+jZrULbaZ&#xA;6RDqyE85mkIDVYSIOB6U+eV8Hqtq8P18TIMsbXYqlUyMPNNk5kYq1ldgRnjxWktruKDl95xVjEv5&#xA;oeRNdW1stK1Vbi5muLSZE9KaMcI57SZyzSIqrSO6jajGvxexoqzqOSORBJGwdG3VlIII9iMVXYq7&#xA;FUunmaHUJ24uOcEQSQQyzLVWlrX0x25DauKtjUGqtWk40+OlncAk7VIJBp37HFWIHy9qOk6hp+o6&#xA;DdTahfxW/wCj7+51xbyWR7RecoKGGJazNPw5MwpwHjiq7T9G13VtHjfzhqF3a61Is6XkXl59Rt7I&#xA;LKBGhi5oswKoisCTs5amxxVSb8vNNEdjFa+Y/NFnDYSQSLFb3Fwqy+hJLIVn5QsZBMZz6td34rU7&#xA;YqybQrRbIafYRz3t6tnayxNfagJGnkPOKhlldEDuaHFU8xV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;VTuLiC2geedwkSCrMfuAAG5JOwA64qg7W2lup0v71SpSptLRqUhBqObUJrKy9/2QeI/aLKq0f/HV&#xA;uP8AjBB/xObFURJJHFG0kjBI0BZ2OwAAqScVUIke4lW4kHGNKNaqDIrUZKFpUbhv8RHEjb59FV7t&#xA;/pkS8iKxyHhTY0ZN+XalenevtiqtirsVSqaaFvNNlErqZUsrsvGCOQBltaVHXFV/mH/eCL/mMsf+&#xA;oyHFUyxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVbLLFFG0srrHGgLO7EBQB1JJ&#xA;6Yqpm4ZjxhjMlU5pJUCMkmijlud+uwO30VVSfTZNet9U1i51l7eLS04PYiKR3ZIxGDKZeVB9sNx4&#xA;qPh98riDxFqiDxHuRtvBNezpe3aGOKPe0tHG6k/7tkH89Og/ZHv0sbUxxVCKyrqd0zEKq28JZjsA&#xA;A825xVuMNdOlwWpbDjJbBGdS3JPtSqQv82yH59acVUViqixP1yIVehjkNAPg+0n2j/N4fTiqtirs&#xA;VS24/wCUlsP+YO8/5O2uKsf1n/Hx1BhcfopfL3122+rPH9Za9A+tW3o81NIvt+pzoenGnfFWYRiQ&#xA;IBIwZ/2mUFQT7Alv14quxV2KuxV2Kpb5juNSh0i5XSfT/S8sbrpqzB2iM4QsnqemCwT4fiP8aZGX&#xA;JjPlsraNJdy6VayXhVrl4w0rJ9kse6+3hjC63Rjvh3RmSZoXU7xba2NCfXm/d2yKOTtIwNOKitaf&#xA;aPgASdhkZXRpjO6NIby1LqsuiWsmqtG9+6VneEMsZJ7oGqeJHSuDHdbscZNbpnk2xTuJfShZqFmC&#xA;sURacmIUnioPU7YlSlflV/ML6WTr4iGoevMAIA4T0eZ9H7YB5enTl25VptkMd1u14ia3TjJtildX&#xA;UNrA08zcY0p0BYksQqqqipZmYgADcnbFUr8sza1Nb3LaqUMguJBb+mCoEQchFatfjUCj02r0yvGT&#xA;1acRlvackgdcsbkK+oR8GMKNMVYJsOKksQu0j8UNCd6E/ftiqU6A3mm5l1T9LMtrA06nSjCp9Vbc&#xA;oD+99RSnqc+QNARxp3yuBNm2rGTZtPEtoEkaUIDM2zSndiB2r4b9OmWNq6WWKKJ5ZXWOKNS0kjEK&#xA;qqoqSSdgAMVSm3hbUdRN5cRyJaxrE1pbyKVVyrOVmkBP2gd1Qj4dmb4qBFU4xVxIUEk0A3JPQDFU&#xA;rt2F5qskysRbiG2lgdGZfUqZ/tDb4fi2HfFU0xV2KqLA/XIjR6COQVB+D7SfaH83h9OKq2KuxVjc&#xA;t3e3Hm+xa0eJ7CKK5inYq/MkNFyEbV4MquAJDTY0HUNlcieIdzVIy4h3Jl5h/wB4Iv8AmMsf+oyH&#xA;LG1MsVdirsVdiqnNOkXAN9qRuEa0JqxBNPhBp03PbFVttbmMtLIeVxKF9ZlLcKqKURWLcV67Yq6x&#xA;INlbkFSDGlCg4ofhH2RtQeGKtXt5FaQ+o4Z2YhIoUFXkc9EQGm+3fYDckAE4qo2VlKsrXt2Ve9kH&#xA;EcalIY6g+lHX5VZurHwAVVVX6T/xyrL/AIwRf8QGKoiWQRxs5BbiCQq7sSBWgHcnFVGKAvKLmcAy&#xA;dYFZV5QqyryTkC1SSNyDiq+1XjEw4cP3kh48uXWRjWv+V1p26Yq3cXEFtA887hIkFWY/cAANySdg&#xA;B1xVK7OZL2eG/mDShuRsIEXnHEAu7u61T1WBpUttXiv7RZVV0wX8lsSTHAv1i45qAZGp68nRvhUH&#xA;/YnFUX9StQKyj1eMnrKZmL8Xrsy8yQtO1OmKrY0N0VnmQiEUMVtMi8ldHNJf2iCRQqNiO++wVVYF&#xA;pLcHhx5SA8uVeX7tRWn7PSlPavfFVRmVVLMQqqKsx2AA7nFUtiVtUkjuZAV06MiS2hYUMrA1WVwf&#xA;2R1RT3+I70oqjUK/XZRzq3px1jp0HJ6Gvv8AwxVWxVCRv9eKyxv/AKECkkMsTketSp7f7r6EUPxf&#xA;6v2lW4/+Orcf8YIP+JzYqisVdiqi6/6ZE3Emkcg512FWTbj3rTr2p74qrYqls8kmoyvaW7NHaRtx&#xA;vLpSVLEfahhYEGvZ3H2fsj4qlFVjxRReYNOiiRY4o7G7WONQFVVWS1AAA2AAxVjt3+XHkvSYtOu7&#xA;DTRFcWD2llauZZpONvJeW4ZGEjsHqI1FWBNBirNY4440EcahEXZVUAAD2AxVdirsVU5riKHh6hoZ&#xA;HEcYALEs3YAAnpufAbnbFVlrDKtZp6fWZVUSqjM0a8a/CnKmwqd6Cv4BVXxVBLfQW2lw3Er+opjT&#xA;gUWjSMyjiEQftMei4q1Z2crT/Xb2jXRBEUY3SFD+yvix/abv8sVR2KoPTHVNHtHatFt4yaAk/YHQ&#xA;CpP0YqvhhaZ0ubhPiFHt4XVeUHJOLAkFwX3YFgemw7kqrnvrcCQRn15I2CPFFR2DE0AYD7P+ypiq&#xA;GWWWG3mkf0rW1QTO8wbmyn1WLErTiPh3O53NKbbqqFpprXlxFfX/AKjrCB9Tt5juDSnrSxrSP1D2&#xA;+H4R7mgVTcAAUGwHQYqhNNIFs5OwE9xU/wDPd8VciG8YSSqVtlPwW0qAEyRyVWU1JP7AKCgp1O9K&#xA;KovFVGEKslyaKtZASQak/u03bwP8MVQKgauwkNf0StDGpFBcsD9s+MP8v8/X7NOSqaYqpKW+tSDk&#xA;pURpRB9oGr1J9j2+nFVFZBelWiY/VAVdZ43p6jKx+HYV4VWpNd+m4riqLxVCx/8AHVuP+MEH/E5s&#xA;VRWKuxVRdR9dibiCRHIOdfiFWTYL3Bpue304qhLmeW9naxtHKRx7Xl0nVf8AiqM/78I6n9ke5GKo&#xA;6CCG3hSGFBHFGOKIvQDFUtmhhXzTZSqiiV7K7DyADkQJbWlT1xVJtW80Nc3Uulro+pRm1vrVfrss&#xA;AjtZfTurZgYpWejB/Uop8VatO6rLI2ZkDMhjJ6o1Kj58Sw/HFV2KoDXdV/RWlXF8ImuJIVLR20dD&#xA;JKwHLhGCV5OQDQVyM5ULYZJcItfpjNcQR38vJZbiNT6ZLBUWpZRwJoG+L4j1PyAxibFphKwCjMky&#xA;Uru7gtIGnnbjGtBsCzFmNFVVFSzMTQAbk4qgNItp5o4NQvqtOY1+rxN1iRlFS1Kj1X/bI6fZFRuy&#xA;qaYqozXlvC4R2JkIJEaKzvRRUnioJp/tdTiqU6Mt9d6dp9xJAsSpHC9vHcKDJFSEqz0RnBZuVB8Q&#xA;oO3iqmps1cETyPOpk9RVegC+CUQJyUduVcVVZJIoYmkkZY4o1LO7EKqqoqSSdgAMVSjTYn1Gl3cK&#xA;Fs45pHs7UKV5MsrETTK1DzruqH7J+I/FQIqnOKuxVK9Oi+twyCZf9FW4uVMEiD43S6YrJWp+EFdh&#xA;Tfr4YqmmKuxVJYv9zE9yo9P9ELKA/DdrllRQVev+6xT/AGYp+x9tVOsVdiqX1a7vJBEQLUJHW7hk&#xA;XkzxyuGhoFJovEhviHWg74qmAAAoNgOgxV2KoWP/AI6tx/xgg/4nNiqKxV2KpTezzXOprYWbKjpG&#xA;4u7rfnCrGM8Y+xkZSD/k/Cx7KyqZW9vBbQJBAgSJBRVH3kkncknck9cVVCQBU7AdTiqRjUILnzbb&#xA;wRBuVvZ3YdiABvLbAUBPKmx3pQ9sVRXmH/eCL/mMsf8AqMhxVMsVQ2o6hbafaPdXHL004gKil3Zn&#xA;YKiIi1LMzEAAYqlM+nXEltfapqQU3n1eaO1hUkrbwkEhdyQZWoDIw9gNhUq0n4AAAAoB0AxVTuLi&#xA;C2geedwkSCrMfuAAG5JOwA64ql0RElwL6/JWSNWezsQCzxIQQXKLyZ5WWo2Hwj4V/aLKoi1lunto&#xA;ViidQYEImuT8fI0ADoPiLAVLV477dzRVVS1lZkeedndN+MdYo67fsglj06MxxVRs7SB4omWBYbNO&#xA;Mlna+n6Rjb4jyZNqE8q8Su3z6Kqmk/8AHKsv+MEX/EBiqJd0RGd2CooJZiaAAbkknFUtjRtUljuJ&#xA;lK6fGwe3gcEGV1NVlkU/sjqinv8AEd6UVRtmwMTEMG/eSiqjiNpGFKbbjoT364qrYqg2T68zpIpF&#xA;kpaOSGRCplZSN9yP3exFCvx/6v2lV2m7QyKdmWefkvccpWYV+asD8sVRWKpZIx1ZzDGxGmoStxIN&#xA;vXYbemjfyDfme/QftYqjLYIHnROPFHChUXjx/dpQHx/piqviqFd2uX9OFysKmslxGyGrI9GiH2iP&#xA;skP0p23+yqviREupAqcQIo1BAotAXoBvTb5Yqr4q7FULH/x1bj/jBB/xObFUViqX315I8rWVpJ6c&#xA;qjlc3VAVt0IrX4vh9Qj7IPT7RFNiqstXsIJrW3sqSo0UjqyAyFgzIzSGc7EsWq1W5MSDviqLQX8n&#xA;pNIY4KV9aNayk7fDxc8KUPX4Tiqg8NuHSCJfrF1GwYvI6u8AkDfvf3hYivEhQo3O3SpCqgYRF5g0&#xA;9AS5FjdhpGpyciS1XkxAFSaYqxefy558tZbS41Xzh+krBHsoZrFdOtrcvObq3AuPVVnK0Ks3ClPi&#xA;9hirNbq7t9OsXubyY+jCPjkK8nYk0ACRrVmYkKqqtSdgK4qhLGxuLm7XVNSWk6chY2lTxt432qwr&#xA;xadl+037IPBduTOqr65PDDpF400ixqYXUM5CgsykAb9ycVXXN8YYJpggVIaEyTt6SEd6EB22/wBX&#xA;fFUFHp9xqUzXWoM6W/wmxs1LRNHtvK7KQ/qNXbf4Rt1LYqmyRRRliiBS27kDcnxJ74qstFK2sKlS&#xA;hWNQUY8mFANie5GKqCx/XWSWZP8ARlKyW8MiMr+opJDuCfkVUrVTud6cVUZiqE0ogaTZk7AQR1P+&#xA;wGKoZR+l2Ejf8clTWNP+Wkj9s/8AFX8v8/X7NOSqaYqo2jcomPIv+8lFSOPSRhSnt0r3xVSlQX3O&#xA;F0P1MF47iORGX1aAdKkVj6g7fF8uqqLxVC2X+9N//wAZ1/5MRYqh53k1KSS1gbhYxsY7y4U/E7DZ&#xA;oYiOnhI/b7I+KpRVMURI0WONQiIAqIooABsAAMVU4GrLcDny4yAceNOP7tTSv7XWtfenbFVOV5J3&#xA;MMDFEH95cxlCVdWWsfE8tyta7bYqiEREUKihVHRVFBvv2xVSQj65KORJ9OOq9h8T7jbv88VVsVdi&#xA;qWC+hGqXohBuZYoLcNFDQtUtKQpJKqpoa/ERtiq2+utUluH0+y9OGdlDG43kMUbEjmylQoY0+Bat&#xA;XvQDFURY6PZ2iKF5yuBRpJWLlmLci7D7PNj1alcVRDN/pca86VjkPp8a1oyb8u1K9O9fbFXSzkOI&#xA;ogJJSVLryA4I1fjYVrT4SBTqfpIVbt4TFEqM5lkoPUmYKGdgAOTcQort2GKpdMjDzTZOZGKtZXYE&#xA;Z48VpLa7ig5fecVQnnTXNG0vTom1G9htT9Ytp1SV1V2jt7mKSZkSvJgiDk3EbDFUusPNOh6ldQ6r&#xA;cX9sY0Zxp9v9YjRYUcAetMJGTlKwBA4A8FJA6klVNx5i0VgPU12yQiTmBFNCKoOiPzZ6+5Xj9GKo&#xA;fVPMPlWDSNQeLULMu0EzsEniLu3A/wCVViaUxVbB5i0DUJku7nVLSO0jblZ2rTxqzEHaaZSwNe6I&#xA;fs/ab4qBFUy/xP5a/wCrtZ/9JEX/ADVirv8AE/lr/q7Wf/SRF/zViqWab5m8tXtjaO1/ZwWgiieO&#xA;2knVZVkjO3KriqrxFK9euKpn/ify1/1drP8A6SIv+asVd/ify1/1drP/AKSIv+asVSDTPMegarpt&#xA;nHNqNrDpscMYlhlmjSSdwgBR1LbRKeo/bP8AkfbVT/8AxP5a/wCrtZ/9JEX/ADVirv8AE/lr/q7W&#xA;f/SRF/zViqV23mry5qEU0J1S3W1Wa5guhcSojyAMVAiYOPg32YdtutaKpmPM3loCg1ayAHQfWIv+&#xA;asVb/wAT+Wv+rtZ/9JEX/NWKpHF5q0W+u7+2h1SC1t/rBFzcmeONmVYkThA3L9oru69B0o26qpzD&#xA;5h8qwRJDDqdjHFGoWONZ4QqqBQAANiq//E/lr/q7Wf8A0kRf81YqgB5s0Oae6todWgi4vxN001vx&#xA;T93G1IgzHlXkaErQNWvYFVGp5j8roOKapYqCSxAnhAqx5Mdm7k1OKrv8T+Wv+rtZ/wDSRF/zViqD&#xA;HnLy0L2VDqtsQOEaKJUPxULluSkgLRgKtQVGKqg81aNIAV1OxtwJPiEs8Llox1pwkopPY1PyxVo6&#xA;z5VcMLjV7S5UtzVZZ4Cq9KAKCF2ptUV98VQNz5v0RNWmtrTULT15beD052ljMCKJJQzMwYAlBT4K&#xA;1ao6CrKqj7LWvKtpEUTV7R3di80z3MJeRyAC7kEb7U22AoAAABiqI/xP5a/6u1n/ANJEX/NWKoO5&#xA;84eXo763iTUreQyI5IWeERgB4wWdi+xUNVR33xVWttf8twxjnrNnLMQBLOZoFZyO54kD5Yqrf4n8&#xA;tf8AV2s/+kiL/mrFUDFrekX3myygsb2C7lSxvHkWCVJCg9a1A5BSSK12xVOZtPsJ7q3u5raKW7te&#xA;X1W4dFaSL1BR/TcjkvIbGnXFVfFXYqlfmPQBrmnGyOoX2mblhdabObecVRo/tgNt8daEfaAPbFVX&#xA;Q9J/ROmRWH1y61D0uR+t30vrXDcmLfHJRa0rQbdMVR+KpT5p8ujzDo0ulnUr/SRKyN9d0qf6rdLw&#xA;YNRZQGoGpRtumKq2h6P+ibN7b69d3/OaWf1r6X1pR6rl/TVqLRErRF7DFUwxVB6xpn6TsGs/rdzZ&#xA;Bnjc3FnJ6Uw9KRZOIehor8eLeKkjFUB5Q8rf4a0trD9L6lrXKV5vrer3H1q4HOnwCTinwLTYUxVO&#xA;8VQ2p2TX2n3NmtzNZtcRtELu2ZVnj5inONmVwrDsabYqlHk7ygfLNncWx1vVdcNxKZjPrNyLqVKj&#xA;7EbBIwqf5NMVZBiq2WP1Inj5MnNSvNDRhUUqD4jFWK+QvLL6JDcxtquu6kYSbMPr1ytwziGWSQTx&#xA;lVWvqetx5dSqqKbbqssxVZNGZIXjDtGXUr6iGjLUUqpNdxirG/KfkX/Dl7c3X+INa1j6zDBB6GrX&#xA;n1qKP6ugT1Il4JxklpykPc+GKsnxV2Ksd0XyYmk6xcakut6veieS4k+o3t41xap9ZMZ4xxsKqsXo&#xA;/uxy+Hk3jirIsVdirGbDyN9T15dY/wAQa1c8Xmf9H3F5zsz60ksnEw8Bsnr8UFdlVB+zirJsVdir&#xA;FG/L8HzcvmQeY9dXjKZjoovj+jSTGsfE25Q/B8HLjy+0Se+KsrxV2KsR1j8uxqepi/HmXX7GlzBd&#xA;fVLO/MVufQaRvSKFG/dSer+8Su4VelMVf//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/">
         <xapMM:DocumentID>uuid:781B61F0F977E011A9ABDB561A6C6EA6</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:791B61F0F977E011A9ABDB561A6C6EA6</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource"/>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.007;PS 002.000;Core 1.0.38;makeotf.lib1.7.9032</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xapTPg:Fonts>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -332.677 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 332.677 li
820.04 332.677 li
820.04 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
.200195 0 mo
820.04 0 li
820.04 332.59 li
.200195 332.59 li
.200195 0 li
cp
clp
0 -.160156 mo
0 332.673 li
820.833 332.673 li
820.833 -.160156 li
0 -.160156 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
grestore
22.3335 306.173 mo
22.3335 17.0063 li
809.583 17.0063 li
809.583 306.173 li
22.3335 306.173 li
cp
false sop
0 0 0 0 cmyk
ef
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
22.3335 306.173 mo
22.3335 17.0063 li
809.583 17.0063 li
809.583 306.173 li
22.3335 306.173 li
@
101 17.0063 mo
101 24.8398 li
101 306.173 mo
101 298.257 li
22.3335 306.173 mo
22.3335 17.0063 li
22.3335 306.173 mo
809.583 306.173 li
809.583 306.173 mo
809.583 17.0063 li
22.3335 306.173 mo
22.3335 17.0063 li
22.3335 17.0063 mo
809.583 17.0063 li
22.3335 306.173 mo
809.583 306.173 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /Helvetica def
/FontInfo 7 dict dup begin
/Notice (Copyright 2000, 2004 , 2005Adobe Systems Incorporated. All Rights Reserved. U.S. Patent D454,582.Myriad is a registered trademark of Adobe Systems Incorporated.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
def
/FontBBox {-157 -250 1126 952} def
end
systemdict begin
dup /Private
15 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/FamilyBlues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/FamilyOtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/BlueScale 0.0604583 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B5E4CF4EC97A525E022C9B4FC
88EFB3F3BAD779956899C836BBD2FC8F5F391C07FB0B2C3B92A06F4A639C8E43
BB10FDB531B59E83D98A9AB718650C50F38FC91524BAA33EC4FF9905D1A9C> |-
/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D5
98E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/YSXVHS+Helvetica /Helvetica findfont ct_VMDictPut
/YSXVHS+Helvetica*1 
[48{/.notdef}rp /zero /one 206{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
92.6641 318.252 mo
(100)
[5.12988 5.12988 0 ]xsh
179.75 17.0063 mo
179.75 24.8398 li
179.75 306.173 mo
179.75 298.257 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACA07CBB1A
390893C6F8FDC203687F0DAB4019999EF2C31C2A8E2B5C18284C0FA933EB49F0
D3AAC406EC417696890BDF0C7AE9B4C23364F4C649F84537FC> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[48{/.notdef}rp /zero /one /two 205{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
171.414 318.252 mo
(200)
[5.12988 5.12988 0 ]xsh
258.5 17.0063 mo
258.5 24.8398 li
258.5 306.173 mo
258.5 298.257 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7BA8F622456C4A5B0CA9B1BA284AF806928062A6B7B09
FB3F0AFA0642F9B368E55CBEC860ACEDE00F619B43869FF145573EE19FF4FA26
1BF5938247732EEA9C997694C21F3826519E5860C319187A2BE7C4798BE40539
D59DC5F8C368613E2EF361E84E1BE9A2B721FABB539C13C42CCE1FC716B22FBB
381EE1131CEA0A76D50B43FAFEFB6984253871A40EF8DA774460484F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[48{/.notdef}rp /zero /one /two /three 204{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
250.164 318.252 mo
(300)
[5.12988 5.12988 0 ]xsh
337.167 17.0063 mo
337.167 24.8398 li
337.167 306.173 mo
337.167 298.257 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7BA8F425ECEAC1E8FFE1F2E4A9E9BFE692DFC86F0914D1
950B7E9330CFAE2AE0CE50BC8F9A81B99E65C7EB21064416D8548FA09CC9C658
8AD65393A47B2EBDED97474D4C03B3488707365B1350A023199FD7F8930> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[48{/.notdef}rp /zero /one /two /three /four 203{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
328.834 318.252 mo
(400)
[5.12988 5.12988 0 ]xsh
415.917 17.0063 mo
415.917 24.8398 li
415.917 306.173 mo
415.917 298.257 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/five <1C60D8A8C9B7BA8F622456C498CD57E93AA5454FC364F93ECEC83D391
3500E43A82F14121F71966C4788C2353DA5A8BD5D8CFB5314B38B5B35B8DBF6E
6B89948F26F660C16062F6C0ACEFA240305DC4EBB618986C70F22D9BDD5EF2FA
4DDB132186E4364560E4CE6F0F405A0BF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 53 /five put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[48{/.notdef}rp /zero /one /two /three /four /five 202{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
407.584 318.252 mo
(500)
[5.12988 5.12988 0 ]xsh
494.667 17.0063 mo
494.667 24.8398 li
494.667 306.173 mo
494.667 298.257 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7BA8F6239473257AB127E7620F87AA168F1AECB0A4CE93C
C295CEFD9192C2967A0DB83DCBD6BBAD18D6960D2101F671B2250912AB87B7A3
12023FCC73A003C62725D7FC83EAC1691C575B6AFB00517E51D41BA56D827F4B
6519D801FB562E8DCF2E48521AD57F7C657FA7114264065AFF4ECE505E9E5389
1A0834E3BEC3F8A67BA2E6FDAC2B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
201{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
486.334 318.252 mo
(600)
[5.12988 5.12988 0 ]xsh
573.333 17.0063 mo
573.333 24.8398 li
573.333 306.173 mo
573.333 298.257 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/seven <1C60D8A8C9B7BA8F425ECEA3CCEB01D7DB356DB8BA3E0A3CCCF78FF7
5F8426D973EF7AFAF46E5376078B0FAF79A0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 55 /seven put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven 200{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
565 318.252 mo
(700)
[5.12988 5.12988 0 ]xsh
652.083 17.0063 mo
652.083 24.8398 li
652.083 306.173 mo
652.083 298.257 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/eight <1C60D8A8C9B7BA8F623D810BCFAA50082B445FDEA9D15914896CD639
03178E46F4BF3526EF43F34E1C43C5D4BB259333F75AC77A2693879487E31A38
ED5E9191D3298AC0D970ED0241AD045F48A1E74AA2C4BE6A3C25B51C1786D2EF
03AE3AE584898B7F8F45ACBB487C3211863FEFD3620CE23C9E829D36E0D56EAB
E748926E17DB146990D6096B0ACBA84EC3179FD7D7DE1B7A8A7122D5F1201E33
3EBC5E306860669F4548CE801F630F0B98FE145245E3B61A937D385E9FFEC75A
53A58A9A8AA3119FE04926CCC605B3BEA563998B78AB28F03D9E0202CFE1CF72
350765F386FE675098260C4913D2BB6EF02533C78A20421F3CD9AE5EB64E891D
3358D805> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 56 /eight put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight 199{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
643.75 318.252 mo
(800)
[5.12988 5.12988 0 ]xsh
730.833 17.0063 mo
730.833 24.8398 li
730.833 306.173 mo
730.833 298.257 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/nine <1C60D8A8C9B7BA8F63126F4A1F6F4C8A6D297D6FEEB3E1EA33A18C32A
839F51A85CD7DE6BC7BE0FC5E14C273DEF590B88E507C7A736EF2A90ACB7B8F9
A190B2C51A24432873D103FAFC9B3793333CCD91BFB26AA2EDD101FDCA101247
D729F8EA9F184BC3D2FD9C99ABDCAACABC5E792EC3D0438CFE5E32E78D626F92
C945E9BEC772CDF50F38A2D46A5A571E853> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 57 /nine put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[48{/.notdef}rp /zero /one /two /three /four /five /six 
/seven /eight /nine 198{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
722.5 318.252 mo
(900)
[5.12988 5.12988 0 ]xsh
809.583 17.0063 mo
809.583 24.8398 li
809.583 306.173 mo
809.583 298.257 li
@
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
798.5 318.252 mo
(1000)
[5.12988 5.12988 5.12988 0 ]xsh
809.583 306.173 mo
801.667 306.173 li
22.3335 306.173 mo
30.1665 306.173 li
@
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
13.9141 309.841 mo
(0)sh
809.583 264.84 mo
801.667 264.84 li
22.3335 264.84 mo
30.1665 264.84 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B89DB76243241956147685E9D04DE27F343A7EF0A25AE
4387D3A3D08796B751439580940B3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 46 /period put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[46{/.notdef}rp /period /.notdef /zero /one /two /three /four 
/five /six /seven /eight /nine 198{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
0 268.502 mo
(0.05)
[5.12988 2.06982 5.12988 0 ]xsh
809.583 223.507 mo
801.667 223.507 li
22.3335 223.507 mo
30.1665 223.507 li
@
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
5.57813 227.158 mo
(0.)
[5.12988 0 ]xsh
12.7813 227.158 mo
(1)sh
809.583 182.173 mo
801.667 182.173 li
22.3335 182.173 mo
30.1665 182.173 li
@
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
0 185.841 mo
(0.15)
[5.12988 2.06982 5.12988 0 ]xsh
809.583 140.923 mo
801.667 140.923 li
22.3335 140.923 mo
30.1665 140.923 li
@
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
5.57813 144.591 mo
(0.)
[5.12988 0 ]xsh
12.7813 144.591 mo
(2)sh
809.583 99.5898 mo
801.667 99.5898 li
22.3335 99.5898 mo
30.1665 99.5898 li
@
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
0 103.252 mo
(0.25)
[5.12988 2.06982 5.12988 0 ]xsh
809.583 58.2563 mo
801.667 58.2563 li
22.3335 58.2563 mo
30.1665 58.2563 li
@
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
5.57813 61.916 mo
(0.)
[5.12988 0 ]xsh
12.7813 61.916 mo
(3)sh
809.583 17.0063 mo
801.667 17.0063 li
22.3335 17.0063 mo
30.1665 17.0063 li
@
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
0 20.666 mo
(0.35)
[5.12988 2.06982 5.12988 0 ]xsh
809.583 306.173 mo
809.583 17.0063 li
22.3335 306.173 mo
22.3335 17.0063 li
22.3335 17.0063 mo
809.583 17.0063 li
22.3335 306.173 mo
809.583 306.173 li
@
gsave
22.3335 306.257 mo
809.667 306.257 li
809.667 17.0063 li
22.3335 17.0063 li
22.3335 306.257 li
cp
clp
22.3335 306.173 mo
23.0835 305.34 li
23.8335 304.507 li
24.6665 303.673 li
25.4165 302.84 li
26.25 302.007 li
27 301.173 li
27.8335 300.34 li
28.5835 299.507 li
29.4165 298.673 li
30.1665 297.84 li
30.9165 297.007 li
31.75 296.257 li
32.5 295.423 li
33.3335 294.59 li
34.0835 293.757 li
34.9165 292.923 li
35.6665 292.09 li
36.5 291.257 li
37.25 290.423 li
38 289.59 li
38.833 288.757 li
39.583 287.923 li
40.4165 287.09 li
41.1665 286.34 li
42 285.507 li
42.75 284.673 li
43.583 283.84 li
44.333 283.007 li
45.083 282.173 li
45.9165 281.34 li
46.6665 280.507 li
47.5 279.673 li
48.25 278.84 li
49.083 278.007 li
49.833 277.257 li
50.6665 276.423 li
51.4165 275.59 li
52.1665 274.757 li
53 273.923 li
53.75 273.09 li
54.583 272.257 li
55.333 271.423 li
56.1665 270.59 li
56.9165 269.757 li
57.75 268.923 li
58.5 268.09 li
59.333 267.34 li
60.083 266.507 li
60.833 265.673 li
61.6665 264.84 li
62.4165 264.007 li
63.2495 263.173 li
63.9995 262.34 li
64.833 261.507 li
65.583 260.673 li
66.4165 259.84 li
67.1665 259.007 li
67.9165 258.173 li
68.7495 257.423 li
69.4995 256.59 li
70.333 255.757 li
71.083 254.923 li
71.9165 254.09 li
72.6665 253.257 li
73.4995 252.423 li
74.2495 251.59 li
74.9995 250.757 li
75.833 249.923 li
76.583 249.09 li
77.4165 248.34 li
78.1665 247.507 li
78.9995 246.673 li
79.7495 245.84 li
80.583 245.007 li
81.333 244.173 li
82.083 243.34 li
82.916 242.507 li
83.666 241.673 li
84.4995 240.84 li
85.2495 240.007 li
86.083 239.173 li
86.833 238.423 li
87.666 237.59 li
88.416 236.757 li
89.166 235.923 li
89.9995 235.09 li
90.7495 234.257 li
91.583 233.423 li
92.333 232.59 li
93.166 231.756 li
93.916 230.923 li
94.7495 230.09 li
95.4995 229.256 li
96.333 228.506 li
97.083 227.673 li
97.833 226.84 li
98.666 226.006 li
99.416 225.173 li
100.25 224.34 li
101 223.506 li
101.833 305.34 li
102.583 304.506 li
103.416 303.673 li
103.417 303.673 mo
104.167 302.84 li
104.917 302.007 li
105.75 301.173 li
106.5 300.34 li
107.333 299.507 li
108.083 298.673 li
108.917 297.84 li
109.667 297.007 li
110.5 296.257 li
111.25 295.423 li
112 294.59 li
112.833 293.757 li
113.583 292.923 li
114.417 292.09 li
115.167 291.257 li
116 290.423 li
116.75 289.59 li
117.583 288.757 li
118.333 287.923 li
119.083 287.09 li
119.917 286.34 li
120.667 285.507 li
121.5 284.673 li
122.25 283.84 li
123.083 283.007 li
123.833 282.173 li
124.667 281.34 li
125.417 280.507 li
126.25 279.673 li
127 278.84 li
127.75 278.007 li
128.583 277.257 li
129.333 276.423 li
130.167 275.59 li
130.917 274.757 li
131.75 273.923 li
132.5 273.09 li
133.333 272.257 li
134.083 271.423 li
134.833 270.59 li
135.667 269.757 li
136.417 268.923 li
137.25 268.09 li
138 267.34 li
138.833 266.507 li
139.583 265.673 li
140.417 264.84 li
141.167 264.007 li
141.917 263.173 li
142.75 262.34 li
143.5 261.507 li
144.333 260.673 li
145.083 259.84 li
145.917 259.007 li
146.667 258.173 li
147.5 257.423 li
148.25 256.59 li
149 255.757 li
149.833 254.923 li
150.583 254.09 li
151.417 253.257 li
152.167 252.423 li
153 251.59 li
153.75 250.757 li
154.583 249.923 li
155.333 249.09 li
156.083 248.34 li
156.917 247.507 li
157.667 246.673 li
158.5 245.84 li
159.25 245.007 li
160.083 244.173 li
160.833 243.34 li
161.666 242.507 li
162.416 241.673 li
163.25 240.84 li
164 240.007 li
164.75 239.173 li
165.583 238.423 li
166.333 237.59 li
167.166 236.757 li
167.916 235.923 li
168.75 235.09 li
169.5 234.257 li
170.333 233.423 li
171.083 232.59 li
171.833 231.757 li
172.666 230.923 li
173.416 230.09 li
174.25 229.257 li
175 228.507 li
175.833 227.673 li
176.583 226.84 li
177.416 226.007 li
178.166 225.173 li
178.916 224.34 li
179.75 223.506 li
180.5 222.673 li
181.333 221.84 li
182.083 221.006 li
182.916 220.173 li
183.666 219.423 li
184.5 218.59 li
185.25 217.756 li
186 216.923 li
186.833 216.09 li
187.583 215.256 li
188.416 214.423 li
189.166 213.59 li
190 212.756 li
190.75 211.923 li
191.583 211.09 li
192.333 210.256 li
193.083 209.506 li
193.916 208.673 li
194.666 207.84 li
195.5 207.006 li
196.25 206.173 li
197.083 205.34 li
197.833 204.506 li
198.666 203.673 li
199.416 202.84 li
200.25 202.006 li
201 201.173 li
201.75 200.34 li
202.583 199.59 li
203.333 198.756 li
204.166 197.923 li
204.916 197.09 li
205.749 196.256 li
206.499 195.423 li
207.333 194.59 li
208.083 193.756 li
208.833 192.923 li
209.666 192.09 li
210.416 191.256 li
211.249 190.506 li
211.999 189.673 li
212.833 188.84 li
213.583 188.006 li
214.416 187.173 li
215.166 186.34 li
215.916 185.506 li
216.749 184.673 li
217.499 183.84 li
218.333 183.006 li
219.083 182.173 li
219.916 181.34 li
220.666 180.59 li
221.499 179.756 li
222.249 178.923 li
222.999 178.09 li
223.833 177.256 li
224.583 176.423 li
225.416 175.59 li
226.166 174.756 li
226.999 173.923 li
227.749 173.09 li
228.583 172.256 li
229.333 171.423 li
230.166 170.673 li
230.916 169.84 li
231.666 169.006 li
232.499 168.173 li
233.249 167.34 li
234.083 166.506 li
234.833 165.673 li
235.666 164.84 li
236.416 164.006 li
237.249 163.173 li
237.999 162.34 li
238.749 161.59 li
239.583 160.756 li
240.333 159.923 li
241.166 159.09 li
241.916 158.256 li
242.749 157.423 li
243.499 156.59 li
244.333 155.756 li
245.083 154.923 li
245.833 154.09 li
246.666 153.256 li
247.416 152.423 li
248.249 151.673 li
248.999 150.84 li
249.832 150.006 li
250.582 149.173 li
251.416 148.34 li
252.166 147.506 li
252.916 146.673 li
253.749 145.84 li
254.499 145.006 li
255.332 144.173 li
256.082 143.34 li
256.916 142.506 li
257.666 141.756 li
258.499 140.923 li
259.249 305.34 li
259.999 304.506 li
260.832 303.673 li
261.582 302.84 li
262.416 302.006 li
263.166 301.173 li
263.999 300.34 li
264.749 299.506 li
265.582 298.673 li
266.332 297.84 li
267.166 297.006 li
267.916 296.256 li
268.666 295.423 li
269.499 294.59 li
270.249 293.756 li
271.082 292.923 li
271.832 292.09 li
272.666 291.256 li
273.416 290.423 li
274.249 289.59 li
274.999 288.756 li
275.749 287.923 li
276.582 287.09 li
277.332 286.34 li
278.166 285.506 li
278.916 284.673 li
279.749 283.84 li
280.499 283.006 li
281.332 282.173 li
282.082 281.34 li
282.832 280.506 li
283.666 279.673 li
284.416 278.84 li
285.249 278.006 li
285.999 277.256 li
286.832 276.423 li
287.582 275.59 li
288.416 274.756 li
289.166 273.923 li
289.916 273.09 li
290.749 272.256 li
291.499 271.423 li
292.332 270.59 li
293.082 269.756 li
293.916 268.923 li
294.666 268.09 li
295.499 267.34 li
296.249 266.506 li
297.082 265.673 li
297.832 264.84 li
298.582 264.006 li
299.416 263.173 li
300.166 262.34 li
300.999 261.506 li
301.749 260.673 li
302.582 259.84 li
303.332 259.006 li
304.166 258.173 li
304.916 257.423 li
305.666 256.59 li
306.499 255.756 li
307.249 254.923 li
308.082 254.09 li
308.832 253.256 li
309.666 252.423 li
310.416 251.59 li
311.249 250.756 li
311.999 249.923 li
312.749 249.09 li
313.582 248.34 li
314.332 247.506 li
315.166 246.673 li
315.916 245.84 li
316.749 245.006 li
317.499 244.173 li
318.332 243.34 li
319.082 242.506 li
319.832 241.673 li
320.666 240.84 li
321.416 240.006 li
322.249 239.173 li
322.999 238.423 li
323.832 237.59 li
324.582 236.756 li
325.416 235.923 li
326.166 235.09 li
326.916 234.256 li
327.749 233.423 li
328.499 232.59 li
329.332 231.756 li
330.082 230.923 li
330.916 230.09 li
331.666 229.256 li
332.499 228.506 li
333.249 227.673 li
334.082 226.84 li
334.832 226.006 li
335.582 225.173 li
336.416 224.34 li
337.166 223.506 li
337.999 222.673 li
338.749 221.84 li
338.75 221.84 mo
339.583 221.007 li
340.333 220.173 li
341.167 219.423 li
341.917 218.59 li
342.667 217.757 li
343.5 216.923 li
344.25 216.09 li
345.083 215.257 li
345.833 214.423 li
346.667 213.59 li
347.417 212.757 li
348.25 211.923 li
349 211.09 li
349.75 210.257 li
350.583 209.507 li
351.333 208.673 li
352.167 207.84 li
352.917 207.007 li
353.75 206.173 li
354.5 205.34 li
355.333 204.507 li
356.083 203.673 li
356.833 202.84 li
357.667 202.007 li
358.417 201.173 li
359.25 200.34 li
360 199.59 li
360.833 198.757 li
361.583 197.923 li
362.417 197.09 li
363.167 196.257 li
363.917 195.423 li
364.75 194.59 li
365.5 193.757 li
366.333 192.923 li
367.083 192.09 li
367.917 191.257 li
368.667 190.507 li
369.5 189.673 li
370.25 188.84 li
371.083 188.007 li
371.833 187.173 li
372.583 186.34 li
373.417 185.507 li
374.167 184.673 li
375 183.84 li
375.75 183.007 li
376.583 182.173 li
377.333 181.34 li
378.167 180.59 li
378.917 179.757 li
379.667 178.923 li
380.5 178.09 li
381.25 177.257 li
382.083 176.423 li
382.833 175.59 li
383.667 174.757 li
384.417 173.923 li
385.25 173.09 li
386 172.257 li
386.75 171.423 li
387.583 170.673 li
388.333 169.84 li
389.167 169.007 li
389.917 168.173 li
390.75 167.34 li
391.5 166.506 li
392.333 165.673 li
393.083 164.84 li
393.833 164.006 li
394.667 163.173 li
395.417 162.34 li
396.25 161.59 li
397 160.756 li
397.833 159.923 li
398.583 159.09 li
399.417 158.256 li
400.167 157.423 li
401 156.59 li
401.75 155.756 li
402.5 154.923 li
403.333 154.09 li
404.083 153.256 li
404.917 152.423 li
405.667 151.673 li
406.5 150.84 li
407.25 150.006 li
408.083 149.173 li
408.833 148.34 li
409.583 147.506 li
410.417 146.673 li
411.167 145.84 li
412 145.006 li
412.75 144.173 li
413.583 143.34 li
414.333 142.506 li
415.167 141.756 li
415.917 140.923 li
416.667 305.34 li
417.5 304.507 li
418.25 303.673 li
419.083 302.84 li
419.833 302.007 li
420.667 301.173 li
421.417 300.34 li
422.25 299.507 li
423 298.673 li
423.75 297.84 li
424.583 297.007 li
425.333 296.257 li
426.167 295.423 li
426.917 294.59 li
427.75 293.757 li
428.5 292.923 li
429.333 292.09 li
430.083 291.257 li
430.833 290.423 li
431.667 289.59 li
432.417 288.757 li
433.25 287.923 li
434 287.09 li
434.833 286.34 li
435.583 285.507 li
436.417 284.673 li
437.167 283.84 li
438 283.007 li
438.75 282.173 li
439.5 281.34 li
440.333 280.507 li
441.083 279.673 li
441.917 278.84 li
442.667 278.007 li
443.5 277.257 li
444.25 276.423 li
445.083 275.59 li
445.833 274.757 li
446.583 273.923 li
447.417 273.09 li
448.167 272.257 li
449 271.423 li
449.75 270.59 li
450.583 269.757 li
451.333 268.923 li
452.167 268.09 li
452.917 267.34 li
453.667 266.507 li
454.5 265.673 li
455.25 264.84 li
456.083 264.007 li
456.833 263.173 li
457.667 262.34 li
458.417 261.507 li
459.25 260.673 li
460 259.84 li
460.75 259.007 li
461.583 258.173 li
462.333 257.423 li
463.167 256.59 li
463.917 255.757 li
464.75 254.923 li
465.5 254.09 li
466.333 253.257 li
467.083 252.423 li
467.917 251.59 li
468.667 250.757 li
469.417 249.923 li
470.25 249.09 li
471 248.34 li
471.833 247.506 li
472.583 246.673 li
473.417 245.84 li
474.167 245.006 li
475 244.173 li
475.75 243.34 li
476.5 242.506 li
477.333 241.673 li
478.083 240.84 li
478.917 240.006 li
479.667 239.173 li
480.5 238.423 li
481.25 237.59 li
482.083 236.756 li
482.833 235.923 li
483.583 235.09 li
484.417 234.256 li
485.167 233.423 li
486 232.59 li
486.75 231.756 li
487.583 230.923 li
488.333 230.09 li
489.167 229.256 li
489.917 228.506 li
490.667 227.673 li
491.5 226.84 li
492.25 226.006 li
493.083 225.173 li
493.833 224.34 li
494.667 223.506 li
495.417 222.673 li
496.25 221.84 li
497 221.006 li
497.75 220.173 li
498.583 219.423 li
499.333 218.59 li
500.167 217.756 li
500.917 216.923 li
501.75 216.09 li
502.5 215.256 li
503.333 214.423 li
504.083 213.59 li
504.917 212.756 li
505.667 211.923 li
506.417 211.09 li
507.25 210.256 li
508 209.506 li
508.833 208.673 li
509.583 207.84 li
510.417 207.006 li
511.167 206.173 li
512 205.34 li
512.75 204.506 li
513.5 203.673 li
514.333 202.84 li
515.083 202.006 li
515.917 201.173 li
516.667 200.34 li
517.5 199.59 li
518.25 198.756 li
519.083 197.923 li
519.833 197.09 li
520.583 196.256 li
521.417 195.423 li
522.167 194.59 li
523 193.756 li
523.75 192.923 li
524.583 192.09 li
525.333 191.256 li
526.167 190.506 li
526.917 189.673 li
527.667 188.84 li
528.5 188.006 li
529.25 187.173 li
530.083 186.34 li
530.833 185.506 li
531.667 184.673 li
532.417 183.84 li
533.25 183.006 li
534 182.173 li
534.75 181.34 li
535.583 180.59 li
536.333 179.756 li
537.167 178.923 li
537.917 178.09 li
538.75 177.256 li
539.5 176.423 li
540.333 175.59 li
541.083 174.756 li
541.917 173.923 li
542.667 173.09 li
543.417 172.256 li
544.25 171.423 li
545 170.673 li
545.833 169.84 li
546.583 169.006 li
547.417 168.173 li
548.167 167.34 li
549 166.506 li
549.75 165.673 li
550.5 164.84 li
551.333 164.006 li
552.083 163.173 li
552.917 162.34 li
553.667 161.59 li
554.5 160.756 li
555.25 159.923 li
556.084 159.09 li
556.834 158.256 li
557.584 157.423 li
558.417 156.59 li
559.167 155.756 li
560 154.923 li
560.75 154.09 li
561.584 153.256 li
562.334 152.423 li
563.167 151.673 li
563.917 150.84 li
564.667 150.006 li
565.5 149.173 li
566.25 148.34 li
567.084 147.506 li
567.834 146.673 li
568.667 145.84 li
569.417 145.006 li
570.25 144.173 li
571 143.34 li
571.834 142.506 li
572.584 141.756 li
573.334 140.923 li
574.167 140.09 li
574.167 140.09 mo
574.917 139.256 li
575.75 138.423 li
576.5 137.59 li
577.333 136.756 li
578.083 135.923 li
578.917 135.09 li
579.667 134.256 li
580.417 133.423 li
581.25 132.673 li
582 131.84 li
582.833 131.006 li
583.583 130.173 li
584.417 129.34 li
585.167 128.506 li
586 127.673 li
586.75 126.84 li
587.5 126.006 li
588.333 125.173 li
589.083 124.34 li
589.917 123.506 li
590.667 122.756 li
591.5 121.923 li
592.25 121.09 li
593.083 120.256 li
593.833 119.423 li
594.583 118.59 li
595.417 117.756 li
596.167 116.923 li
597 116.09 li
597.75 115.256 li
598.583 114.423 li
599.333 113.59 li
600.167 112.84 li
600.917 112.006 li
601.667 111.173 li
602.5 110.34 li
603.25 109.506 li
604.083 108.673 li
604.833 107.84 li
605.667 107.006 li
606.417 106.173 li
607.25 105.34 li
608 104.506 li
608.833 103.756 li
609.583 102.923 li
610.333 102.09 li
611.167 101.256 li
611.917 100.423 li
612.75 99.5898 li
613.5 98.7563 li
614.333 97.9233 li
615.083 97.0898 li
615.917 96.2563 li
616.667 95.4233 li
617.417 94.5898 li
618.25 93.8398 li
619 93.0063 li
619.833 92.1729 li
620.583 91.3398 li
621.417 90.5063 li
622.167 89.6729 li
623 88.8398 li
623.75 88.0063 li
624.5 87.1729 li
625.333 86.3398 li
626.083 85.5063 li
626.917 84.6729 li
627.667 83.9229 li
628.5 83.0898 li
629.25 82.2563 li
630.083 81.4229 li
630.833 80.5898 li
631.583 79.7563 li
632.417 78.9229 li
633.167 78.0898 li
634 77.2563 li
634.75 76.4229 li
635.583 75.5898 li
636.333 74.8398 li
637.167 74.0063 li
637.917 73.1729 li
638.75 72.3398 li
639.5 71.5063 li
640.25 70.6729 li
641.083 69.8398 li
641.833 69.0063 li
642.667 68.1729 li
643.417 67.3398 li
644.25 66.5063 li
645 65.6729 li
645.833 64.9229 li
646.583 64.0898 li
647.333 63.2563 li
648.167 62.4229 li
648.917 61.5898 li
649.75 60.7563 li
650.5 59.9229 li
651.333 59.0898 li
652.083 58.2563 li
652.917 305.34 li
653.667 304.506 li
654.417 303.673 li
655.25 302.84 li
656 302.006 li
656.833 301.173 li
657.583 300.34 li
658.417 299.506 li
659.167 298.673 li
660 297.84 li
660.75 297.006 li
661.5 296.256 li
662.333 295.423 li
663.083 294.59 li
663.917 293.756 li
664.667 292.923 li
665.5 292.09 li
666.25 291.256 li
667.083 290.423 li
667.833 289.59 li
668.583 288.756 li
669.417 287.923 li
670.167 287.09 li
671 286.34 li
671.75 285.506 li
672.583 284.673 li
673.333 283.84 li
674.167 283.006 li
674.917 282.173 li
675.75 281.34 li
676.5 280.506 li
677.25 279.673 li
678.083 278.84 li
678.833 278.006 li
679.667 277.256 li
680.417 276.423 li
681.25 275.59 li
682 274.756 li
682.834 273.923 li
683.584 273.09 li
684.334 272.256 li
685.167 271.423 li
685.917 270.59 li
686.75 269.756 li
687.5 268.923 li
688.334 268.09 li
689.084 267.34 li
689.917 266.506 li
690.667 265.673 li
691.417 264.84 li
692.25 264.006 li
693 263.173 li
693.834 262.34 li
694.584 261.506 li
695.417 260.673 li
696.167 259.84 li
697 259.006 li
697.75 258.173 li
698.5 257.423 li
699.334 256.59 li
700.084 255.756 li
700.917 254.923 li
701.667 254.09 li
702.5 253.256 li
703.25 252.423 li
704.084 251.59 li
704.834 250.756 li
705.584 249.923 li
706.417 249.09 li
707.167 248.34 li
708 247.506 li
708.75 246.673 li
709.584 245.84 li
710.334 245.006 li
711.167 244.173 li
711.917 243.34 li
712.75 242.506 li
713.5 241.673 li
714.25 240.84 li
715.084 240.006 li
715.834 239.173 li
716.667 238.423 li
717.417 237.59 li
718.25 236.756 li
719 235.923 li
719.834 235.09 li
720.584 234.256 li
721.334 233.423 li
722.167 232.59 li
722.917 231.756 li
723.75 230.923 li
724.5 230.09 li
725.334 229.256 li
726.084 228.506 li
726.917 227.673 li
727.667 226.84 li
728.417 226.006 li
729.25 225.173 li
730 224.34 li
730.834 223.506 li
731.584 222.673 li
732.417 221.84 li
733.167 221.006 li
734 220.173 li
734.75 219.423 li
735.5 218.59 li
736.334 217.756 li
737.084 216.923 li
737.917 216.09 li
738.667 215.256 li
739.5 214.423 li
740.25 213.59 li
741.084 212.756 li
741.834 211.923 li
742.667 211.09 li
743.417 210.256 li
744.167 209.506 li
745 208.673 li
745.75 207.84 li
746.584 207.006 li
747.334 206.173 li
748.167 205.34 li
748.917 204.506 li
749.75 203.673 li
750.5 202.84 li
751.25 202.006 li
752.084 201.173 li
752.834 200.34 li
753.667 199.59 li
754.417 198.756 li
755.25 197.923 li
756 197.09 li
756.834 196.256 li
757.584 195.423 li
758.334 194.59 li
759.167 193.756 li
759.917 192.923 li
760.75 192.09 li
761.5 191.256 li
762.334 190.506 li
763.084 189.673 li
763.917 188.84 li
764.667 188.006 li
765.417 187.173 li
766.25 186.34 li
767 185.506 li
767.833 184.673 li
768.583 183.84 li
769.417 183.006 li
770.167 182.173 li
771 181.34 li
771.75 180.59 li
772.5 179.756 li
773.333 178.923 li
774.083 178.09 li
774.917 177.256 li
775.667 176.423 li
776.5 175.59 li
777.25 174.756 li
778.083 173.923 li
778.833 173.09 li
779.667 172.256 li
780.417 171.423 li
781.167 170.673 li
782 169.84 li
782.75 169.006 li
783.583 168.173 li
784.333 167.34 li
785.167 166.506 li
785.917 165.673 li
786.75 164.839 li
787.5 164.006 li
788.25 163.173 li
789.083 162.339 li
789.833 161.589 li
790.667 160.756 li
791.417 159.923 li
792.25 159.089 li
793 158.256 li
793.833 157.423 li
794.583 156.589 li
795.333 155.756 li
796.167 154.923 li
796.917 154.089 li
797.75 153.256 li
798.5 152.423 li
799.333 151.673 li
800.083 150.839 li
800.916 150.006 li
801.666 149.173 li
802.416 148.339 li
803.25 147.506 li
804 146.673 li
804.833 145.839 li
805.583 145.006 li
806.416 144.173 li
807.166 143.339 li
808 142.506 li
808.75 141.756 li
809.583 140.923 li
@
[6 6 ] 0 dsh
22.3335 306.173 mo
23.0835 305.34 li
23.8335 304.507 li
24.6665 303.673 li
25.4165 302.84 li
26.25 302.007 li
27 301.173 li
27.8335 300.34 li
28.5835 299.507 li
29.4165 298.673 li
30.1665 297.84 li
30.9165 297.007 li
31.75 296.257 li
32.5 295.423 li
33.3335 294.59 li
34.0835 293.757 li
34.9165 292.923 li
35.6665 292.09 li
36.5 291.257 li
37.25 290.423 li
38 289.59 li
38.833 288.757 li
39.583 287.923 li
40.4165 287.09 li
41.1665 286.34 li
42 285.507 li
42.75 284.673 li
43.583 283.84 li
44.333 283.007 li
45.083 282.173 li
45.9165 281.34 li
46.6665 280.507 li
47.5 279.673 li
48.25 278.84 li
49.083 278.007 li
49.833 277.257 li
50.6665 276.423 li
51.4165 275.59 li
52.1665 274.757 li
53 273.923 li
53.75 273.09 li
54.583 272.257 li
55.333 271.423 li
56.1665 270.59 li
56.9165 269.757 li
57.75 268.923 li
58.5 268.09 li
59.333 267.34 li
60.083 266.507 li
60.833 265.673 li
61.6665 264.84 li
62.4165 264.007 li
63.2495 263.173 li
63.9995 262.34 li
64.833 261.507 li
65.583 260.673 li
66.4165 259.84 li
67.1665 259.007 li
67.9165 258.173 li
68.7495 257.423 li
69.4995 256.59 li
70.333 255.757 li
71.083 254.923 li
71.9165 254.09 li
72.6665 253.257 li
73.4995 252.423 li
74.2495 251.59 li
74.9995 250.757 li
75.833 249.923 li
76.583 249.09 li
77.4165 248.34 li
78.1665 247.507 li
78.9995 246.673 li
79.7495 245.84 li
80.583 245.007 li
81.333 244.173 li
82.083 243.34 li
82.916 242.507 li
83.666 241.673 li
84.4995 240.84 li
85.2495 240.007 li
86.083 239.173 li
86.833 238.423 li
87.666 237.59 li
88.416 236.757 li
89.166 235.923 li
89.9995 235.09 li
90.7495 234.257 li
91.583 233.423 li
92.333 232.59 li
93.166 231.756 li
93.916 230.923 li
94.7495 230.09 li
95.4995 229.256 li
96.333 228.506 li
97.083 227.673 li
97.833 226.84 li
98.666 226.006 li
99.416 225.173 li
100.25 224.34 li
101 223.506 li
101.833 222.673 li
102.583 221.84 li
103.416 221.006 li
103.417 221.007 mo
104.167 220.173 li
104.917 219.423 li
105.75 218.59 li
106.5 217.757 li
107.333 216.923 li
108.083 216.09 li
108.917 215.257 li
109.667 214.423 li
110.5 213.59 li
111.25 212.757 li
112 211.923 li
112.833 211.09 li
113.583 210.257 li
114.417 209.507 li
115.167 208.673 li
116 207.84 li
116.75 207.007 li
117.583 206.173 li
118.333 205.34 li
119.083 204.507 li
119.917 203.673 li
120.667 202.84 li
121.5 202.007 li
122.25 201.173 li
123.083 200.34 li
123.833 199.59 li
124.667 198.757 li
125.417 197.923 li
126.25 197.09 li
127 196.257 li
127.75 195.423 li
128.583 194.59 li
129.333 193.757 li
130.167 192.923 li
130.917 192.09 li
131.75 191.257 li
132.5 190.507 li
133.333 189.673 li
134.083 188.84 li
134.833 188.007 li
135.667 187.173 li
136.417 186.34 li
137.25 185.507 li
138 184.673 li
138.833 183.84 li
139.583 183.007 li
140.417 182.173 li
141.167 181.34 li
141.917 180.59 li
142.75 179.757 li
143.5 178.923 li
144.333 178.09 li
145.083 177.257 li
145.917 176.423 li
146.667 175.59 li
147.5 174.757 li
148.25 173.923 li
149 173.09 li
149.833 172.257 li
150.583 171.423 li
151.417 170.673 li
152.167 169.84 li
153 169.007 li
153.75 168.173 li
154.583 167.34 li
155.333 166.506 li
156.083 165.673 li
156.917 164.84 li
157.667 164.006 li
158.5 163.173 li
159.25 162.34 li
160.083 161.59 li
160.833 160.756 li
161.666 159.923 li
162.416 159.09 li
163.25 158.256 li
164 157.423 li
164.75 156.59 li
165.583 155.756 li
166.333 154.923 li
167.166 154.09 li
167.916 153.256 li
168.75 152.423 li
169.5 151.673 li
170.333 150.84 li
171.083 150.006 li
171.833 149.173 li
172.666 148.34 li
173.416 147.506 li
174.25 146.673 li
175 145.84 li
175.833 145.006 li
176.583 144.173 li
177.416 143.34 li
178.166 142.506 li
178.916 141.756 li
179.75 140.923 li
180.5 305.34 li
181.333 304.507 li
182.083 303.673 li
182.916 302.84 li
183.666 302.007 li
184.5 301.173 li
185.25 300.34 li
186 299.507 li
186.833 298.673 li
187.583 297.84 li
188.416 297.007 li
189.166 296.257 li
190 295.423 li
190.75 294.59 li
191.583 293.757 li
192.333 292.923 li
193.083 292.09 li
193.916 291.257 li
194.666 290.423 li
195.5 289.59 li
196.25 288.757 li
197.083 287.923 li
197.833 287.09 li
198.666 286.34 li
199.416 285.507 li
200.25 284.673 li
201 283.84 li
201.75 283.007 li
202.583 282.173 li
203.333 281.34 li
204.166 280.507 li
204.916 279.673 li
205.749 278.84 li
206.499 278.007 li
207.333 277.257 li
208.083 276.423 li
208.833 275.59 li
209.666 274.757 li
210.416 273.923 li
211.249 273.09 li
211.999 272.257 li
212.833 271.423 li
213.583 270.59 li
214.416 269.757 li
215.166 268.923 li
215.916 268.09 li
216.749 267.34 li
217.499 266.507 li
218.333 265.673 li
219.083 264.84 li
219.916 264.007 li
220.666 263.173 li
221.499 262.34 li
222.249 261.507 li
222.999 260.673 li
223.833 259.84 li
224.583 259.007 li
225.416 258.173 li
226.166 257.423 li
226.999 256.59 li
227.749 255.757 li
228.583 254.923 li
229.333 254.09 li
230.166 253.257 li
230.916 252.423 li
231.666 251.59 li
232.499 250.757 li
233.249 249.923 li
234.083 249.09 li
234.833 248.34 li
235.666 247.507 li
236.416 246.673 li
237.249 245.84 li
237.999 245.007 li
238.749 244.173 li
239.583 243.34 li
240.333 242.507 li
241.166 241.673 li
241.916 240.84 li
242.749 240.006 li
243.499 239.173 li
244.333 238.423 li
245.083 237.59 li
245.833 236.756 li
246.666 235.923 li
247.416 235.09 li
248.249 234.256 li
248.999 233.423 li
249.832 232.59 li
250.582 231.756 li
251.416 230.923 li
252.166 230.09 li
252.916 229.256 li
253.749 228.506 li
254.499 227.673 li
255.332 226.84 li
256.082 226.006 li
256.916 225.173 li
257.666 224.34 li
258.499 223.506 li
259.249 222.673 li
259.999 221.84 li
260.832 221.006 li
261.582 220.173 li
262.416 219.423 li
263.166 218.59 li
263.999 217.756 li
264.749 216.923 li
265.582 216.09 li
266.332 215.256 li
267.166 214.423 li
267.916 213.59 li
268.666 212.756 li
269.499 211.923 li
270.249 211.09 li
271.082 210.256 li
271.832 209.506 li
272.666 208.673 li
273.416 207.84 li
274.249 207.006 li
274.999 206.173 li
275.749 205.34 li
276.582 204.506 li
277.332 203.673 li
278.166 202.84 li
278.916 202.006 li
279.749 201.173 li
280.499 200.34 li
281.332 199.59 li
282.082 198.756 li
282.832 197.923 li
283.666 197.09 li
284.416 196.256 li
285.249 195.423 li
285.999 194.59 li
286.832 193.756 li
287.582 192.923 li
288.416 192.09 li
289.166 191.256 li
289.916 190.506 li
290.749 189.673 li
291.499 188.84 li
292.332 188.006 li
293.082 187.173 li
293.916 186.34 li
294.666 185.506 li
295.499 184.673 li
296.249 183.84 li
297.082 183.006 li
297.832 182.173 li
298.582 181.34 li
299.416 180.59 li
300.166 179.756 li
300.999 178.923 li
301.749 178.09 li
302.582 177.256 li
303.332 176.423 li
304.166 175.59 li
304.916 174.756 li
305.666 173.923 li
306.499 173.09 li
307.249 172.256 li
308.082 171.423 li
308.832 170.673 li
309.666 169.84 li
310.416 169.006 li
311.249 168.173 li
311.999 167.34 li
312.749 166.506 li
313.582 165.673 li
314.332 164.84 li
315.166 164.006 li
315.916 163.173 li
316.749 162.34 li
317.499 161.59 li
318.332 160.756 li
319.082 159.923 li
319.832 159.09 li
320.666 158.256 li
321.416 157.423 li
322.249 156.59 li
322.999 155.756 li
323.832 154.923 li
324.582 154.09 li
325.416 153.256 li
326.166 152.423 li
326.916 151.673 li
327.749 150.84 li
328.499 150.006 li
329.332 149.173 li
330.082 148.34 li
330.916 147.506 li
331.666 146.673 li
332.499 145.84 li
333.249 145.006 li
334.082 144.173 li
334.832 143.34 li
335.582 142.506 li
336.416 141.756 li
337.166 140.923 li
337.999 305.34 li
338.749 304.506 li
338.75 304.507 mo
339.583 303.673 li
340.333 302.84 li
341.167 302.007 li
341.917 301.173 li
342.667 300.34 li
343.5 299.507 li
344.25 298.673 li
345.083 297.84 li
345.833 297.007 li
346.667 296.257 li
347.417 295.423 li
348.25 294.59 li
349 293.757 li
349.75 292.923 li
350.583 292.09 li
351.333 291.257 li
352.167 290.423 li
352.917 289.59 li
353.75 288.757 li
354.5 287.923 li
355.333 287.09 li
356.083 286.34 li
356.833 285.507 li
357.667 284.673 li
358.417 283.84 li
359.25 283.007 li
360 282.173 li
360.833 281.34 li
361.583 280.507 li
362.417 279.673 li
363.167 278.84 li
363.917 278.007 li
364.75 277.257 li
365.5 276.423 li
366.333 275.59 li
367.083 274.757 li
367.917 273.923 li
368.667 273.09 li
369.5 272.257 li
370.25 271.423 li
371.083 270.59 li
371.833 269.757 li
372.583 268.923 li
373.417 268.09 li
374.167 267.34 li
375 266.507 li
375.75 265.673 li
376.583 264.84 li
377.333 264.007 li
378.167 263.173 li
378.917 262.34 li
379.667 261.507 li
380.5 260.673 li
381.25 259.84 li
382.083 259.007 li
382.833 258.173 li
383.667 257.423 li
384.417 256.59 li
385.25 255.757 li
386 254.923 li
386.75 254.09 li
387.583 253.257 li
388.333 252.423 li
389.167 251.59 li
389.917 250.757 li
390.75 249.923 li
391.5 249.09 li
392.333 248.34 li
393.083 247.507 li
393.833 246.673 li
394.667 245.84 li
395.417 245.007 li
396.25 244.173 li
397 243.34 li
397.833 242.507 li
398.583 241.673 li
399.417 240.84 li
400.167 240.007 li
401 239.173 li
401.75 238.423 li
402.5 237.59 li
403.333 236.757 li
404.083 235.923 li
404.917 235.09 li
405.667 234.257 li
406.5 233.423 li
407.25 232.59 li
408.083 231.756 li
408.833 230.923 li
409.583 230.09 li
410.417 229.256 li
411.167 228.506 li
412 227.673 li
412.75 226.84 li
413.583 226.006 li
414.333 225.173 li
415.167 224.34 li
415.917 223.506 li
416.667 222.673 li
417.5 221.84 li
418.25 221.006 li
419.083 220.173 li
419.833 219.423 li
420.667 218.59 li
421.417 217.756 li
422.25 216.923 li
423 216.09 li
423.75 215.256 li
424.583 214.423 li
425.333 213.59 li
426.167 212.756 li
426.917 211.923 li
427.75 211.09 li
428.5 210.256 li
429.333 209.506 li
430.083 208.673 li
430.833 207.84 li
431.667 207.006 li
432.417 206.173 li
433.25 205.34 li
434 204.506 li
434.833 203.673 li
435.583 202.84 li
436.417 202.006 li
437.167 201.173 li
438 200.34 li
438.75 199.59 li
439.5 198.756 li
440.333 197.923 li
441.083 197.09 li
441.917 196.256 li
442.667 195.423 li
443.5 194.59 li
444.25 193.756 li
445.083 192.923 li
445.833 192.09 li
446.583 191.256 li
447.417 190.506 li
448.167 189.673 li
449 188.84 li
449.75 188.006 li
450.583 187.173 li
451.333 186.34 li
452.167 185.506 li
452.917 184.673 li
453.667 183.84 li
454.5 183.006 li
455.25 182.173 li
456.083 181.34 li
456.833 180.59 li
457.667 179.756 li
458.417 178.923 li
459.25 178.09 li
460 177.256 li
460.75 176.423 li
461.583 175.59 li
462.333 174.756 li
463.167 173.923 li
463.917 173.09 li
464.75 172.256 li
465.5 171.423 li
466.333 170.673 li
467.083 169.84 li
467.917 169.006 li
468.667 168.173 li
469.417 167.34 li
470.25 166.506 li
471 165.673 li
471.833 164.84 li
472.583 164.006 li
473.417 163.173 li
474.167 162.34 li
475 161.59 li
475.75 160.756 li
476.5 159.923 li
477.333 159.09 li
478.083 158.256 li
478.917 157.423 li
479.667 156.59 li
480.5 155.756 li
481.25 154.923 li
482.083 154.09 li
482.833 153.256 li
483.583 152.423 li
484.417 151.673 li
485.167 150.84 li
486 150.006 li
486.75 149.173 li
487.583 148.34 li
488.333 147.506 li
489.167 146.673 li
489.917 145.84 li
490.667 145.006 li
491.5 144.173 li
492.25 143.34 li
493.083 142.506 li
493.833 141.756 li
494.667 140.923 li
495.417 305.34 li
496.25 304.506 li
497 303.673 li
497.75 302.84 li
498.583 302.006 li
499.333 301.173 li
500.167 300.34 li
500.917 299.506 li
501.75 298.673 li
502.5 297.84 li
503.333 297.006 li
504.083 296.256 li
504.917 295.423 li
505.667 294.59 li
506.417 293.756 li
507.25 292.923 li
508 292.09 li
508.833 291.256 li
509.583 290.423 li
510.417 289.59 li
511.167 288.756 li
512 287.923 li
512.75 287.09 li
513.5 286.34 li
514.333 285.506 li
515.083 284.673 li
515.917 283.84 li
516.667 283.006 li
517.5 282.173 li
518.25 281.34 li
519.083 280.506 li
519.833 279.673 li
520.583 278.84 li
521.417 278.006 li
522.167 277.256 li
523 276.423 li
523.75 275.59 li
524.583 274.756 li
525.333 273.923 li
526.167 273.09 li
526.917 272.256 li
527.667 271.423 li
528.5 270.59 li
529.25 269.756 li
530.083 268.923 li
530.833 268.09 li
531.667 267.34 li
532.417 266.506 li
533.25 265.673 li
534 264.84 li
534.75 264.006 li
535.583 263.173 li
536.333 262.34 li
537.167 261.506 li
537.917 260.673 li
538.75 259.84 li
539.5 259.006 li
540.333 258.173 li
541.083 257.423 li
541.917 256.59 li
542.667 255.756 li
543.417 254.923 li
544.25 254.09 li
545 253.256 li
545.833 252.423 li
546.583 251.59 li
547.417 250.756 li
548.167 249.923 li
549 249.09 li
549.75 248.34 li
550.5 247.506 li
551.333 246.673 li
552.083 245.84 li
552.917 245.006 li
553.667 244.173 li
554.5 243.34 li
555.25 242.506 li
556.084 241.673 li
556.834 240.84 li
557.584 240.006 li
558.417 239.173 li
559.167 238.423 li
560 237.59 li
560.75 236.756 li
561.584 235.923 li
562.334 235.09 li
563.167 234.256 li
563.917 233.423 li
564.667 232.59 li
565.5 231.756 li
566.25 230.923 li
567.084 230.09 li
567.834 229.256 li
568.667 228.506 li
569.417 227.673 li
570.25 226.84 li
571 226.006 li
571.834 225.173 li
572.584 224.34 li
573.334 223.506 li
574.167 222.673 li
574.167 222.673 mo
574.917 221.84 li
575.75 221.007 li
576.5 220.173 li
577.333 219.423 li
578.083 218.59 li
578.917 217.757 li
579.667 216.923 li
580.417 216.09 li
581.25 215.257 li
582 214.423 li
582.833 213.59 li
583.583 212.757 li
584.417 211.923 li
585.167 211.09 li
586 210.257 li
586.75 209.507 li
587.5 208.673 li
588.333 207.84 li
589.083 207.007 li
589.917 206.173 li
590.667 205.34 li
591.5 204.507 li
592.25 203.673 li
593.083 202.84 li
593.833 202.007 li
594.583 201.173 li
595.417 200.34 li
596.167 199.59 li
597 198.757 li
597.75 197.923 li
598.583 197.09 li
599.333 196.257 li
600.167 195.423 li
600.917 194.59 li
601.667 193.757 li
602.5 192.923 li
603.25 192.09 li
604.083 191.257 li
604.833 190.507 li
605.667 189.673 li
606.417 188.84 li
607.25 188.007 li
608 187.173 li
608.833 186.34 li
609.583 185.507 li
610.333 184.673 li
611.167 183.84 li
611.917 183.007 li
612.75 182.173 li
613.5 181.34 li
614.333 180.59 li
615.083 179.757 li
615.917 178.923 li
616.667 178.09 li
617.417 177.257 li
618.25 176.423 li
619 175.59 li
619.833 174.757 li
620.583 173.923 li
621.417 173.09 li
622.167 172.257 li
623 171.423 li
623.75 170.673 li
624.5 169.84 li
625.333 169.007 li
626.083 168.173 li
626.917 167.34 li
627.667 166.506 li
628.5 165.673 li
629.25 164.84 li
630.083 164.006 li
630.833 163.173 li
631.583 162.34 li
632.417 161.59 li
633.167 160.756 li
634 159.923 li
634.75 159.09 li
635.583 158.256 li
636.333 157.423 li
637.167 156.59 li
637.917 155.756 li
638.75 154.923 li
639.5 154.09 li
640.25 153.256 li
641.083 152.423 li
641.833 151.673 li
642.667 150.84 li
643.417 150.006 li
644.25 149.173 li
645 148.34 li
645.833 147.506 li
646.583 146.673 li
647.333 145.84 li
648.167 145.006 li
648.917 144.173 li
649.75 143.34 li
650.5 142.506 li
651.333 141.756 li
652.083 140.923 li
652.917 140.09 li
653.667 139.256 li
654.417 138.423 li
655.25 137.59 li
656 136.756 li
656.833 135.923 li
657.583 135.09 li
658.417 134.256 li
659.167 133.423 li
660 132.673 li
660.75 131.84 li
661.5 131.006 li
662.333 130.173 li
663.083 129.34 li
663.917 128.506 li
664.667 127.673 li
665.5 126.84 li
666.25 126.006 li
667.083 125.173 li
667.833 124.34 li
668.583 123.506 li
669.417 122.756 li
670.167 121.923 li
671 121.09 li
671.75 120.256 li
672.583 119.423 li
673.333 118.59 li
674.167 117.756 li
674.917 116.923 li
675.75 116.09 li
676.5 115.256 li
677.25 114.423 li
678.083 113.59 li
678.833 112.84 li
679.667 112.006 li
680.417 111.173 li
681.25 110.34 li
682 109.506 li
682.834 108.673 li
683.584 107.84 li
684.334 107.006 li
685.167 106.173 li
685.917 105.34 li
686.75 104.506 li
687.5 103.756 li
688.334 102.923 li
689.084 102.09 li
689.917 101.256 li
690.667 100.423 li
691.417 99.5898 li
692.25 98.7563 li
693 97.9229 li
693.834 97.0898 li
694.584 96.2563 li
695.417 95.4229 li
696.167 94.5898 li
697 93.8398 li
697.75 93.0063 li
698.5 92.1729 li
699.334 91.3398 li
700.084 90.5063 li
700.917 89.6729 li
701.667 88.8398 li
702.5 88.0063 li
703.25 87.1729 li
704.084 86.3398 li
704.834 85.5063 li
705.584 84.6729 li
706.417 83.9229 li
707.167 83.0898 li
708 82.2563 li
708.75 81.4229 li
709.584 80.5898 li
710.334 79.7563 li
711.167 78.9229 li
711.917 78.0898 li
712.75 77.2563 li
713.5 76.4229 li
714.25 75.5898 li
715.084 74.8398 li
715.834 74.0063 li
716.667 73.1729 li
717.417 72.3398 li
718.25 71.5063 li
719 70.6729 li
719.834 69.8398 li
720.584 69.0063 li
721.334 68.1729 li
722.167 67.3398 li
722.917 66.5063 li
723.75 65.6729 li
724.5 64.9229 li
725.334 64.0898 li
726.084 63.2563 li
726.917 62.4229 li
727.667 61.5898 li
728.417 60.7563 li
729.25 59.9229 li
730 59.0898 li
730.834 58.2563 li
731.584 305.34 li
732.417 304.506 li
733.167 303.673 li
734 302.84 li
734.75 302.006 li
735.5 301.173 li
736.334 300.34 li
737.084 299.506 li
737.917 298.673 li
738.667 297.84 li
739.5 297.006 li
740.25 296.256 li
741.084 295.423 li
741.834 294.59 li
742.667 293.756 li
743.417 292.923 li
744.167 292.09 li
745 291.256 li
745.75 290.423 li
746.584 289.59 li
747.334 288.756 li
748.167 287.923 li
748.917 287.09 li
749.75 286.34 li
750.5 285.506 li
751.25 284.673 li
752.084 283.84 li
752.834 283.006 li
753.667 282.173 li
754.417 281.34 li
755.25 280.506 li
756 279.673 li
756.834 278.84 li
757.584 278.006 li
758.334 277.256 li
759.167 276.423 li
759.917 275.59 li
760.75 274.756 li
761.5 273.923 li
762.334 273.09 li
763.084 272.256 li
763.917 271.423 li
764.667 270.59 li
765.417 269.756 li
766.25 268.923 li
767 268.09 li
767.833 267.34 li
768.583 266.506 li
769.417 265.673 li
770.167 264.84 li
771 264.006 li
771.75 263.173 li
772.5 262.34 li
773.333 261.506 li
774.083 260.673 li
774.917 259.84 li
775.667 259.006 li
776.5 258.173 li
777.25 257.423 li
778.083 256.59 li
778.833 255.756 li
779.667 254.923 li
780.417 254.09 li
781.167 253.256 li
782 252.423 li
782.75 251.59 li
783.583 250.756 li
784.333 249.923 li
785.167 249.09 li
785.917 248.34 li
786.75 247.506 li
787.5 246.673 li
788.25 245.84 li
789.083 245.006 li
789.833 244.173 li
790.667 243.34 li
791.417 242.506 li
792.25 241.673 li
793 240.84 li
793.833 240.006 li
794.583 239.173 li
795.333 238.423 li
796.167 237.59 li
796.917 236.756 li
797.75 235.923 li
798.5 235.09 li
799.333 234.256 li
800.083 233.423 li
800.916 232.59 li
801.666 231.756 li
802.416 230.923 li
803.25 230.09 li
804 229.256 li
804.833 228.506 li
805.583 227.673 li
806.416 226.84 li
807.166 226.006 li
808 225.173 li
808.75 224.34 li
809.583 223.506 li
@
[.5 4 6 4 ] 0 dsh
22.3335 306.173 mo
23.0835 305.84 li
23.8335 305.59 li
24.6665 305.34 li
25.4165 305.007 li
26.25 304.757 li
27 304.507 li
27.8335 304.173 li
28.5835 303.923 li
29.4165 303.673 li
30.1665 303.34 li
30.9165 303.09 li
31.75 302.84 li
32.5 302.59 li
33.3335 302.257 li
34.0835 302.007 li
34.9165 301.757 li
35.6665 301.423 li
36.5 301.173 li
37.25 300.923 li
38 300.59 li
38.833 300.34 li
39.583 300.09 li
40.4165 299.757 li
41.1665 299.507 li
42 299.256 li
42.75 299.006 li
43.583 298.673 li
44.333 298.423 li
45.083 298.173 li
45.9165 297.84 li
46.6665 297.59 li
47.5 297.34 li
48.25 297.006 li
49.083 296.756 li
49.833 296.506 li
50.6665 296.256 li
51.4165 295.923 li
52.1665 295.673 li
53 295.423 li
53.75 295.09 li
54.583 294.84 li
55.333 294.59 li
56.1665 294.256 li
56.9165 294.006 li
57.75 293.756 li
58.5 293.423 li
59.333 293.173 li
60.083 292.923 li
60.833 292.673 li
61.6665 292.34 li
62.4165 292.09 li
63.2495 291.84 li
63.9995 291.506 li
64.833 291.256 li
65.583 291.006 li
66.4165 290.673 li
67.1665 290.423 li
67.9165 290.173 li
68.7495 289.923 li
69.4995 289.59 li
70.333 289.34 li
71.083 289.09 li
71.9165 288.756 li
72.6665 288.506 li
73.4995 288.256 li
74.2495 287.923 li
74.9995 287.673 li
75.833 287.423 li
76.583 287.09 li
77.4165 286.84 li
78.1665 286.59 li
78.9995 286.34 li
79.7495 286.006 li
80.583 285.756 li
81.333 285.506 li
82.083 285.173 li
82.916 284.923 li
83.666 284.673 li
84.4995 284.34 li
85.2495 284.09 li
86.083 283.84 li
86.833 283.59 li
87.666 283.256 li
88.416 283.006 li
89.166 282.756 li
89.9995 282.423 li
90.7495 282.173 li
91.583 281.923 li
92.333 281.59 li
93.166 281.34 li
93.916 281.09 li
94.7495 280.756 li
95.4995 280.506 li
96.333 280.256 li
97.083 280.006 li
97.833 279.673 li
98.666 279.423 li
99.416 279.173 li
100.25 278.84 li
101 278.59 li
101.833 278.34 li
102.583 278.006 li
103.416 277.756 li
103.417 277.757 mo
104.167 277.507 li
104.917 277.257 li
105.75 276.923 li
106.5 276.673 li
107.333 276.423 li
108.083 276.09 li
108.917 275.84 li
109.667 275.59 li
110.5 275.257 li
111.25 275.007 li
112 274.757 li
112.833 274.423 li
113.583 274.173 li
114.417 273.923 li
115.167 273.673 li
116 273.34 li
116.75 273.09 li
117.583 272.84 li
118.333 272.507 li
119.083 272.257 li
119.917 272.007 li
120.667 271.673 li
121.5 271.423 li
122.25 271.173 li
123.083 270.84 li
123.833 270.59 li
124.667 270.34 li
125.417 270.09 li
126.25 269.757 li
127 269.507 li
127.75 269.257 li
128.583 268.923 li
129.333 268.673 li
130.167 268.423 li
130.917 268.09 li
131.75 267.84 li
132.5 267.59 li
133.333 267.34 li
134.083 267.007 li
134.833 266.757 li
135.667 266.507 li
136.417 266.173 li
137.25 265.923 li
138 265.673 li
138.833 265.34 li
139.583 265.09 li
140.417 264.84 li
141.167 264.507 li
141.917 264.257 li
142.75 264.007 li
143.5 263.757 li
144.333 263.423 li
145.083 263.173 li
145.917 262.923 li
146.667 262.59 li
147.5 262.34 li
148.25 262.09 li
149 261.757 li
149.833 261.507 li
150.583 261.257 li
151.417 261.007 li
152.167 260.673 li
153 260.423 li
153.75 260.173 li
154.583 259.84 li
155.333 259.59 li
156.083 259.34 li
156.917 259.007 li
157.667 258.757 li
158.5 258.507 li
159.25 258.173 li
160.083 257.924 li
160.833 257.674 li
161.666 257.424 li
162.416 257.09 li
163.25 256.84 li
164 256.59 li
164.75 256.257 li
165.583 256.007 li
166.333 255.757 li
167.166 255.424 li
167.916 255.174 li
168.75 254.924 li
169.5 254.674 li
170.333 254.34 li
171.083 254.09 li
171.833 253.84 li
172.666 253.507 li
173.416 253.257 li
174.25 253.007 li
175 252.674 li
175.833 252.424 li
176.583 252.174 li
177.416 251.84 li
178.166 251.59 li
178.916 251.34 li
179.75 251.09 li
180.5 250.757 li
181.333 250.507 li
182.083 250.257 li
182.916 249.924 li
183.666 249.674 li
184.5 249.424 li
185.25 249.09 li
186 248.84 li
186.833 248.59 li
187.583 248.34 li
188.416 248.007 li
189.166 247.757 li
190 247.507 li
190.75 247.174 li
191.583 246.924 li
192.333 246.674 li
193.083 246.34 li
193.916 246.09 li
194.666 245.84 li
195.5 245.507 li
196.25 245.257 li
197.083 245.007 li
197.833 244.757 li
198.666 244.424 li
199.416 244.174 li
200.25 243.924 li
201 243.59 li
201.75 243.34 li
202.583 243.09 li
203.333 242.757 li
204.166 242.507 li
204.916 242.257 li
205.749 241.924 li
206.499 241.674 li
207.333 241.424 li
208.083 241.174 li
208.833 240.84 li
209.666 240.59 li
210.416 240.34 li
211.249 240.007 li
211.999 239.757 li
212.833 239.507 li
213.583 239.174 li
214.416 238.924 li
215.166 238.674 li
215.916 238.424 li
216.749 238.09 li
217.499 237.84 li
218.333 237.59 li
219.083 237.257 li
219.916 237.007 li
220.666 236.757 li
221.499 236.424 li
222.249 236.174 li
222.999 235.924 li
223.833 235.59 li
224.583 235.34 li
225.416 235.09 li
226.166 234.84 li
226.999 234.507 li
227.749 234.257 li
228.583 234.007 li
229.333 233.674 li
230.166 233.424 li
230.916 233.174 li
231.666 232.84 li
232.499 232.59 li
233.249 232.34 li
234.083 232.09 li
234.833 231.757 li
235.666 231.507 li
236.416 231.257 li
237.249 230.924 li
237.999 230.674 li
238.749 230.424 li
239.583 230.09 li
240.333 229.84 li
241.166 229.59 li
241.916 229.257 li
242.749 229.007 li
243.499 228.757 li
244.333 228.507 li
245.083 228.174 li
245.833 227.924 li
246.666 227.674 li
247.416 227.34 li
248.249 227.09 li
248.999 226.84 li
249.832 226.507 li
250.582 226.257 li
251.416 226.007 li
252.166 225.757 li
252.916 225.424 li
253.749 225.174 li
254.499 224.924 li
255.332 224.59 li
256.082 224.34 li
256.916 224.09 li
257.666 223.757 li
258.499 223.507 li
259.249 223.257 li
259.999 222.924 li
260.832 222.674 li
261.582 222.424 li
262.416 222.174 li
263.166 221.84 li
263.999 221.59 li
264.749 221.34 li
265.582 221.007 li
266.332 220.757 li
267.166 220.507 li
267.916 220.174 li
268.666 219.924 li
269.499 219.674 li
270.249 219.424 li
271.082 219.09 li
271.832 218.84 li
272.666 218.59 li
273.416 218.257 li
274.249 218.007 li
274.999 217.757 li
275.749 217.424 li
276.582 217.174 li
277.332 216.924 li
278.166 216.59 li
278.916 216.34 li
279.749 216.09 li
280.499 215.84 li
281.332 215.507 li
282.082 215.257 li
282.832 215.007 li
283.666 214.674 li
284.416 214.424 li
285.249 214.174 li
285.999 213.84 li
286.832 213.59 li
287.582 213.34 li
288.416 213.007 li
289.166 212.757 li
289.916 212.507 li
290.749 212.257 li
291.499 211.924 li
292.332 211.674 li
293.082 211.424 li
293.916 211.09 li
294.666 210.84 li
295.499 210.59 li
296.249 210.257 li
297.082 210.007 li
297.832 209.757 li
298.582 209.507 li
299.416 209.174 li
300.166 208.924 li
300.999 208.674 li
301.749 208.34 li
302.582 208.09 li
303.332 207.84 li
304.166 207.507 li
304.916 207.257 li
305.666 207.007 li
306.499 206.674 li
307.249 206.424 li
308.082 206.174 li
308.832 205.924 li
309.666 205.59 li
310.416 205.34 li
311.249 205.09 li
311.999 204.757 li
312.749 204.507 li
313.582 204.257 li
314.332 203.924 li
315.166 203.674 li
315.916 203.424 li
316.749 203.174 li
317.499 202.84 li
318.332 202.59 li
319.082 202.34 li
319.832 202.007 li
320.666 201.757 li
321.416 201.507 li
322.249 201.174 li
322.999 200.924 li
323.832 200.674 li
324.582 200.34 li
325.416 200.09 li
326.166 199.84 li
326.916 199.59 li
327.749 199.257 li
328.499 199.007 li
329.332 198.757 li
330.082 198.424 li
330.916 198.174 li
331.666 197.924 li
332.499 197.59 li
333.249 197.34 li
334.082 197.09 li
334.832 196.84 li
335.582 196.507 li
336.416 196.257 li
337.166 196.007 li
337.999 195.674 li
338.749 195.424 li
338.75 195.423 mo
339.583 195.173 li
340.333 194.84 li
341.167 194.59 li
341.917 194.34 li
342.667 194.007 li
343.5 193.757 li
344.25 193.507 li
345.083 193.257 li
345.833 192.923 li
346.667 192.673 li
347.417 192.423 li
348.25 192.09 li
349 191.84 li
349.75 191.59 li
350.583 191.257 li
351.333 191.007 li
352.167 190.757 li
352.917 190.507 li
353.75 190.173 li
354.5 189.923 li
355.333 189.673 li
356.083 189.34 li
356.833 189.09 li
357.667 188.84 li
358.417 188.507 li
359.25 188.257 li
360 188.007 li
360.833 187.673 li
361.583 187.423 li
362.417 187.173 li
363.167 186.923 li
363.917 186.59 li
364.75 186.34 li
365.5 186.09 li
366.333 185.757 li
367.083 185.507 li
367.917 185.257 li
368.667 184.923 li
369.5 184.673 li
370.25 184.423 li
371.083 184.09 li
371.833 183.84 li
372.583 183.59 li
373.417 183.34 li
374.167 183.007 li
375 182.757 li
375.75 182.507 li
376.583 182.173 li
377.333 181.923 li
378.167 181.673 li
378.917 181.34 li
379.667 181.09 li
380.5 180.84 li
381.25 180.59 li
382.083 180.257 li
382.833 180.007 li
383.667 179.757 li
384.417 179.423 li
385.25 179.173 li
386 178.923 li
386.75 178.59 li
387.583 178.34 li
388.333 178.09 li
389.167 177.757 li
389.917 177.507 li
390.75 177.257 li
391.5 177.007 li
392.333 176.673 li
393.083 176.423 li
393.833 176.173 li
394.667 175.84 li
395.417 175.59 li
396.25 175.34 li
397 175.007 li
397.833 174.757 li
398.583 174.507 li
399.417 174.257 li
400.167 173.923 li
401 173.673 li
401.75 173.423 li
402.5 173.09 li
403.333 172.84 li
404.083 172.59 li
404.917 172.257 li
405.667 172.007 li
406.5 171.757 li
407.25 171.423 li
408.083 171.173 li
408.833 170.923 li
409.583 170.673 li
410.417 170.34 li
411.167 170.09 li
412 169.84 li
412.75 169.507 li
413.583 169.257 li
414.333 169.007 li
415.167 168.673 li
415.917 168.423 li
416.667 168.173 li
417.5 167.923 li
418.25 167.59 li
419.083 167.34 li
419.833 167.09 li
420.667 166.756 li
421.417 166.506 li
422.25 166.256 li
423 165.923 li
423.75 165.673 li
424.583 165.423 li
425.333 165.09 li
426.167 164.84 li
426.917 164.59 li
427.75 164.34 li
428.5 164.006 li
429.333 163.756 li
430.083 163.506 li
430.833 163.173 li
431.667 162.923 li
432.417 162.673 li
433.25 162.34 li
434 162.09 li
434.833 161.84 li
435.583 161.59 li
436.417 161.256 li
437.167 161.006 li
438 160.756 li
438.75 160.423 li
439.5 160.173 li
440.333 159.923 li
441.083 159.59 li
441.917 159.34 li
442.667 159.09 li
443.5 158.756 li
444.25 158.506 li
445.083 158.256 li
445.833 158.006 li
446.583 157.673 li
447.417 157.423 li
448.167 157.173 li
449 156.84 li
449.75 156.59 li
450.583 156.34 li
451.333 156.006 li
452.167 155.756 li
452.917 155.506 li
453.667 155.173 li
454.5 154.923 li
455.25 154.673 li
456.083 154.423 li
456.833 154.09 li
457.667 153.84 li
458.417 153.59 li
459.25 153.256 li
460 153.006 li
460.75 152.756 li
461.583 152.423 li
462.333 152.173 li
463.167 151.923 li
463.917 151.673 li
464.75 151.34 li
465.5 151.09 li
466.333 150.84 li
467.083 150.506 li
467.917 150.256 li
468.667 150.006 li
469.417 149.673 li
470.25 149.423 li
471 149.173 li
471.833 148.84 li
472.583 148.59 li
473.417 148.34 li
474.167 148.09 li
475 147.756 li
475.75 147.506 li
476.5 147.256 li
477.333 146.923 li
478.083 146.673 li
478.917 146.423 li
479.667 146.09 li
480.5 145.84 li
481.25 145.59 li
482.083 145.34 li
482.833 145.006 li
483.583 144.756 li
484.417 144.506 li
485.167 144.173 li
486 143.923 li
486.75 143.673 li
487.583 143.34 li
488.333 143.09 li
489.167 142.84 li
489.917 142.506 li
490.667 142.256 li
491.5 142.006 li
492.25 141.756 li
493.083 141.423 li
493.833 141.173 li
494.667 140.923 li
495.417 140.59 li
496.25 140.34 li
497 140.09 li
497.75 139.756 li
498.583 139.506 li
499.333 139.256 li
500.167 139.006 li
500.917 138.673 li
501.75 138.423 li
502.5 138.173 li
503.333 137.84 li
504.083 137.59 li
504.917 137.34 li
505.667 137.006 li
506.417 136.756 li
507.25 136.506 li
508 136.173 li
508.833 135.923 li
509.583 135.673 li
510.417 135.423 li
511.167 135.09 li
512 134.84 li
512.75 134.59 li
513.5 134.256 li
514.333 134.006 li
515.083 133.756 li
515.917 133.423 li
516.667 133.173 li
517.5 132.923 li
518.25 132.673 li
519.083 132.34 li
519.833 132.09 li
520.583 131.84 li
521.417 131.506 li
522.167 131.256 li
523 131.006 li
523.75 130.673 li
524.583 130.423 li
525.333 130.173 li
526.167 129.84 li
526.917 129.59 li
527.667 129.34 li
528.5 129.09 li
529.25 128.756 li
530.083 128.506 li
530.833 128.256 li
531.667 127.923 li
532.417 127.673 li
533.25 127.423 li
534 127.09 li
534.75 126.84 li
535.583 126.59 li
536.333 126.256 li
537.167 126.006 li
537.917 125.756 li
538.75 125.506 li
539.5 125.173 li
540.333 124.923 li
541.083 124.673 li
541.917 124.34 li
542.667 124.09 li
543.417 123.84 li
544.25 123.506 li
545 123.256 li
545.833 123.006 li
546.583 122.756 li
547.417 122.423 li
548.167 122.173 li
549 121.923 li
549.75 121.59 li
550.5 121.34 li
551.333 121.09 li
552.083 120.756 li
552.917 120.506 li
553.667 120.256 li
554.5 119.923 li
555.25 119.673 li
556.084 119.423 li
556.834 119.173 li
557.584 118.84 li
558.417 118.59 li
559.167 118.34 li
560 118.006 li
560.75 117.756 li
561.584 117.506 li
562.334 117.173 li
563.167 116.923 li
563.917 116.673 li
564.667 116.423 li
565.5 116.09 li
566.25 115.84 li
567.084 115.59 li
567.834 115.256 li
568.667 115.006 li
569.417 114.756 li
570.25 114.423 li
571 114.173 li
571.834 113.923 li
572.584 113.59 li
573.334 113.34 li
574.167 305.84 li
574.167 305.84 mo
574.917 305.59 li
575.75 305.34 li
576.5 305.007 li
577.333 304.757 li
578.083 304.507 li
578.917 304.173 li
579.667 303.923 li
580.417 303.673 li
581.25 303.34 li
582 303.09 li
582.833 302.84 li
583.583 302.59 li
584.417 302.257 li
585.167 302.007 li
586 301.757 li
586.75 301.423 li
587.5 301.173 li
588.333 300.923 li
589.083 300.59 li
589.917 300.34 li
590.667 300.09 li
591.5 299.757 li
592.25 299.507 li
593.083 299.257 li
593.833 299.007 li
594.583 298.673 li
595.417 298.423 li
596.167 298.173 li
597 297.84 li
597.75 297.59 li
598.583 297.34 li
599.333 297.006 li
600.167 296.756 li
600.917 296.506 li
601.667 296.256 li
602.5 295.923 li
603.25 295.673 li
604.083 295.423 li
604.833 295.09 li
605.667 294.84 li
606.417 294.59 li
607.25 294.256 li
608 294.006 li
608.833 293.756 li
609.583 293.423 li
610.333 293.173 li
611.167 292.923 li
611.917 292.673 li
612.75 292.34 li
613.5 292.09 li
614.333 291.84 li
615.083 291.506 li
615.917 291.256 li
616.667 291.006 li
617.417 290.673 li
618.25 290.423 li
619 290.173 li
619.833 289.923 li
620.583 289.59 li
621.417 289.34 li
622.167 289.09 li
623 288.756 li
623.75 288.506 li
624.5 288.256 li
625.333 287.923 li
626.083 287.673 li
626.917 287.423 li
627.667 287.09 li
628.5 286.84 li
629.25 286.59 li
630.083 286.34 li
630.833 286.006 li
631.583 285.756 li
632.417 285.506 li
633.167 285.173 li
634 284.923 li
634.75 284.673 li
635.583 284.34 li
636.333 284.09 li
637.167 283.84 li
637.917 283.59 li
638.75 283.256 li
639.5 283.006 li
640.25 282.756 li
641.083 282.423 li
641.833 282.173 li
642.667 281.923 li
643.417 281.59 li
644.25 281.34 li
645 281.09 li
645.833 280.756 li
646.583 280.506 li
647.333 280.256 li
648.167 280.006 li
648.917 279.673 li
649.75 279.423 li
650.5 279.173 li
651.333 278.84 li
652.083 278.59 li
652.917 278.34 li
653.667 278.006 li
654.417 277.756 li
655.25 277.506 li
656 277.256 li
656.833 276.923 li
657.583 276.673 li
658.417 276.423 li
659.167 276.09 li
660 275.84 li
660.75 275.59 li
661.5 275.256 li
662.333 275.006 li
663.083 274.756 li
663.917 274.423 li
664.667 274.173 li
665.5 273.923 li
666.25 273.673 li
667.083 273.34 li
667.833 273.09 li
668.583 272.84 li
669.417 272.506 li
670.167 272.256 li
671 272.006 li
671.75 271.673 li
672.583 271.423 li
673.333 271.173 li
674.167 270.84 li
674.917 270.59 li
675.75 270.34 li
676.5 270.09 li
677.25 269.756 li
678.083 269.506 li
678.833 269.256 li
679.667 268.923 li
680.417 268.673 li
681.25 268.423 li
682 268.09 li
682.834 267.84 li
683.584 267.59 li
684.334 267.34 li
685.167 267.006 li
685.917 266.756 li
686.75 266.506 li
687.5 266.173 li
688.334 265.923 li
689.084 265.673 li
689.917 265.34 li
690.667 265.09 li
691.417 264.84 li
692.25 264.506 li
693 264.256 li
693.834 264.006 li
694.584 263.757 li
695.417 263.423 li
696.167 263.173 li
697 262.923 li
697.75 262.59 li
698.5 262.34 li
699.334 262.09 li
700.084 261.757 li
700.917 261.507 li
701.667 261.257 li
702.5 261.007 li
703.25 260.673 li
704.084 260.423 li
704.834 260.173 li
705.584 259.84 li
706.417 259.59 li
707.167 259.34 li
708 259.007 li
708.75 258.757 li
709.584 258.507 li
710.334 258.173 li
711.167 257.923 li
711.917 257.673 li
712.75 257.423 li
713.5 257.09 li
714.25 256.84 li
715.084 256.59 li
715.834 256.257 li
716.667 256.007 li
717.417 255.757 li
718.25 255.423 li
719 255.173 li
719.834 254.923 li
720.584 254.673 li
721.334 254.34 li
722.167 254.09 li
722.917 253.84 li
723.75 253.507 li
724.5 253.257 li
725.334 253.007 li
726.084 252.673 li
726.917 252.423 li
727.667 252.173 li
728.417 251.84 li
729.25 251.59 li
730 251.34 li
730.834 251.09 li
731.584 250.757 li
732.417 250.507 li
733.167 250.257 li
734 249.923 li
734.75 249.673 li
735.5 249.423 li
736.334 249.09 li
737.084 248.84 li
737.917 248.59 li
738.667 248.34 li
739.5 248.007 li
740.25 247.757 li
741.084 247.507 li
741.834 247.173 li
742.667 246.923 li
743.417 246.673 li
744.167 246.34 li
745 246.09 li
745.75 245.84 li
746.584 245.507 li
747.334 245.257 li
748.167 245.007 li
748.917 244.757 li
749.75 244.423 li
750.5 244.173 li
751.25 243.923 li
752.084 243.59 li
752.834 243.34 li
753.667 243.09 li
754.417 242.757 li
755.25 242.507 li
756 242.257 li
756.834 241.923 li
757.584 241.673 li
758.334 241.423 li
759.167 241.173 li
759.917 240.84 li
760.75 240.59 li
761.5 240.34 li
762.334 240.007 li
763.084 239.757 li
763.917 239.507 li
764.667 239.173 li
765.417 238.923 li
766.25 238.673 li
767 238.423 li
767.833 238.09 li
768.583 237.84 li
769.417 237.59 li
770.167 237.257 li
771 237.007 li
771.75 236.757 li
772.5 236.423 li
773.333 236.173 li
774.083 235.923 li
774.917 235.59 li
775.667 235.34 li
776.5 235.09 li
777.25 234.84 li
778.083 234.507 li
778.833 234.257 li
779.667 234.007 li
780.417 233.673 li
781.167 233.423 li
782 233.173 li
782.75 232.84 li
783.583 232.59 li
784.333 232.34 li
785.167 232.09 li
785.917 231.757 li
786.75 231.507 li
787.5 231.257 li
788.25 230.923 li
789.083 230.673 li
789.833 230.423 li
790.667 230.09 li
791.417 229.84 li
792.25 229.59 li
793 229.257 li
793.833 229.007 li
794.583 228.757 li
795.333 228.507 li
796.167 228.173 li
796.917 227.923 li
797.75 227.673 li
798.5 227.34 li
799.333 227.09 li
800.083 226.84 li
800.916 226.507 li
801.666 226.257 li
802.416 226.007 li
803.25 225.757 li
804 225.423 li
804.833 225.173 li
805.583 224.923 li
806.416 224.59 li
807.166 224.34 li
808 224.09 li
808.75 223.757 li
809.583 223.507 li
@
grestore
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B896187A> |-
/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5
A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A550BE990A2
B15CF4B9FA0C60C03D9F761CF6CBFF51A513DE> |-
/o <1C60D8A8C9B7967683396363C51B2F1979461F3A00FDA36B3FB5488A82D6
4C89239EA1345F90503AC4C4937CA1D31AE0456BBFC2CD7E6DF92400B629A703
DCCA1CE977B1CE09DA127A889A27E67B6982945251> |-
/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FC9D79EBC145C31F687483AFB942
5A746B3BD7EE9055225E02124098D25B9CF96FA1051D1E04801504B9A2644D4E
DA37278A874E72EE68CB4BF43DAEF5F603031626DA7EA34D8AEBCA2BE067F349
B81CB3CF23097AE4AA47ED040466C2627C304F1CEA4C41EB090E70EFAF813E72
9DF2CD046B5547886AEE74294DF2AF6781AD20571E13346A26CAD62FB20DB9FC
6337027CFBBA> |-
/r <1C60D8A8C9B825FA276057E42F8B6B56BE61CF56C49E848F1F8C0DBB4CC3
55A060580D0A93A5AC675863E967C6888348BB6A0307CAE2C7E5A0C04CCE8153
CABABF82A896EFF75F39B554C74CA1E2126AA0E73BE8B772EBBEE30A71972C63
0D7D24526AEEFC04035142C31FA6B3B108962236> |-
/t <1C60D8A8C9B821B35E7D138AF8799F79BEF170B4854FD4064F6438DB12B9
6A336B1B646B9C985443CCD47885AEB163F96326A737220357369BBCF971367A
B24D31D50A9A11CBCBD128D32F4EE4E3175171904BA0C5> |-
/y <1C60D8A8C9B74451438745C9BFBA6ADBF77C623A74806E5154FF6A822836
23EEB25A9349C2751A0E315AAE13B4796C423913828FA716B5ABEF10D096130A
D2A2329DF2C9C65ECC79B77A9BB791B3C887ED4EDF5DA91A1776E19A8D0D9ECE
CC26B8983788DC541C6EA7A67E7E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 32 /space put
dup 105 /i put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 116 /t put
dup 121 /y put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five /six /seven /eight /nine 47{/.notdef}rp 
/i 5{/.notdef}rp /o /p /.notdef /r /.notdef /t 
4{/.notdef}rp /y 134{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
414.414 330.177 mo
(t)sh
400.748 9.08789 mo
(priority)
[5.68994 3.27002 2.33984 5.49023 3.26953 2.33984 3.31055 0 ]xsh
20.248 310.177 mo
( )sh
807.584 20.9082 mo
( )sh
96.25 232.09 mo
105.75 232.09 li
105.75 216.59 li
96.25 216.59 li
96.25 232.09 li
cp
.298039 0 .380392 0 cmyk
ef
0 0 0 1 cmyk
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
98.248 227.838 mo
(1)sh
253.75 149.506 mo
263.25 149.506 li
263.25 134.006 li
253.75 134.006 li
253.75 149.506 li
cp
.298039 0 .380392 0 cmyk
ef
0 0 0 1 cmyk
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
255.748 145.244 mo
(1)sh
411.167 149.506 mo
420.667 149.506 li
420.667 134.006 li
411.167 134.006 li
411.167 149.506 li
cp
.298039 0 .380392 0 cmyk
ef
0 0 0 1 cmyk
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
413.164 145.244 mo
(1)sh
647.333 66.8398 mo
656.833 66.8398 li
656.833 51.3398 li
647.333 51.3398 li
647.333 66.8398 li
cp
.298039 0 .380392 0 cmyk
ef
0 0 0 1 cmyk
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
649.328 62.5879 mo
(1)sh
804.833 149.506 mo
814.333 149.506 li
814.333 134.006 li
804.833 134.006 li
804.833 149.506 li
cp
.298039 0 .380392 0 cmyk
ef
0 0 0 1 cmyk
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
806.828 145.244 mo
(1)sh
175 149.506 mo
184.5 149.506 li
184.5 134.006 li
175 134.006 li
175 149.506 li
cp
.298039 0 .380392 0 cmyk
ef
0 0 0 1 cmyk
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
176.998 145.244 mo
(2)sh
332.417 149.506 mo
341.917 149.506 li
341.917 134.006 li
332.417 134.006 li
332.417 149.506 li
cp
.298039 0 .380392 0 cmyk
ef
0 0 0 1 cmyk
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
334.414 145.244 mo
(2)sh
489.917 149.506 mo
499.417 149.506 li
499.417 134.006 li
489.917 134.006 li
489.917 149.506 li
cp
.298039 0 .380392 0 cmyk
ef
0 0 0 1 cmyk
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
491.914 145.244 mo
(2)sh
726.083 66.8398 mo
735.583 66.8398 li
735.583 51.3398 li
726.083 51.3398 li
726.083 66.8398 li
cp
.298039 0 .380392 0 cmyk
ef
0 0 0 1 cmyk
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
728.078 62.5879 mo
(2)sh
568.583 121.34 mo
578.083 121.34 li
578.083 105.84 li
568.583 105.84 li
568.583 121.34 li
cp
.298039 0 .380392 0 cmyk
ef
0 0 0 1 cmyk
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
570.578 117.091 mo
(3)sh
114.417 99.0063 mo
114.417 34.0063 li
245.25 34.0063 li
245.25 99.0063 li
114.417 99.0063 li
cp
0 0 0 0 cmyk
ef
114.417 99.0063 mo
114.417 34.0063 li
245.25 34.0063 li
245.25 99.0063 li
114.417 99.0063 li
@
245.25 99.0063 mo
245.25 34.0063 li
114.417 99.0063 mo
114.417 34.0063 li
114.417 34.0063 mo
245.25 34.0063 li
114.417 99.0063 mo
245.25 99.0063 li
114.417 99.0063 mo
114.417 34.0063 li
114.417 99.0063 mo
245.25 99.0063 li
245.25 99.0063 mo
245.25 34.0063 li
114.417 99.0063 mo
114.417 34.0063 li
114.417 34.0063 mo
245.25 34.0063 li
114.417 99.0063 mo
245.25 99.0063 li
0 0 0 1 cmyk
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/semicolon <1C60D8A8C9B89DB7C9B4750A7DD1C51F7F7E6183D2A063A8D8B4
E80EF417261EF22603D4B0F336B2E631735B2CCB0F43DAA1071DCB596343D17F
1DC1792DCE505EEBDC8069> |-
/V <1C60D8A8C9B7EDAFD30F79AA728C73B728E9DBD0163CBE35C2A8F28D917E
357D70106ADBD835AAB54D8E35C0ED3A4373779A96DD03DF96FCB8B0D77BEFCD
1DAD17118069CC5F9EBEE099DECF> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 59 /semicolon put
dup 86 /V put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five /six /seven /eight /nine /.notdef 
/semicolon 26{/.notdef}rp /V 18{/.notdef}rp /i 5{/.notdef}rp /o /p 
/.notdef /r /.notdef /t 4{/.notdef}rp /y 134{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
153.412 45.4268 mo
(1; V)
[5.12988 2.06982 2.12012 0 ]xsh
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/a <1C60D8A8C9B75946039FC5B56ED6A5087B2F0B1630F4B839ECBCEEA44E70
3DC4106323B0FE7E2AB642908C4D63FEEE93FCF9AFDA709EC76B2A6B438866EA
54711295464BD953D3EBDCF028F138C8DA98583AEFEA07E0E3D9318DCAA5235C
81F8CAE77869F7E7DB4FE2A895A8751E9713E402E5F56B8D9F8A85A4E816A3F5
736139BBC6E35318419585355BABA3365F9437068F54844360043E93A0587094
DC5B241D2351AD29DD00EC> |-
/b <1C60D8A8C9B7E2CE503F0CE2BC5702634999087F49AD7EC68AF6E0760DC3
07EA142776CFB148873830CAEB36AE950493D9F2EDD2FDA5A7A4D6C282750C8E
40E669AF5CD1CA9E6E42E82091954CDD12078AEF15744C61E28006D0183E186D
2F0A7A37935A5E3F3F87ED5DA87F58431826C86E3F76DCDA2973426486D4612C
A2B5207C22CF15FC5AC58B8A498D4D400E19494D5A529E7B3708AA62887C27C0
34690D9798225445C694> |-
/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6AE0C2DA4B5701EEA600446C4909F
C3F4672ADE87F21B90EA46B653B923660515A1F0669DD61FD45BFFE5F30C06F2
5F4918DC3BDE9DA8749DE48AB2064D02996B1992D92D740E924FC0328428444D
7F57E818435DFAAB95E4B5> |-
/s <1C60D8A8C9B70FAD6F31E6985339BF1E83F7AE60D35F00D12D254421A910
254A631180139D8657646BEFE6F4E230D67403BE5D54183419D174C6F3CC672F
E0922A5983FC4713FC0C33086E01CB29AB5EA82B559EB0CB9E6675519A48B6C9
9CE7F0B78BC22FE4480BA1B895> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 97 /a put
dup 98 /b put
dup 101 /e put
dup 115 /s put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five /six /seven /eight /nine /.notdef 
/semicolon 26{/.notdef}rp /V 10{/.notdef}rp /a /b 2{/.notdef}rp /e 
3{/.notdef}rp /i 5{/.notdef}rp /o /p /.notdef /r /s 
/t 4{/.notdef}rp /y 134{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [8 0 0 -8 0 0 ]msf
170.164 50.4268 mo
(base)
[4.55176 3.85596 3.16797 0 ]xsh
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
YSXVHS+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/colon <1C60D8A8C9B89DB76243278294073DF1AD1585FFD55030C4E50D6754
0B1ECFC1F1F5478C19578DA797210E93A44936C6BCE591C4215DB3E07300888C
53B2F7CF18D7AB81EA37F03252937464C1> |-
/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-
systemdict /gcheck known {setglobal} if end {end} if
end
YSXVHS+Helvetica /Encoding get
dup 58 /colon put
dup 108 /l put
pop
%ADOEndSubsetFont
/YSXVHS+Helvetica*1 
[32{/.notdef}rp /space 13{/.notdef}rp /period /.notdef /zero /one /two 
/three /four /five /six /seven /eight /nine /colon 
/semicolon 26{/.notdef}rp /V 10{/.notdef}rp /a /b 2{/.notdef}rp /e 
3{/.notdef}rp /i 2{/.notdef}rp /l 2{/.notdef}rp /o /p /.notdef 
/r /s /t 4{/.notdef}rp /y 134{/.notdef}rp]
YSXVHS+Helvetica nf
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
187.5 45.4268 mo
(: 1; ttl: 1000)
[2.06982 2.12012 5.12988 2.06982 2.11963 3.31006 3.31006 2.35986 2.06982 2.11963 5.12988 5.12988 
5.12988 0 ]xsh
120.417 46.0063 mo
150.417 46.0063 li
@
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
153.412 66.002 mo
(2; V)
[5.12988 2.06982 2.12012 0 ]xsh
YSXVHS+Helvetica*1 [8 0 0 -8 0 0 ]msf
170.164 71.002 mo
(base)
[4.55176 3.85596 3.16797 0 ]xsh
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
187.5 66.002 mo
(: 2; ttl: 2000)
[2.06982 2.12012 5.12988 2.06982 2.11963 3.31006 3.31006 2.35986 2.06982 2.11963 5.12988 5.12988 
5.12988 0 ]xsh
[6 6 ] 0 dsh
120.417 66.5063 mo
150.417 66.5063 li
@
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
153.412 86.4941 mo
(3; V)
[5.12988 2.06982 2.12012 0 ]xsh
YSXVHS+Helvetica*1 [8 0 0 -8 0 0 ]msf
170.164 91.4941 mo
(base)
[4.55176 3.85596 3.16797 0 ]xsh
YSXVHS+Helvetica*1 [10 0 0 -10 0 0 ]msf
187.5 86.4941 mo
(: 1; ttl: 3000)
[2.06982 2.12012 5.12988 2.06982 2.11963 3.31006 3.31006 2.35986 2.06982 2.11963 5.12988 5.12988 
5.12988 0 ]xsh
[.5 4 6 4 ] 0 dsh
120.417 87.0063 mo
150.417 87.0063 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/YSXVHS+Helvetica*1 uf
/YSXVHS+Helvetica uf
/Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 13.0
%%AI8_CreatorVersion: 13.0.0
%%For: (toby) ()
%%Title: (priority_graph.eps)
%%CreationDate: 5/6/2011 12:01 PM
%AI9_DataStream
%Gb"-6B3-k3[P3"lY;,e_@O0ER/;Rh5<",^m&-N^o8Q^>CoAT]B>I1=sFm]Grn$Db:T/@BNGK!]bZY#eUHhkd(g`)2:nrnR$[Xp%D
%g#BO&<h,.f7:VkRYJ%X7i2T#n/J[8*SjPqV+nSte?(APZ8,_tP0q5iKkOZQ$318#i>D7Pfj/l@331Tn^.mNC5IFDcNPOS^>WV2*s
%pD8Ik%fPgA3LpWbrLQcP>V4Y^%u1&RA2`^([ZVd<5@h<JIQ88=cBk;DJ!SfG0JWKqDr\YjkFIYt)A%94T%Cu#_e$%/5i_/(C*WA"
%No.e0pr@N,Ys;5X]sBDu_HH2hSm?)h$,n,\L-pH#nO/%CnJ<O@8>%V-L/#\?/^NHWs'm`ibW:ZuAGkd/HG8X)VSg]RO28spYu#P#
%:Ia;Ar[nsT1W@<MoO!PGE)1Mk.iILJ^Ba^e!L,XYr_*;hDRR%rr"#5O>q+LA=q:G9k'-l&--q_W5\H9eIn8]O<%ebD0RF$(a3(#@
%M4;fWUVB'`A27E,lr%$o7XTt,U#,UC5F[Q?-JK?crqL)GM[(0],Oqm\/;DkgGs6e6(Z"([A;]S><9T7ZrJ;bN#,&Q[E#_oTJJRN[
%2Y\,J;rYmXmE07lP?0E_D'd7.*doG&rLXf((C#_n]NFgHii(7r.\+U40hgft>3P#/'CE,GB)j(7&mJ5_5)^kMQ?um'/34()0sgt]
%rI8bIs&n9N`Lq]C&"g*DHmY'H=X])%GoltU4M9d$Gg#^>D7PV+PA7?>'LT"Ci"M!e@SeTk/!n4EP=[0d9L>-mqM2+!P>EfuKOXE[
%5+u)P!6#9KW*1UbRmI.uPfrR)>`QdBol:oWPfoj8))N3d)%l+s]S3BFH_*aXi=?WTH,1jBK6`<[-1>5>n-NZ6;XfP+/qS^TL3^T_
%r.7MV-T"8B7@Js&_'bg9I"B<l0Be\:P`,U"_:7BVb*:*=9O&l+GQMR\9*-U<,ZVtQaTT]Sall:qGjs]jM+,KM-jFaG:M>V:,agZ<
%-S-6bJRU<'EMWtT87e/5I)7P(+P@"h.1@7=_']qL3Pm.H9X7q0E6/BY:N8&G_2CBH>WOW.!dc=bJ1&3gbaqK.&"X2hoM!sSQ]2[k
%s$7NiTX[L#K"*k03I)'TKMO!cp,^E[^kGaB:FH;Y7+K7^/tO<i510\hl/Hk%2iY?9nDMES+e(e\,i[Mjk`bNKfTVm5nF5ATKb<K<
%L(D8Ar^l^W!V2i['*_5B.bWKcm0S;6'4q*&Ch<G7P<,YRG^AIm-3?h(#@s`jB0b=1\@T>B`02jX[KpYo2.0*%3,s'Y,iWd^+cALI
%L.PC2AahqZ/"fL8pr@C8Q2I!HMaYX)q(MQ!W^iiFOo1RDMoWqXq(MQ18<D_cK[b?8pm90d=7T_h0:sW,jhKjuWa76>8+L$XY>c^\
%jhKju,Q/;F4KK]RP4^-9`F%[Zb`Ret,11Fn09s_k7$NTGiP/V!4Xn/[oX@pTMbiA%nMc\c"Y0(>W/U`<nEVj4K`6c,`:*?unoM;B
%Fc4oLJ*#s+"M3-c#Aq(s!\>ZbJ/HUpk6*uZ"9olF;HEoJ"#-.!:d##JUN+_<fGK5a:VOh>2:=C1K8"l1jPnNO1o[L4]>T?"H]E,C
%!POLC7O7\4L)%`d:uC9fMc"Qr'7?s9*objMhk\B8Q13ZZ1k_lmGnM79ON!b<m'mZB9CSafBHin<)M[N4+D@^2$O%!Vm)<>-"5'U$
%gelV7cpU110OggP>?lmc,6/@tJ@mj3`N-;==lfpcFV;-Be3d1pCXPW/(Rrd1WMJ3ij>[5!aC"M/!b+nGV(dY6\8C:sqSQ;A3Qe&a
%#m#-W]2TMRF0Z4Rb/IdF.Fqf"?aK(:Es6Nu6Vb^AOZ/6o='W6T)4!C:-kn.f^\+V5XAE1/eL7R3KoITM3j5'>pm]u[;-%#).(u"r
%@1dhIjV8=L&!%sX;bmp.SA/OR_$Iui$R:I`]1N9p:mfKV:ECI-1Q&2jV^Y])$>i6G+um[cKPq/<IA`,\r[*4l##7pb]6IVcEG/88
%LAD+`9LA.J^IXM3;7]W`0,p7X8#0G2`X%<]kGjoY"L(4!Ylf[EEY3S'H(@;q2]Rt2SW0WRR%U.VF-ro'jm$FMR:[\Dl>[PBM+d#;
%HBb(lP(k(/m2l@,hK<90_Q6jb'T-4^-U>CWnp3BeRZ)?Yd5t)CQ!?I%[2i*Q=ZQMLZ8$AgWfEbW0gmk9(-3\j,HsJU-7+uYbN^[V
%[K093%9X%1ckB;CJ<:AD![YpoU`cALKr2Pan;@W3<%!3teGZ=(WORV=AW9?P<eCScYZsr;S><J>UC1Z1e28gr@r7G%\sE_X;'/[3
%N):VSabl/r;5?Ir$J1Jb6`L(%gr2HLW]hZM-CMNrIu`BmMUP6$7fSRuNC`5<U7CeA`mRhNH_nIhd,e7M1TjgqY6q:R)F:FG+M,.q
%$^%k0JK]P82,L;%q?i#GKP_r@5AEaTr%6(+FaGe-h6&LY<4bo=8N!u8lFT0=ZFoT4'M\%@7DfJl8a'H`!U?U%6UB25RQ/dO4X+`5
%T#h5'6G`LTNS\UH-"VV(,g:%UkN,;J]!2%?qS9*3U*fntR`a'tKiqf?@PpR'HHjl+WQm$]?gU6pg.&i<Lo)BHJ:\)-h.#ZaC&lFI
%L;"!Oc,<RcV_"/8a@E)!#2%`+2neC^7#6)HPNkUcMV>F%&Q!'#7)Y7'2Gj@=3pj$B&1_ppifsd;lE"d0/<c=&%7Yr<lN-a[J@r0:
%Eb+eR;M84?$AGgD>>MgWkWuKGKr(I6`ES_"&jbm%,fM:Lln<`r'-`'$C16h..TfN<42P3@_R5V)r$'_q&TWu*oQRQ1nN3H>`)6r`
%dk-`.M$8S[9%rFc403dhD@^%c;%&[iLlANLf]8Wh(/F-b)QLGXA3pk/?,fM]AGDm<A3`L])YZK],^_1;7\IVf9=gn<CbhN.#]JfH
%pt^(BZ(/E)H?B,)-c80laeD!AN'E'qX^j!\1$ebn#?=a5[%'k!=Iu3YF?B)CpjG,i%E@ICY=kJ[LVprM5![qZH_$4Yr_3*>hM9tm
%Za]&[IG"RDGhScA4t"O!BA<l%^NF.PEVO$((uhuZrV&bUU9qm/U82XNJD.ouB7l8kL"%D$.fLQo\kD[;&ak^,SbZp.5JhmcK41r*
%?HbIDrhqXM7ZGYmSW_-ZI^h=>%/]Yl@#L!k_l_dg5=75uDh[B'c5QgT//!D9c=[%FgHXml/DQdj^AHr.BBK&KN?uGNq=*-LqN'"c
%XS:Qn%E=#TWZL??#l]Icc>YmKKKoL)IeLh@):n#GMS8MXo*3*!?q#tfSdq*.<-(&10E*hs0+lP8P?E/#3U?F9?_+[fU)tF.\(Cg*
%`m8sLB`2pdDuJO#3(,hQ4;l="d""TVq:fqG8!HQ[bF`?YL?cS+cd)$NoH?>eDm;kdSAY4)23fCLk,?hS&btLag#l`EiERg:&;C`K
%iTfA7Y)HO5;:S<;]c&>",@/ft1,Z%)C%3')`uUmd/kC[(;W35-E'_Kc+k7M`LPrujpeUZo5(l)H'IVBUQ((b7VGsTb?J^')An\[G
%B-Xcn]>Jp(6TXXkoBB)Z4/D2&e49gsUXKagM;[T]l@%*,?`o?Vl:^dSUsspZ)Gj]JUb[?$N\Td;6AeRW0hnSR';:4]Y;c6'!"T>h
%QDEf/oX%SVB.;C,LV-r$@/M65G5ZP^+r^.<8c*,6*;*67k@c(H7KjXVPf@VT0`+CX[3a!(g'6Rl/3aZg-&C.Ok.uaU6MO2iBBs0<
%m,.^sm0fqAgdrIXg-D<;i6ua2`U=H,`c-c@<b@QWZo3B*\Gl'[HBW5rX3k'tDWQWZ;p;pZ_DCb(Mc;u<l[uskLS<"$lEt<rqO^W/
%1*"M.;M4TTl+<L`DJ!QTTo!)t^\VjV<*OSiJ%K"s(4A8=28B?'2SL#l):+W?c`N\YA1.mb-m60c-D-bZ8=_uB'</3B#O(9AgN]EE
%/k0s(VOrK"^%QU*9-"o"[F8u<fU;EoQLI]BpDs7eg<ab_eau>4HmNp/Xmp&r!t4cc)#$iAHuNW;:I\8:9&$rVlqH@mPUo`Zm>Sg4
%J"OqSeD@u:9B3ea_o\-H!9jg$7^h_GZ`1(%2=-8`ZRu)AC)^Z[7L*?`'t2!*jCY0;2JLAP$sMZ7,^BV!?]0Dg?tpB>*DcYl`kSr[
%0X1'MFVm=2N;?`Zo_NkfRL]5CHY2RF5!InW($rX%s++N)kh?o"p91U>f%JX71UGVQTm'S6jF%QH74*0@qJ.U?^^=Gu]g&7S*H[i:
%>7Z:Y/ALU7n-$>.[^-XeS9$Ffep%B9W+[>&OBSh^UOsst\B1H97b>JdeQ.8="S_ouTMq<j2Vug\H$MAIVp>!,*Asj!)=<qcOVP>N
%bE/(O%Y^eZ+7V@+9`<J>#@YuRSYNtY[DUu+fJrAAn-7h8bl/1qgn3-C-b[71lbb=#^IO*Qn+D;=-d;j$6mNq=,(L'aB!]e_C,6go
%KduijM.fDtnd))%X`+`#8pUpgMgk_Lin'e#n\"gEB/VtBVt538Up%)jhjr_(.L[um"pN'2BFEpTdEIk?s5QD!Y\;o(P_PC2ms`Ru
%R)G_M5@T6#!Oh]6m7\/[RHsk3*7)XE7-W^#g_B&VKf'*m4\uPJh-o3lafr,"s2R'MF/4oogHJekZ@BlKLO$TckDRIG%mYWZ\j]Qh
%%M2laLSAj'J#E9aS/X;X5A`O_>t92>ri\OoJ,]a]o(d7op>:MB'-%ZXnGH>^Wo"\_bkb\!hW!#8Z3quY#is8%*1C.aBfWlQ5"PBa
%btfne7nca"[Bl=[5IT_JcQ=nolpbYGV177;6@[(@&E:f-->)l6:)8Z,W;#0c`*:L;oX'n_(jZ6.b3R/ip=@8JU43A5JaU'5@N;0B
%U=2Joecl>B>^J.d4[E=^CX5kS8bL-1IW)G1D97g0+NJ8X#B-QDfNt`#Z<NJo#4&7t"CK=NCo];VchiVPMYY^@;*H>$KP@>3o#$E2
%X@AcV\,*&JViuhG>\?#-%mjM`ZG#KF,WptjO5;5$R69M7D(E)#9X_)bT[b(\:LDpmY*Rk3G,Apso>,*#`3MAQ<e2HcfqLRmb^*K3
%i(g<o0$(c8hBe8r%0og2&4lAADh1B',*>eT_apmZlHJ_tK7EXQ(6dEP[kmB0h_Z0@<G)Z3TDdU'Rf)!69gQEMf1o+=A$T?I<V(S=
%\oPEZ(]Ai!<Wd7IEBA#cO!el'W;+pK&WE3E*MBOc=nK27TZY/U1c!0$,OQ0EpfW+G.BOLp'l&qi6is-^Ej8kCd1@iY`M-3nC:LQR
%//jjs]JuqH@b)FCV]B5an1bmSd"[[kP@^L2ZbCPHUKiIF(`2>u&Qk?AeF6.p7Tg4'0$5Z0Yp&PG)mh'&9"i'8diAi%MgseV(UpjX
%C",6)O(ILL^X\]FV-S*I9DCE5p%gfloW],pT.H5ql1&^sk^["Gg[s3=;_*a]aLbS=iBe-_F2Vs])V5b,#\DN1=A;?i>$/N0_dAUF
%#V?6#(!Ulo/iQ3a7GIF/Y8WP7h#)LQm39dFm5=?VejhN`pL/^^>`.,ToI2/O/uZat?s_Q(P2$sOA=U"a(h7)9R1H*m(gK2QNJ#j#
%m$?%8K*#H:Jq/!I'Nd:8<@p&D&`HrGD=^A99-YWY]J9Qk'%?o[$41<"`C6S'*VKdfX.^:m/t,tpE$.6b/g*]!'1cdEl^o4:@\fNB
%OHK*o@7I9M!88p#Bf_f=Lb-p6Ld7XT;4<>TP*Hk@F[;I#N[G9o.@<k+Z2]jHfA#TiZW3M)reAmuVRFt`:_XnEf?'M.0ZKq'A'ooA
%/qkr>EPU_s"'hN>T=2l#/2T]D9a<WCKdO-eOSK<<6DA^mAIOLAh`AZhe='sb^WhLo9211[s-W-l;Wqs[2h`h5Zp6RH7.BDXduVn#
%BFYqaX$VVglM%@e^!.m&PB"?u(ST\^\N7<Uk0'na2dW\oH"`#:N1npLk+V2CNi[MoEW6-gD1A$MIu`s9nH,cWbR+e^\90h?/[A4g
%S:<k9SN_`OFc-9+4RUNQ(m6NFmqG<[]'C(4%`)]JW5N6C2R+_d2hM)_d9AZkoMkK8NqTP56VppGhs;Ko>eDj69:VP:4bJYqU?]3"
%NE&*ccuj$fY2;[W*ho!I>>LjV]8O[mGO'1mHr-c4l"ooS(og/V<?XcNoESm4o*r464'7G&^m-?%/0hf`[P>>p(;T:^/W*0M<#5UQ
%=eM2)$ngCseHf!nGI.lF-aWgb)$kk(R!)E8Aq6N$.#4@m%7Df_1deqnKD!9XZg$/t@0GcPX[B4hSP!Sc(5%="F[KD5(CNK26m2QH
%Uq1U>LC](6!"m@Sj^s`'O<md0%^"KRc-:bih[u(HpCQ!>gFp7-9^NXf.7jlIi^E&\;HJV7_)#K%)S(jUo#PY^VFPO!\74Mg(M.ME
%S\7h=VT0S3?R*?!F,SR<=&XUB\or><!85[TBEqJtH::&7@48X_#_H5nH!UB#7''pAALPm3mWD1*(4k_<cV6I@#b6\rhF@O4@Rdoh
%AFV*'[L*C3Z^V$didK$p.![I?5P)ijj<?:tQ?tCU!9sk*W/K8&V.gJ._Vs/H\>D/=.b#UI<N`'Gaq<YfJA@&n\4.r>SQ95YM\N#6
%WX6"#$EHt&&^Q,*ot53(<l-_nbNW@3^&EEK0t'F,=BL3ZEC$d;?'6O09FH%+K`'13f]9sX[)hB+LO#a*A6#Lpcl01B"L_Q_$!p0d
%"oS^oo%\A]<_Gi=IFq]4AcGX"2=AfIG/I#+J*-?858QG0j!*a2'JI/0PeQ)mLOAf-OY=Er/)SmJX%]GdcErV-\"#[((&N*"*dtZg
%^tF,DFlW21Kc9@Z="_#]a([IGcEo^DYGf(k]o:1Gq&()BnN2oIGWk'X#sJrJLlEJ(_:S6'I`F6-q(5N^pC"=\;.j,OhL9V=Y@j34
%>[UJ'UM`\JL$ebV2>;'YX2_H!nkD#_IiMdjkG\7!LoJ*H$<"&DA>j`ZN-@4sYY8h5Gcs6?Eu-Jgc#UB0q%@=GT?h-)]]8]MGY[aE
%.R-F@:QGgmK@ed\G;'V>gk!eT)g=!nMJ+=Q$!b<U4R:0RjmYZuP1AAAeWf4akCXt&E3roh02OTJWDIi2W,UF\l3mGk))Ao(<fnHX
%iV[lm1eaDpiQ*n@RVFcYft6F.00L@UN?(qrLK-[sbao3Vit,Qn/H&'RpV+9W\C\g_l?[9rlc\Y*rHW8,CZ[MNj-qg6=4E50j4R)l
%TjcGdF_B>95Nqj1G!F8rDHdR`?;WZQ`+A)h-rkLSd@7<=n1Be]kV]fTF8KnteaGBDH=4nkfEL[XcAcSMgZ>WWm[-4Tkk3)_hqtGg
%^$]s(<_9Jr=<#b0O/Z)j/U\b.J!sX$VRqUu7ODjU59Gh^6EcB$"4b!RZeOssmM0ksG%S4Z>h[6OF7C"JfrJE4aE(l(C'O?XSQ8PY
%H:?ZJNaq7ri=>9XVq8E297jk/n+F?Sg\H[Xch)OSmnE=agagBYRd!kZgmEN:mks*Aq%&8*F5:03bFPS<YL!_]g=+6X!K^eQHdP5<
%CX?jtc'0S72u:3gFu0$graumeUGlJUEgaEp>2&7jclF<'bEea6bDO3Dm@>==#NjC6:[St/+WXY=,Os:'Vs7US[I\%)f2g7nRVP#(
%$9dVI)L9C[p!G)(85aR]oNL!U-L._BKPmt0_g^.?f@/*m1na+KG=+E?oJ>+lT;@"?Vu03$>gBp'HbHBfC50E.T>b\SamH&dh8^^\
%bIf+nH`[NsDL-0WTl.'C0:BAN=43)TnZA_HSf79J`nUa(H%TErrk%4/XJ">66f@)1Ni19H^UA(GH%TFq@a&oVeZ[lrH#rJGg,fhd
%]qTDCNaH,\gP3C:qH;.";6OWVCT1Xin$Ur(:t"+mMp%RGFD%rOi/Z0"QhRKiO$DkZnYFd^p7e:oGuCsp?XTPY!:CS66Zmd=nbg%a
%mZ15KR@3p68PN@hU"Ab/:Y"dfqr@B3mZku)fU<FM>eu.ISNg/Jj.I/@Sd36(Vm&uND5m.B,/%SOV1>;lkiY7X0;'\A2cViVf,BVb
%qu0:Kr"45aCO;'.D.d&&.dH]FXm4H]jY&fO?;m16eQbs1?^"1JRrk0;f'>pNUJ((AF+WjBJRYC1Yf4].V8cen\''1Yh]#;/93P7:
%i^JXc.,*:V*q@P&N]7sp]L=)9.=G&;Dl&ql68f>lVLHa1\:>@P5@g2Y<An=Y2TO<oV_OsU5hRi(m^n-LJJ*%o<kC,5gLdSrh[>(G
%NreD>G/l099rC74\N)kF(fcVP:%qFSs",GfB1mGRGcQarX3>G0SKS0d-SC"L\D*'Pf'$tA\_Bj@N8C-n2g;N)_5KVOH.[s<)nl2Z
%T'mbK#&g-nbk'G55Q[C_5a$D,*qDeNO-t0mSMYTGT!9HrBiObk!a<X^-==;>KBh852S]8i2L9_pSmH<,(qb9d^hh<2\Ud%tSsO;B
%SaPgYNP:?i%b$=@rO:RpiBHb&S;TX"b`8U$/<Fq.WlIW>J-HU+MkN3Q3Vh*Q)t?,fe(i!?l7E/rn$>6,34bgk'S='"aIM/$`7XHj
%lKR."o98u1_.6'(koRgVQ(Iht6fniAl</9@0q/E`G/db*LN;^XpeXS<cnhP(aG8UZKm`[FO(qusKpo2l6Pp;/3i'@Di=@Wc8sl=7
%FSMf-"i=o/nH%W*n!BC`6E'T@/TKu9iBa@,77V@0KUAH46\2g]gY>)l&JUY,M_b]_9>(s94o4Et9=lQ,p831r[-ip#h(JH=L:oA(
%S,B+G(8.R`LusW3=i[Jm=-Hr@_'IQHDh!6ApF;?kZ['\XQ_qs,J/l-"X<3>5<e^qeDgU\S,M0PJYI!=@)cG)c;TAp]YicF@73![a
%/Y;T]NO0c"H6jCH"*qiL9ih<M@P&"8"kKD\e8$0#.anHVl(WP)o%plX+ArUk$q*]leLNhT6H>F]V;4]HK`:L#@CrFRQ91>S&M.<h
%2"FVTeRZVQ+QWmci9E%n<"(R:e0-Ft&P%??=:e4nk:2N!6\8r=i6#^4Qjkn*JFrA&MZa/kdSrYX^A>ms`YBet4)4+X@":N,?Q[a1
%$MluDmd8sD=OK:"\5l5@cu=jD-XF`g`"#SK!Y2:g)sHJaT((.<Vhf>X:_+:i/@),8H%h]k1h,7b;+^ZkS4s9>#Y-!]B6au#*u5PE
%Pba=Qd/!0D^UOLjBNo):RQMo_!i6s(<(];)EB'cpq%,e`A36-p^hBZ"E=p'lRfFLZ#W'E#]C$(HDY"a?DPW\,R4feHi+H)+fO"Em
%)%qCTb`LfiKWQQ&ZiRgUYMl0^hPK5>Ad'iOecIc'493WPg\[$]Xf:pj-#YDU2L'^+n*G457Hgd;YM-"V[;cJ#`\*9J8N@K@8=WRk
%U;90u^f8^61k,TY"P9*YMNhKm'rh^WcjD>bh8ak@++13+6@CsR,JpB#IgFuMU08T,Q(DmL7S)>(GS8:mB6%/K[(bP\KPM%Z(Yl7r
%DPl:sm2o'9l)?k6.uf\J]S(&phY[1\?M^W"V8W#hhfmADUtX1/#:]*M?@TRg:A7bA]OIjt@2322gX@$Vg;XpfdpFrL_Y0Z^1gtoV
%>O0QT[AIbt3djE=_+limYflu)3e0\tY70EjRYV.>(UUk<5XaO55f-@/\ij$&;s'[<q,>0W<RLrcn;6dAH`#1!PpfMW=s38G`^C?]
%DbLO\b052UoOor'Mb?4ub]$_3RRDT-EOTC[^(W;Db\J"&Tm>IX4[bn]c3Z?W060L@@b''E>%,XZgKETDL$e4J<*(?F<*8'?l*c1F
%VX(KA-8,=[4>FK3V%MCSotHVOL1?C5%tB*Ff4l2<G>5&r*?/cB@-EI_X_7O(p*rbNdr)1SU*pu$XaTk\m1)fL2eK0@0:::eM)FYH
%gAA_4rJ#j"6g^uV[.fgJ@<4\4@5hiJ'Z=CDb[tkeUZ-1%r;Ffd*QhM)c:8V5K*DaZL=XniZ`BbTWLB%-7.3^GDd<DG:$I"O;oc3O
%3g`hnm'P@U5lC'/BjCl_R2iR?+:"D["W[aIK`KU4fp4Q6bsi4,W6UC=@$Dn@c.0l[J_?t+@t>/,NJ(5i`.7-[!/h!^:c"03+.9E3
%h-#Z2\`sC+@NMdh<0iO(4XAM_MWCE]$:c?;WZcc:.G=1+5lAG]cc9o:b!lo*(`ejERM@Cu;Oquc[FeUe'hG8:Q*5$5'n"P2W5+-m
%^i5#9s++JR/_i;)_pTbPbVlXgR?)"@.5"_0ri<\gXnAYWR5,^m`#0GsmPRD^4oI@Nn%>CRQnH#k*d.Xo#_3)S]!K;WJ=#i2LU8FW
%FFm<"YQ`7<F%]XM^RNs6[O"U%'fq:K9NXT-Jm@R6bd'X2?mSLO(?D43Ym7;Nd9+2]6tLJWB5__6*!nr2-Am%%aWG,#+jgV]k&qqE
%M;A<ZVPLq;9nbu)f34J'=Xk$]$:5p:9[ls$W(%*uZCMY-foBN/n#3#p.S<o)\#IA67:u/Ek+7;)&N>agFpgohHFgPD%<[:m`9s%R
%a:=IDKhp7n,#(<_]c*fHb,]O$F-CHQ][l"!h<r`jeSV6]'A4.2,C81J]Eg*dKS`p(*KPA?A6i/R.UR\4Z?R,:W,=e)^n@/-\reCH
%6NAQR50J:E9BOY*e,ei_kC?IqU2L5-bbH[:GJr[-%=N`>!UW@Q0f$E@A<EltnJ8KD.](Z/d2Fb]W&<b9:pjZhn?DU?[-<m1Q1K<<
%CjbHdZ6A,:-`B:`pKmmR%7)KF_cEEL#7Uj-kmaGH;!I!`[ME&O26B."lP1-b$=`Z,#&>VFTq4MD8_4JacD,S)D-T:Z0GCRNTr-1e
%Z2b_^C1W\G@4G_FnQJkSp'6D]M0`1S%6[?Y<lAlj@EO">'A2\QV>B?I=BsV5%CKd]]2A<^OU_`+[Pi<HaCbFrYDi]NYA]Aa*+/fL
%6&#9rd/4>ja::89*f_.uXJ3\Q%>FK-J"jOMSG4o"7M=neI![>6"Su/fJ,;t8Cg$oYeg4Q(4#5K""ILC*g1CaVZa1M"Wn[Y1ZD^p!
%,YO$^rmi(L$;u#Y8GC\sju:>j\lr?PD0:I<nPlup1<1t_kZ,\>=?34oP]82TZ8$7<&`IZ\MFOkVC.%-"[nLpJ2IpBMB1B'TYlJZY
%@m]ScF:hUPpi9?n[*EjnB5QoU[d'FKEa4SQ">7o\n;DBuGX%qR*)ll,P$;U:IHpj'h2ZC6>3g!sD<>"h%G@FjXbX4hj!<EA1W^[i
%LK6:N3k?Dm01WB_6$#&nKDSNU*)iGZk&O.@656!!hYi7"o!gB\bJJ@iCmlYSkSSmoj^AT'VLYO;[[O/a&21;sOBZT0en-/i*4KO)
%a:58`9n4"#c8$;SBXFGAp=WRN1jq%#]_)G62D"Q$A$X`&6m68bc;Z_;QbRGB<G\2F(rM(Jg@1tSRB^a4VK#eM!#jUiT`k8Fi?9_)
%pl1^86>OSBN?fFJWW%J"<nPTM5\k6*4/"b6-EAS!qH?I.8S\ON^,n9[oVK##XbneQerq7gA]H?&-0=oT:c@FDm]I>VJV92spoFmB
%472$&DcnP;GE6+R2b/jjTe@MQAi&k&IT'T;QfPN\VE:E\0;".j)-Pjf:YRDeb9sU*CV02+qsq9gP`bXpq=JuuIJG.cE*[ZOF'h+t
%'P1fLG<Xhh-!rj&^?_M7G<U(T5!`>a^,qst0:rVBZIj[hT=HTs\SjCac6jeHI:#/qEGJt_D;p(YC-eV1H#N&.oX!PEe,j)9/1Xrp
%Z\^93/VQHI-rsA*j*`I.$"F&\Jis-Sj1pfU\r!<RZ)G#2=WLHk2]n=ZC0nFE.Ak>-.F"1#T41G2ni*L).k<:-1Mfc3bBkID4hEL,
%hk6_2TY4dAboKlFa/%..J2a-TTZ^k>`m/q:"gOp(SisIP;UUael5;'U\8bdko&[mb-2L;DBgm$JhW-BFCVpS+@WG7+2C.hp[q=cG
%V_knga\<Dnc.\=mE4`H<O%F/PQ.qia7pnhk5u8q\NJWJuc)=`b.F==198p/V[r+oSi-!Q2-7[0T:r;Q=6[-);eM5Wq`WfI2BNT*Z
%;b``VY@UQ4[2Bh^Lb1X)C#X2D+DWct2$+@0:eF\:!1OVW\:VM8VY'.R9WgE4B/FmNjRV2b`Q!94?^=`YpNB:,.V^9'Q6>du/FSRR
%eMhTeZ/b"<$h#TXQM21s3^0=YCM:WVhS)dZ-(45?Vbe]4>\-E]-LoHOKnk_ArH50l^M>\J:0OuCpi-QrA)50T5gsj4=DaN)RQsfo
%Mb1QTKb;j*<KE5Cd:p&1go@b4YtsJIVNH")]'a:ecnqE74k(cPg;)mA[63Uo<P//O-&4D<#8^Otm(?0tqj)eF/DE.Q1DXt8`3hMs
%=OHlsF1=hG`JOt#AE[iBH#?&i)"O7(,.7XeL>\/,9_ioO6H"hSJLO$(9Z^,2Y&Y]T'PD/Vh<4US_Cd?R\tRM_l:A^!ln8R%LEfr`
%Z!3M3h;O;fql2Y;q_F[`kVNFBrQTjbA"9neW!m3&WdS8,kd'6DB/q;i^St@k?rD#0An09B;Pr'7$)eh8Di@EM@9CgN2i9==V)Ofr
%9,hFFgnH\M]c!B^d[Se3i:u,mB@j<Y`[,jF)fZT?RuuP=\\RE>D;ulu\VS:FEjTtuPs=%BdMlmf@t2"2V)R<CVe_5B'"8?u"]piC
%W-&7$.qm6paN?RM5t=+`jr<$?iC-jA85E$HKXAIq\fF-6e<0".+gO[F=r9c_j[8fZ1O`^UZZ.5k3]4Cp-2JQBrc$_:bj^;_k0u*U
%R6qcT"(MV'b&u+[`G[U9>m4.4/q+S%/G<?H1_)&h>mFtWZP2j"1QJZ83Q?a;1c#A)#kL;u%Z$]Zlj2.dB?]7Le2,EU8$F_o4C'PA
%U"S;FSp<ruKB/Q3C!XGWN+&9(jr)e]DV?nmbW]lrSp@KRCj;q_n!PO)9r(,[kIaN9k#!lQg,X(G`LY")O$9-^QeAsAH(ra1Nq:(Z
%Sp;5lbt'Ke\XdQRnK4nrMi$1H]gPTZU(JEGdt[*5C<]j,jMW>#Qb0]"oJ60-C>(VVZu5*YL3'5WZ5>NrA?f2SNp,N.#lkiaf4rKU
%9C-73i7QD;6)"$PT?#C/O\^BH92>_4)!WSboi-0L0fJ$W7Eo#sUfTI.55;C(JlF_SckQ=AT;Qd%WYb#*93D!CDC!^dDTLCSZs[ln
%6gLAb>Ld.=\^mi$ZLV8PKE<qdm(V#g`3BZ6V(9fV(_<"0``*SB.66kIfP^%$gY'<Hn=?e<iS?toAFDGA,^[!,-eYDibrEhNgVM,o
%aeFMJi$:tnei&&<@5o3GP!oi5%!8W;7]2D7_*Kd^"mafi#pBY'(tIHLB:CoB.]5B<:35\RABu^N-+[KPM\Occb0pFZ=.Jh^P'&7*
%B#g%U*q-YJ;]_(!d=-@A-=eVejXJ+Y2On,UFNW(Re*L62Tc;Mb7qnaU>@#Z/[EXESkk@\19bTL3jcFH.e;md_Ub@D.+aAam(,f^U
%p*cDr3e['=RL-i#JNKD3*KXFb@6j0f_`Nt<1eY#fjX*o]1q0o`<Ja\/lTur^o/Hr2:5=_fnQ3>B8?%(*7V#I=19@t@^=,I#*@P7M
%\HB;of;KX4T\[5"qegF/pssti"aBIC*G*+^hf7V(b"TP66&Y:_V;%Q]ck"A).E*67L5*(P!H*@j4/#Ts.c'MTh;,,MK4K/^-W=Zm
%mIEosYZI?Rgn<9ONl!_Ja4]q#bjE[r2=;27O\<Bf4i1au2j*i6!r:Nf(%(SeMX"4'FpH^2om1b;Gm]W$HrD7k[$I-7h$7HB.oUo"
%RQC?5I>;aQ7_Nt=HEAkM]j=uBT#-PP*<RG)G2,kTZ)3(^UH;jAf@mr2G`S.+Nc#C=!Ikd]!gc(#(=4^YZ-tW_#;iemFSd9B[aF/P
%g&@jSG[]/A&lh'1W,BE2;P`(M"E2;'=ki\NLtfrK#cj=,["(UU]<ZM*<$e=qdWeRi(?:oka6'Y*2&9K;_m2s5A'a1s[SJ]bF)dRR
%:N&pi.u@!RY]Y7TgL@e7_=hJ+-/\WDD$TH>f$bS%T%IrRb^/D-V"?U-$dU<MMVT/MmEtUnTkskf1<0_Z-9RdJPNk.f2p?V3nmlN<
%[&DJW<^&kOn`l-_:1Z=63qhgbod*:SDUu)=OG;VnA"T>,OZGFjEpV7b$WNFRRrI`C'B<j:r7?/Ze+;j'R)Ep_YtqPPRqC8I*;c75
%dOR?O)/+"KmFZ'G=P9K[T:T,VV:CZKa$)X8]s6,7b)Umr?@A%^IoDAUH6eQE/Dd14T:T,Vb%,#rNd]EE["4]*kLc\&[]0ML)fY/m
%>=/R*ZPgeI4g.'>^0.3gj1r6H;cl;t=iW^15[3-N:X?(["$fdHp,N<1MN3*SSmE@Zm*df<jf9l2EtaR^ap*Z'++6_!aK\N:fch)+
%)ft@%@rXHkfOq9ffr/DQfmU1ma$)kiqIUcFoYBDuF%C2oYtpFn<1Ai^Yh%tL;f`\7kS!HgD8oGt0ScRM7bRIKZKi('OSn=(*:%5,
%UW-h>EibVH:N)RLeZ4FtZHN?N$S!#hU;8-$bHnk2mHk"hKY8(XCMR&#Qn84$'k9!GeKO%G2I5cd@uAn]eSTo\1ek.pZ8!4tC^'`>
%&G&AJ_r>m(hdIhSFJ<B8["dC[7!Y^M)u9MM37""^?q@*)%=3G^jF:?DUR2#,q;bMss&:<ip3lcq&L(JNs)5k*ac^$<FZL=R3D'3_
%-A7WTs/kDk5s\"?jKBQ#f3\#4Q\?6I/bKdg-?dUG/La^OI)Ir+j"W^QOSKQYga9[j:2S[..!DSMRL"<;lrl@emo$O^]UJS"dAP=)
%V6TRX$1<2\Q6Gsm*Gr=,feZM.!6+>BBUeh;4BcnHS,t9\5*n%)Q,2Pe;Z4$$b=#8Z1t7>8<8"FR($5c[Anm%;'<Jst&Bl/e69SsO
%X@?'YRoLC_Nd<=biqgi!6V_[[)B4]&6gGd^dY`UF]h@V*D!bq4>'&Whb@i\=W4dVoqAtX*moSC5)l4p?F8_pSh@Nks73^FT55XXB
%1tE2gQ^K!RYK)CEF;a8\27;/PeS9luR?>V"&]8Ks[B6](=j\t$\[gd]c&F&oCt`j%Y_**s-dIp&CY:,+Mf*AM"1M`W53er;%>6GY
%%BZ,YRq1e_RNe``-td.skb-RMTs1RK7PpP,4JHIH>pue-pP$lQrPRH-l9$!JrA29(L?EQ1]RP5C?&I-]CH,d$H2l*Z0<>iSflUp`
%@rY(-)p/!?;MSsj[39V?5fJ.]jdi]'hER.f1edj<SKK<")iSM+p<(k17f:G'4]WPKqm+tbr,W$"b0&J*h-N1X]\nV!2\-p@cOnVW
%]T:6RN%Wo4b/,f(b(1L8hqRm#c\P2c>I/4g`;<leOc$6"JbQjtC<'`u62<2AlI>tWWuZ04C7=$n2BAc9,]ZDh<2MiFpP+]-jBAnY
%9-m?>CR?VHQb+V':^4X5#FS@,2MlUeHVE+'^24ic)_&ns%9`TDGgH*-\KdA?G`PcrRU!SP-q6$?i6dP'&'k,k]5$.RGm4tX\NJ-6
%heiA,[kq8nJeUVr'O-$qKoe)h4rKg#FBWn&Z"06#.?HUF&45+@]C!ngUM;f`C^M<nOf"g7;e'kV$ei$2o?#p`[T%IDbL@Qeg@#f:
%aj.=kM,\W#$^jaNMOofM3u$8>5+g*0`NJ,NG`lloTA^6,J5k@lIg_ftQXKp,)M\$5E`ZG\IFS=OD[ISsfpplfd0E\1,8]%q;FuS,
%6^aB\hp=/t[X8N%qZH]DgkRp"+$heoC-(CVK9=`;=n9<\f!&5Qr-j*sghEe<FR2Trc)B6c=_bPG2:\bc:e!HNmX4_>CoDMF4Sm_O
%8TRmWk';sb!>0u@SFRk#]*'Gu>t7<BFEob'?B"d_e\7)r/VaJiH,R5E9&TBnYh+NA-iRi@%g].sc!1>9#DTq;k05-[@B]+ZkMV?:
%E"$mE:PqNThh8u<(*7cH`>1-UpTbcuc-*Z%^LqBGkG<9M@G,2`;qQN8`<e.X:H9.M.S=VA,Pa*[NV^f@R5&`FDEaQ@R;-l-91\A\
%f0IgW\h4%?<n7pTR0Z_bOp)aADAeI+hd2u>cu@1\\Z.d$9GCl5b>gCB!2GY2g5nBZ(2Xn+)(m#UXVDipDOL9nq,H.9Sm9(6?_Y(W
%W+&C+["):p=u.kq1B_S):"%H$hQ?sRJIRuoDX7J^Oh%!CVUMoi1,B#R1+&<-N6u\+A40T_>UA[`$1@UedZ[D;rc4SbVW9kbXr^*[
%$7sDX>J%0p1sT=7X^I,Hf]:Ime3pF3KrpBC4KTkYMq<0b1Y$uuW70HHE=F(iBVc%gM0<@3=sb/pn$coJeW`aE_!K1lPbok1<]S[k
%I]Tui9k;^%Di0bHo%RniZa(&]Ukfe;\od=#N?g1`?:l5hD&JrS1mJ4+4#'auePXL8*=sY<L:q%edQ)Mbe)^%$4VYeX_Di7I$D(R0
%-_VA6A!6;Mn"aqO"rjAL@SED/%fr+oF6]*j7/s-uV#g[/ig4>D!SZ*C&hS!1B'CdUHUl<HA<4(SRUmZdXimnNCKA*,,G81c'A9"T
%Sd':ZTNS-+EWe34cT$n#ZQ\!=&B3HU\g3`-NKcZ%U&U*8QUG%g[\6:*D3mZ&reO1/lDel<97K>q!k#%$U0W7:6DpsPP%`Gh;&0_H
%jH=3.+44ZWc,UA>2Z+.mJ!ipfX]uM+qBLS_FUa[*]DdV<hQs2rdMkh[8?L-T-7^@Jq5XC6Z9hamn;GBq?%tr92O^_o*2dX)=Wu0)
%fLlX_7^>@L*;mcdKds,HB:uQ&XO(OMhfGo1L")KGpn;VNP)m_@X?;e)$T0H9b][[X(uma;iTf!;NY3D%Z4GT]Cf=359X5["0^U_n
%G\Gh9C;#:UPQThJU08E]4>[itBc-PD'-<TT4&eagSXI>C'-<TYBL6`A#IV"(nB`.<?rO+#,WsSKYaFh)9EJd,&:bE8R]e&T41J>.
%6hADk)g^=nLS=n/-Bb!g,WmoUP4Dd\,N5>*WAN9<[7[V;'-<TH[*_R@ejIlb$P^#<9)g:*j0=GoLIR"],ho#tI@A',LZ[#q8TJTX
%RUqcRd$u1YRpE4fn5'F1CU<=A'-<UOU+^st+lT+l.t3u)H^b<Pc!/"'H4pSqc1NeDfh$A#KSKmY<0Q^2E,-C`GUT+Qh/%i\!OZ7N
%6Z\6aL]u@)G\E]9O?T7O,s4"CnKs48"qhuGB013,cK/gg4>bZT\W"1&SL-JK2;OV)*EoGVD'qG&DoH94:Z:$t7`7EC)b>3e:>srO
%-*^!cBWc4'ReEnOnBd!8-eSu8RaCm]-9Te!ZI:3If2$X):@$+$c'eqLc#qX4=i/l!%n2$7LQH[KWgb7rFQeauC;N@0CkioRnl6>E
%R^Za"Wp:omFHiLrlQj*!KSP/IJO-_39W)_O_4#YX6i/jf,2o4UnY=cOX!TsY*LOcl]2fG$V+c-D\oc:r_F*oqYU/?W&g!L*7^@,T
%c%LlG/@op9*\-j/NZ>5Zfa`jeg'/02._=#<41#d[gIuj*@QgTuf%*N>BPp3aMcA;%Gc1\4MS%IBRVg(q3oT$iZ;)^mlm+^#a*Xt[
%nF4LUgYjV/MRj*)bpc,@"ZDM4d%"Q%;FiiDG\DCp[tNG9TC>[IVLGs@RSI';iLqEu/kOSPP46g:BH'NfkVpb0kgFVL>p81#q-B\,
%7(uR96aOD!^CZ3*j`SsXR*]`f25(tWQ&:CjhFrW7ENjh;2H(q-gYCXmj[?*#;H%S5;&S#dYDn-m!#-V4s-SNCp.peJYWCP!JcJ]R
%.A9qW?^T)uXp1hoj7"7@P%,/LfA+3iFqL&BYHFo*VU:gBpR_<[DNGdI%pl9.mSN$rk<D**8c$nk="XHsi-W>*8mc#(oG(%SjjVBs
%;k=E_9]\#IAEpSo2H(^2IfRhJLAap1qM\3*2mpIRe!tp%1UkS;aP=L?QHWY(f#'TQRU5-e]7%N.]\L7Xm43Y%]^ke%bj1\[E]0DP
%_R''ejD_P<a1&Bd45lSL`:ngR\6=E`.EH=WK3n5FHCfLK^3tJ*E;TA'mMicp_dS"tEEtTXs8:a.hG/gO4ZgQj]il\lJ'n5+0;a/l
%?_VlbQq#A.nZi]2]Nk9pArkX4pX$7d"QL+8!O8jef]@6>#9VR/4.'qTW!&MTL;d-K!+)W1!lskeGtl%uB=%1PBKStc)tDe^e,7$:
%;pM#tRI^70#ueAo+3f"9@U3rMFUK32rKR5J`;(Vk0"9Zp+aM1oDW>T(r/_4loE-R\%;d0J1"o]F2pY$\dSc9mD^-/5Mg`&nI3*A5
%_[!uZJL>Ea]j"0`h#[!70g%X>q_,G)_&)kd?=_m.*8bfBcL.`Nhp2e$CZd&gD!gd+0KJ;$,eD1q$LD20cj@$4YP.Kph*&X`KXrV!
%\?c>7EBRk8+!4#:g[,M`s-`BNFpM14GE\d*_g"LVr"Cc[8,2f.pRrL*01fjRIdlBQT75a3aqKH#3/8c);ND*#+FLCA]m]o+R;fOQ
%j@5@04El*qpPeUX+t3rn..3@-cuV1hpo,(#h*M=\^c:_[&<u'lq1iQ_XAfSN0+^kOOV;),YgSFGZtOeR-="[fjC`SdPlbb&lCHEd
%H<1ItQj8$&DL:rLL3C5boDEB\?<jc1-_G7edEfh;gisdeNp'V+!(D9krpJsgqZcP!!o_^V![4HL[(_NX0M%uApb#$#S%)`G=eK`o
%OUn'iJ+KW8%9e@SoFAP,UE2`H-JYWEJ9_mAGtm5)M*2!"iD+\`oeAXDQID\O(PP)1:8)]X8TV?bM^r,Toq[C.?P@bQ.AZ6PRhS^N
%DUNlp\4e5!jl;!m9sN7_13]I<h6Z)^^;6%.0sJ,<H`FIlk8h!TKMC%_7&8L[kY9XA#Qg4l#d3\PqUl8b]>&^=YhaWMMnV?[KH(JG
%?aukANLSjsf'Vu%L[m&Kd(3&\QY6LE*D^GRJ58C;!HcW9nDaX8Z31O<I\mqX#XFqg34occo*A"o6IWe>0)@bZ%ah,"m3B:,:&nc5
%#ga&q:SS>9K?rD>3p!gEnJ%"3#`c6H,TuL#^EKpVeL)>RG!!n_K9(J'TJHUg7B/XI31so<OC3$Q:KVK+i>!d(BK<.I4[GH$ga+'F
%&Hs?Aa@89Wf;%BgnYF*5SFYXL@U"kZhBO'u)lWW7#Fu(h.+uC/]J$"oe$/j#ITnD:Icl"g9n&HODNDtWE4>Ni(-2-K"X<S)V7mr_
%Alq(e$Sn2-R95Tn&N)-aO@]%$78IVDE&E+Eorc/sh"_:R`sK19's]Ht=*_Hd6s&oBOnS9P!"m)t_cB.H.t-]I&i"cV3H)!CN17l.
%P7,E5s7]NRmCmtP5as]d;.a"`_P/Ku,m*C9olI>"mo`qA0f<BWT-NW$2M6A7pXAqQGgO,W0W1MU#JZL((K&Jk+ut?LM6t'Z##]_q
%J*-(_E<HWKPMc-1C>hJE^;T3g?YQt>nTDe59%fA8I["P8@$D8IOXN4,/6(Co+,^u.qjd4nj^hc=Ji8$G^:]CPbkl7]b]u_/.tePI
%0t`J=f<@EmAkjh<*0A'(]T@kW4)-?;:L)!X/$Y?]VS:2>mdSt5;qST04'9jK%%dbp$RoiCmB3:iOJP'CaMtp\9dApd=6]$5?\+]5
%Za!joEbHV/S^)-#gFA`&GCBV`WoE0Q`:_a=\qg6Lcb3pd8IoLrU?HL,&#o7,d1I4fo)Nj#Jdl;*/\KI>L-!)qT:Ua$-h1]s;@rs"
%H:OLXi4kSLYJZ!fWu>#T+U5HC6+o$B3S]kL&U1Tg2=C/*To..8GmtN@`d*1i3$;VE;pY@GL42Q.D"e4;=+DM73oY44QYioB3lYMA
%e/&Y$:@pJn+di[R]!!?e_DWn]$S7b*hsDp=+rf#@;u;i\7e0YYDFHCtGlaK(e%.g)CgnJ9%/cAp0uED:jmgZ\[J-@fcYlP7MYfO!
%q0:-Ch6INQTX5N.Y8(sgp$e+ZM1j<VFG4oYXB[*smrQ_i"8+.'msWX?iXV:D2nO:2Hsu"d@,oQ)-=UYQOc5*K4%7HX5#&2#8_Z<1
%>Vs^ooaX`92e[q>'m=:$W7cNE[qGIedH6hj[P)570;$#9i_ti@EOI>(r\]*qh5o!?/6Z%U5)`.Gc(ZW2[W13+d\3ii?Y`O$]ss!o
%Ai^;[,R*Gu7PC;Gp20O+dB:`.$$#>a%V+_SCACs-6=fCBi^<M+#r.9TnQ[N65=75T/H,ta!^Q@;Gb@X@Lsl!n.pVTo(ib!)btjsJ
%X3Pun)S6i&R2,/od1VW!/UZeN\p:71ZHi#TF9II9gtP8GZ1A=Z/aI3fIAIan1Fpr%O`8L;Xho6GRQ6.OIIt[V]mr--`TQYa9;mW,
%@pk=l>l3If+o(Zl9=nFD7Q(lheU8=#CiRP4QS_e1q'p@T`R)mrfZb+=/'S\H;CmS@^t!,GgrXU3o0&[(]_&S0;g%P3@Hb=YoC*lk
%3[3>L[.&&\80/J8Ni4LPc5c/RiSY\b8:BUi)PWk#)@!@[ibi)<;<$&)=LeQd:-8bCm<<([hSU&=baV,4GsXk'6!kYSfgRI;0-X)1
%gqD-[;?-MC_n;n]8fPD_'N?HPRgnXJE'dp2"Qt3oCMU,D_N-t&\jk=<=R&E`=0YdY'E5im2lqXAqV0E%$nD0k061C3A9rU_+t>^=
%*+S1jdb/E9NS7;RUho)_W7gm07)dilW<c-hPZU$2=^m5Q8FHE]mR0Y%icplfoS))?V7)A[U5eGeQ'NC[Y">!RX@>J0nsfel=JAn`
%HPCp^UrQp.)2#Y/s"NDcB1Ct?N$n6_l)M[)J,8lemT2F(W2S+%IX8T;=&1Fg#:`V;n(<^o_'LP_Sgcg+qJ^O&WmG]ue)ZOfd;,=P
%J0@RCf-]rLFifbSUXePSp/_pP_-\N4AjK^V8*'>R+,BCg@A@331d6BY/HcsQQ7V[>/bJm_E<\2eD*/f)1A[sLbX]M.EQ32k32BXo
%%M1;c70J2tipCOB7fpPc$j;q,KYNf1n3FklNJN>,ioimeK0Bi-l#R^Jr8Wl5-qFj9H/9"P6$K0@ZHn8E:]_dc++\e5,[;NYR,qP5
%(^M`6jAabB#+ORr.IQZ$>D@bl14S)GJ8fG4)(LUX0hWXnHnsDPVJTS!D)=MdJ70BV$e7:j^hIkm^rU!HP<nPND%-QTJ:8I)fpWSj
%dG0HI/HF&c7/@9]K7MWggA"osCCT+"#"5-;Dkh;6eiW'WLKo*:*&Un5kA;UcGabdpC`7.rKOnXt8@600UH;\$,5o(2P%#t-g@4K-
%D.F#='1Ek4cF0$R8MTLHHnX)5,E7Q7*1?pE0YI['gL;,(Ok^.>4_q_[%$mK\mF.d6bESX"=/qhBC/6/NZ4q].-#$jqXhO3145+DN
%chWI6Q$6EtH`]_+%?-X.>F!oVjqF/^nV8@MJTk:5\\6j^l#q3q^>+7CdnJNk>k?`o^ZTB>dbXH1&t6O?jX%#mqq[kZcg=]9@9@(=
%TTbGJ'Fn[]WrCG[mk4h!gP+FkRIuleTKkGXAd1Z1$g(O$`.;<,i>#'A)ABq$j8N7:d]2AX@]5u]$SX\.1hg_<,3B![,`<Ks$I"$m
%ZAsUI$DpY=#g8a`h#2Us7*OE9%rEab$q3-/Ym8D.\$7)S=<&]=$5MO4g#GGuEQDd2(=5ctdFdhfSfbONq-d_[!>F,eTQT%@G43Ek
%kX7cpo7jkCbaZiR.XC;PdDAg=BEfN?ptsSrnn]ER>/4LV]s$Qnn!P1Rb:'R=;.dBef]N9nO&q#)mNrdRZ/*8na,n39)MEjb<^p>E
%#tI>f!.oWqgciVVfW1aLjaq1&(R1C'gUg/[XR@DX,T4JbUk71VIP/AK?MI9:?qKD?pNl67F4//)YW30Ys"4P4TcmR)SP('aUtn&Y
%e1>P]E;ZXtaXi!"3EY:NCe=0PJ?:q8:J%4r$X+<?ZEQjK/.`j*b#t*:#a@Iu4u[^M`.J';ah='U#t!.[BtN>XVkjPs[MBo(eT)c]
%9(Vq4aZ4FJ\1aU?=5hiAfI/Cg^%q$^q'd^&)W<uY=i)p'i&rSD?WkZYo7>u]o8q;S-$*>];6Y/(V7G6KSEY=%>(XT=r;/_ZA>Ki*
%J;jBp*+[&m[P,W^9eZ`O^XJH\&N2dn&OJH$s.W3.U+%X%'nW-;!stOfi]0B=4i%A:li\DP[SOQgJ57_jDiKF"U4)MjP76WKZ<)]m
%h9=tbrfY!<ZZrj-^\bj5TYqaB.4/I!h+3L1%L$oM_>42eJO8^SRh3!tf^R0Km;F&k,U:)2!SYAs\W;s/J@oBcl@tTGC#c3$\0<So
%bDYp'FC`AD5ZI#BCP_'m1.668k!3$\O9NL0&4d:Y*\LogrS8]Mq=5&D'fXG$'7;!QhT9@4abO'0Gps-"'2!leD#T^<ndZ5c.@WHD
%?eq;(cf6=VaS"Yh+m"V\_7ir8!-oQW!$-tu5fuQO]dH)#:$mA]>134`.@UHQNG=!,L5<j,1hL4#Jn]hOZ'b@bkW$Jf+/VJ91@j^C
%X7:Q>9tW"QaPD@''"7,>*atjPM3#6@WdMJ?fXJP%*K._DG3trY-F_/!Sit%jC-\>Ak.\N*frdp//:"[MS5+%,GOH@,60ek8H.b;J
%NR)Z4?WaZUANc3!U/un;>=#"UWqa)V,>V<A2aaC6G[Y.=I]Z+,k`QpoW!Gm="JIkXTctJ=&<_1F@k,>-#pFNQP_sEJ67CH?psRol
%,#ffjS4o!dr_YS&`&`L8W!Gm="L/bFKo0h;6GRD<U*>Jf*XHOP#R./;&d#X1<()I$q0k^7_%h$+84A&35XEt[-qK0_#j:$WcPhrX
%!4::T#Y-.n,_=[aG[qdk&WTBfJalinMJtsMLiR1l<.lJ/63<Tc.`)c(+kR:YTH_#u.`)2m&Xiu;$+05A^Y?tad8NEQGaP3L*0Cdh
%:3/ln3$KMZHY@%kKF%qc&lU(_+j<CX.Z0,A]Gru]pI>KZjARfKTcbLJO3D=3;jL+S.1u^+"])E'bt]P-<i2k+,:^PB#pG,lbc-E\
%g4BTm<-M)+3$KMNFO7SU'1C3C\hbhQ&IID/oA;O),%qTU7&#D]"@8R_<!;L+VmMIXd.Vhs8-k/j<h^cXOV"f9S5UoS&IID?d1Q^"
%5r+=3W!F-:-p^6*9X[lIIfKA0cSe^WqBU_IhnW@PW*']P88'Is`gj?Z'#.d'SZaW$^p@1#M@`=7c3J!7KV1$+6Roqb#pC7J3Mdo>
%OV![+M.8$P&IIFmCK2k$-4/Xt\%i>M"BZ`oXmuO1`'7=07]1PXKHO/uJVnD76F`s*'@*N^7jJ3W:KpddqaX-fT`Gm&63NHbSFpAc
%63uA8*YkAh]M_Q<I.\[GBNu;)C94#45siA8ZPjQe9g[XW,Qtgeel6;7+<efP]q.:&"plGXCMTn*Clf3#;Z52M&MA4Q3K]37lDg*P
%&[7`+$5+NkCSU4,[p^/-/;3q$)$EYDXrr@IUjftBHB>fZ<T47l\i\4>T"-,LHb-RO3a[Xo(f\olENV8f7Ig^9(t&hkRpVIDLl-TS
%rd5d_4imf').\*Xhi^+sKkLe-/:!>-p:HIm9J`>ZXN?4TlB6qP>[uK7K'7kbQ@%_"%TRt]A-mA(3?S;R$#ui:/`>F"]4A=WKXd%&
%L)`gm^V+T`_`7P*^0C[,SAlk3g8=<(H.5$?_sg4PRKdn'K*E0jc(gCdTSSB(M!1[W4bZkU/V4L`Ag"!tpTSakh2j?]5Wk/D%)lFi
%P[WE3+"&C+Jb!8Ned_!J_YgDH1'HmRBZGVTUE_Ku9#O@)#R=`;!85?s_@'Y1'b]bEmsupaHN@qD/]60E]e7=%dY+0Qg_H'9-SQ9$
%)Bq\FP!NliqfO0HIK>XRUCF+e9;"+@$onhB-@r<1cluib$aD@hd6Ai?KQ/4$%-'!$;MlHH">FrcZLCsYXgtX_6o%aFZqRrroj?Sj
%$e;.f))e90L&(\4RRkdQK;o/KGoC'n68-auOeRA_CW#V<$E&JII_JmJ:J7_^ODRQU([;jTg9@u;6O<1td-GK0%.>/b&8O?:c`q2[
%J@\V:L!:cp#8ntH*\.:uOJ,)"p.=D[fdl[kZf/=;D>tmVC[HR]#g/gNO!mD8\>WlVUK!4g\IV*L'$Bb4mKlbOiK-Ik"Mb+".)ZV$
%a#$?H#9?;QiYD!02[Z^I'EhEh75u3`80Kcf+U.^GZXRe&5RNb+O;OJN(Qa4_ED4@[.j0O^ZX,R\$9HU$&LjqfUi:Oa,#SsU`.l4I
%ArqV)ObFDs&B<Ef;WsjXO,f-SJ+n_/Uu3F'2BHGBTFrqT!C#_rSVY/P@u)#58JhaLg>)#Mkm<Y)!+eNS(%/*0nE9]*0fWH.<J8@Q
%P_*qRkn"4@8g2ZtFH-l:EjTUdiMi@,!tpKXE[W^R]<qZe+KAN9k_'E)"*le68F^il!M&GBSi?a_@kCP#3M5YkQQ\`G#S7/dJP1D?
%K<G!CaJ#b8IW7a$F$s,d2m`V+*u'rG#NC;72;(T2Ob>JJBO8q=I2u:JoL,,212gb9-U384,:_G=Q+[hlaj2gF9nL&Wi2(M5#5?PI
%,T[*B91e)UVmCM#IP.mHU>Y;\0tJQbCOSQZ$SRROfCRH)KF1$O,&cR&pi5H8ctP#r-d>U&7`*-!HZ'nu\bGQ"hu6#:aR>qn^Xs/s
%8cPl&#t]_49D!epOuDA?,l5:a;(iIDG)\gR.E.2t3GS#/<_hf:77sTJ7)Fa=N<B,)O<!ZQ["Jp*26+V#T+OaBY^tjZ+EJ#(2X$[P
%#m3DJQ[-8kJ@jesL!KE5<a:6H0T\WBVH4NBa!Bf@"p'3GBM(cGiY#^#5'Q`d@a(ME$TUDcs-eNc\<+q6D0$3Lp<YiR$os)@qSd)<
%,\Z!KC^:]E'+"_[X/$D"*['e$SG%dBQP<!>JM=o#Ol0-upGCeIHtsB%=M6cq:9:C;+@Nh&L6NCK$LMSaKN(.TU7j2#=%:-FAgdg,
%IP;o\*)I!9M'8^'T_CjAiM2@Wj$UZ`1UpjH4jA,B'P/e24ia)JG8VRd=6\[u(b3!=S@:Q(al2Cc#7=I1]R'#PE=)5!%_p#kCV-Od
%@5#k0R\OB$d_*m5C6/C#L#f(HcK'Xe?c+:\0^KRd80r8hMG^`;S)6)\<cqnN(Q!e-4#(Br=W?jK(Hq"*h?S1")D-h_;OlYX_*Z(!
%?5lkkL#])YE>><U]rKVXT"P3^!h6TDPd[S^[TAP9[h`#*hf!u%""l!9k!@R"Og??i7)J8$GgPZ=+IGhr51$eYFJdH1q$PUNY2OV@
%-O?Wh;dt89M2f#<<l(rDU;AAW^>#"9F6CYDN04e1G',(gj8Tc"8UgcG&Wn!@)5g+jbTL"P34F#=35Q)k(>,_;V&j6aCt'eJ*GNHp
%`=0!"m+=@"Spj_\$m^1i)EETf0!JW:S&#>]pu-FuTOkG^=or9a$Mlp,^;Z:KBQ$:%$:cQW0;^iTIQ+gq<TF54&I;fS=Z!Qd8e;Js
%+:)Ja>[cNi(F_8X?6'[;!!r]pnRr>U9)*K*ra>I+irf#B3.$Jg%-HAE:.cCkIn^BO4Z?KQ(k-g^(e,,o@-8FT9EntT#oSh=O^&W7
%2E=HaqrBGJYTHH99$/YPF6Dh."T8H2Q$C.G&m&Q,$H3n2`-n".(NkfK:"`89C".]49gl-I_B:m(6'?.2gY<9IEaMMrE"S6lH*!E*
%'lqRt_t!7?F1Wr[<&(]o*Hlf,`J=#:7j6G+h-<g.c'/7=BYt3H:)r3[,GN-d:4'eQ$BG^:)a)1QdB8IQ%GM#(:o0B,#("9d'M2]?
%2%5e8Qh3aPYP#g?17a.cCL<eI6&5$@$BdPQTn^40TJQHWQYRT+=H;ALE@oAm6*#3aca:nTOH?($[qUs5>!`C)Fl2NCP79!8Dk,J8
%(B.*s-"Ql()mi.tBn8u,)pF!Ab%pB'//#/u!Hk_WjeJuU6(!X[A]&j<P]eZI^tjM\!EBYFPRS<aMrVeuPZB%=0MYj.c.Xda5W5u5
%\$-pSn8capX9*"/'\i`khb0EqIi[>7];Z>i/FG,%X&-mqj"-g6;062N(U4.Gpb?7$?:YK6?a_Efb?d'mJiT0*@*U!9$(22#%h-]l
%bU$q6Sc<u/=_'/$[74gF7*XHI&noa#M,AeZEr'#B"%g]dc5e5\L#dPg(X2CM4W?8fYX):jgC=:oODT<N_F;<kGZf\WR>MP26,>#n
%R_PGi4;HBDJhM@8gI%m(/-F4!$K^maD&;j[P/\7D.l%P:6X0'iCGQF:\Zt'3en,iim:j[$XN`SX=MUGFYfS^UL.h^7`gUgBgFeqm
%jNt55E[_&H=W99&BWEDJ`7m(a-C`&iXjR`uOcJDQG"-KTV$9fu-$ET_GPkq\eLecpT`mkM%CmQN.)T>R14KiU,a$kGT1Et[3V9XW
%7c<\SX#(=1l/=p2LeUZ#^Y-(oE1i:LNl>I%/kFdOk/+@dOUK1k4=c1qd3BG1b%?iG=S0Z<L&'rd)@%k)0Q]r'?)u$]+nhs.)CJPQ
%SGs]B8NT%flRt>9"<0>qoGMB`e4>/Q+U"T+3!(!OW.:s7$J7W&.aOV#iX&+G_6re5:"XP:W%qY!8a/Q"jp._q\cf@En:TGJl&m`i
%:&70?R4]r"Z0)A"MWp:9D*3cEACJ!1K4MQHjZUaONrk`-2`/gG'Str2C:rH2F6)cnB[W>%\L[h>=dUg!DT@L/9?]u:H,SkMDeFaa
%+;dGN?J=QcU0CcQ*X%c\%-"Z%k8bjA)UfukK/eikZU3S'R4b1N2WOO>DRosscc!-TrY5TibXgY$m=^g&go.Y!#uU0e.gcQMOT6Qc
%=pbNiigMkP+^%.so+D(r+YR9G8-F;iD3U.SMoqC(<drga+nX.L61mIa6P=;Yqn,<]K\6*]3Z:r7:GEJb0"S(l[6j!AF-1,BFTemO
%&X!_P&O4-6\Ft`X@@m_A.KkYTA-*cg71%pK6nu@qoB0f*%3@ou7r5$T_q*phKWVJ6Um-c$GN=eh_L'A=h/Wb1ncbiL^*6.Yf9Jae
%[Fo),-:X'"&3'579-T)ejqhM`@@&=-PT"g9etV\Fa-+Q@Nh7Z((-!7c.f"-an=iC]@f6kP^"ObPPi@Ju1\%0FWQUA:,pe1EM+o/1
%i@^rP*)6bk:uTfu*^KYJZ5,rCs#,a3#G4)jU(!P+.6)`eBY4\pa"/0;5oa%_D#b>ZJPnJ)'pkFL+XnZKT`LS[*fJ\IJ`#YdCA;k5
%.W_H(d1I^&`)L!B\5&K<7@7!crZq6GD3oo@h5j.93$KNAMnh%^iJ<-u`"+@p&WTBf;4-@5MD->"!\+i"jX<<7+J9<:StB&:Uo;rC
%?cm*[TB$`<iG'Gt&BC/pk87/1$n[;e0?5n&6,=mr+qY:k#ig4^8l$?;[Mk[u<J1IWlb^IVor9A_P]ZbZhbC@)<H[Jn$!T_e,L&V9
%B@hOI70bXE4^Ud4Tl!pdXCK!&P%$XledXrW^>Mn$/)?Sr,TE]Z%qY>9ea7&k"r^JP.*NJsD037XT9/-169ad3=lfaZDjIVILIkrl
%\"XgpI>:D,"V<BueqlsHFf;Z\.O]NJ<Q=;H_Nd4^3$<_gT1^8V,?#95pH64b2C_>Mb"i)0#$Hm<iM1]&nPj`mp,UWPgl#U$#`UlS
%hMN=AU4%6+bUEp?9`kn34ahuWF`,D*_MQgiL@l/>P2<,BKHASBgtH\"Ki]u<,-q#=I70hpGDT1D=3sIqb\,)J&c8ba1VpN7q/M(k
%8J+=n,?D$!;\4MgU0,779S"BJ^)<f_kaW"6&5#1_\Q#Dg+gt\/B;&P5Va\A`[k!n?BVP)MR5P_^#ihA_,eQcifM#."*ICJlkePH4
%55X%^n\:u[PW^:A<>UK&^9%21/R>.rRIDl"rD1RX8PQ5>3;]<U[D2c%;^*nlk(]4VMCsOsbo8Q;:h^8d!<M*\74nY2#_:[m\70DL
%bWO8sB9'K2bme+`VC:+GB:8Mj(D].LADmOF![cHuW;=Op`WGGjs3#!\G#6$T2,!`9bRtiObB;#AE8j`[m'(n7@,;8uTE\`@\5GA;
%L1oD`ir<rA&lamQTHg,Yh7jae):!RK/7Z:Z":9miJjUZ"hDj^2&$]3S<A5W;>>kX7=T-<,5h@3"T;o-'6T4Gu"ucf!dR<+u)e)0N
%E4K-5,P-69i`0GT)]$A]&0&2OI">!A+8*R,!m.]=jeJF";!;MTb""V"+gj3/Fq*Q.2V;34<0iIS0V*B5kUs%*rF@N=,gI3qZUcb]
%)i?P_3g)j*E(N1hLacm=Ns^O%d0l<\UEfZr#$QL@L??;$"Vj;%"G,+GA^'%:4>GL<Lo=k&-u7tq00kb(!nh"Phk/_pRF;CoZMDa1
%#nfbt#@rnM&:NL56aOh87NX&1#4d)D/gc+=i!T=2o8_+3OB(4lR)-1T'oB//qESH@IkacO;X_/6TEK`Dr8Cg7(ughQ5odKeSF\VS
%e4:hs<:k_MA--2.4odO`OSa\]E??&cVLd[4oo_XE,6]1pIkO9CN"iLQU4&M`<KR=pFT#*r";rWgd+1c^D%eAFCm:6(BK]'j7LH)s
%&uXh_3n:]<m/?Q,pd!KY^DA<76c\EEUc0RnHM;_Q9GAdP5Z$W\MCUm7ZU,3mI8iJLQ,3S^6Z)MVR*X#`%h6(&s#h#aG5nHZnc)r0
%`W%b.`NXi7/g9SJa%i$N#0X:QSY7n1^Wo6p:m<q].np^\Q&24g>mV%%aot*_oG?VB'Y-BL[7BYtKLmI'74!U%iWhA<D]Y[G`$\h@
%Ie_eX;;BKf^MZ*3M[Lob=?.(rlJ*4;1D&g/b+Vr)3\u;/pDT`-[E]1Q6OM5/J]u,W-s!O)3h88e?o,;fgTSj_*Is6(=#hFhZ7h2^
%g2:t3q155+EjO.l?oDe(*Z<*2Sn.Wtf&&_"2g!\&@dIj+U4=mS_Op;r1s%h]UM%r)0SNNZ^s?m.M]W_ZOq<"0JQOfI6A8H/(tg$K
%+G:)u_V8b:G*N)k9e",o+]RrIIPZJ+=(sk0U((#^,t-E/)&aWs'p>:#&ur+C6%\1<7q.S-IB][M.bJ;NBM6ER%%3bC]3[eL@"W1/
%_KuID!;TmFd'8WGAY3Wj$jmB9%I.ZDPEE@>`_L1k_4WEB*2IneGDrIVGDtF'V]2*8TqX;A2G=rl^?M^d+,EOm%>JWLUCUTr*2j=$
%C=f3kA-pc*6FH.,#7?ZWeO$ZjV/2;FV/l*Ao1=]\#Z)j$`r:j\KH4bENEOS(H"3fmA2?W???Y[0V/DBC('J/H7'1`(</0&JFEAd^
%2W,/o]n_\_K0/(J<")M6jP0tK5d#u=OC_:`?<n\H`9IYNGZ#DFR`N4Eje#qH<Sg?qGb7\)PL4FMcV*@Dp]o"5[/[R60$7j)X-!V8
%<+bf&/l4^,+:Z&rOK.MH,_u,6IZfZJBr=B,C0KP^o!r/AV_dr*aH%RA!7uOg83)u=PnQ!->tops_@3PqF!bOCiH'4@,p?79r?;Sh
%6:CUH^uEF^G_elm?O7</$s`JIWg$&g6Z<qMc)^tj'YKhFeeht.+MPJgeSbYNaJ4QUkSsn0c+=3\)eM^0>MG7Z@1dT+$L6..Ig[<s
%#RAHsrmq2t@)B`+j=L;D5RI3T(Nn/6>9<]0bRtVR>Lb8JC`Hg(>2Z=gY&sD1RH!/baaW=_=Zek%N)-fYg5,14apZdI#'Xi6&NF5d
%NhZ.JOX!%K]0)2YNX%HFNd?Q?#ZIZ731bH+;YgDVU!Hh#aX-B*HQNj+2.>1T8)&O#%.&L_5tX^=J1ffn.%))E\ItMe@j*,C%1,'!
%6qW[URc#E@.tE8.kD=PQKI@roI[Ve\HkhSg!-M;H('6&l=>b;L2<JG`LnL$#(?C`'[N$c%+j[%Fa1-^5K4q?D-sTZK@rD;(hCZ`[
%mXl3p!8c+?GMqh*7\8QioP:7mVSiuajut83.N4.:O]DD4";+$@opaG8D;FS6&+XV]lEN3f)eq$3@SgnT"m/K!N!\n06(NZ7C-R*B
%M-H4D+9H\l6%_Zp6%nPW]*caaVqE=['+ip/!cf1F+fWO<qhUdf-'Dbp1W_skRQWRuJN+E],;%uFr/<)B4*CY0<)n#C0IS7&:$&4S
%91fI%*Y1'bGf?BIYqgPqj[nrrPK$UgCHqB$nE4CKJ6@t78M._Wfl_0`/A*OLjC]Q[#hbZ\.p_!.s"(j]npLDfkrnEr+]`nbD@J@S
%;lPTZ-1X;)%Ui*?+%KSXSZhsh-*MNM7+tmjd/(>(jKq4<hNJCB$OB_L*JF^IH^Jj49X;nf6!*#?K5Y>35f1%n?=-J?1GYtnW-Gkb
%A=cU:PcqJ%eu91aTa75WcFPjqc$g\>J\n1DWY1ke$<rT*?>j'N.d]&U$)bQ/PB$mA_2CN31lH75BQ6DCjBb[ir@o4O^d^.%ea-:R
%%?1UmcDe`#9(FtcVc<R/=XRWImOffj`dq$hiPQ'5F7M3^':B&Te;gWZQ<46O\YBh@R%4>[FEPgrVbbWLNX-l!XKTL+]U]c+,Da#%
%/ETQ0O[]HVRun6cW/X"Q![o6*/N8#<iEgr1-Nm<-pFf=MLuS(9q[lBE)Q/?uO"u'siLUj48(^_!o0*A4`G!lY<C9/?bsjr4nH1/4
%=j0kh#HVhcU<+bpK9CH_IcX=N(*`Y`?kD:[r^C$aN'W7^bmkBVX@R3d%`P"4Hdi6H2+7Df.b'3)+#DN7\AU)N=qJc6Xn1b<f\gjY
%-0V)%A4V4n-!&il0*YHJr^%qMiPH/aMOhq-b!t'ng2;qsLYpE8EFT;F,*Ep*\C:H1a!'G:^>kTC!<Ob*ge.phV\.g\0[P2_!Wg7h
%8;Zd@?nLU3m9GF,GZ+'kr''Qo_<?aEf009tfoi"pEG&(H%)hIH='Pt/SjqEK2P3*+3S1EiSFeIM=&]OKhi`2>&u]0gY/o\^k-QYp
%%t@2?L.KHr)ql$+h/B/rnZm,WV?J21"W=&>IeXrN$C2($&H'M@G(nk]H<s+R;A@pCXL'K4*!DG^^H8Q3Zn&ju&Y\27Cu$[V;>%:H
%?3YOX04W`h[<ADH>t]1V;?"Lg'=_i,@Ark,/$Ap/0\!k8>p3D,c&4GY1(?+M`iYBoNXHb?<s62aCsT-j\eVtPRka),BibH%i5mWf
%=3.eH-e?qGFsVlo<p8U)TDRS:UL!BnCC%;0S-i+AfL%<R&A\^n<bh"os8,!<=+[YRHFRFZg(d5nC8"p9XJ9&5'_uODBPhEard/KB
%2PFF@Ia@\o.n!uZm2h"^)ei@RK;9-9j5t-3g(dK9q9.J,QOn'"QaJ@=>'gR0*GSXo[pr(u$;F#u/["uD6to_%UkDp`iq)7T\&J_/
%&63CF=NIt@Pu`aiXq2LtF%J7nP#f6\b0(qf>P_VNp;8MopXmC#TG(o<!ORmulg>XV=bq;4D2,jHa,s^eXpfeuLWF&@RiF"n>K]dr
%,?\=K0TL73maqdJIUNK?T.(<+L"2jcZQ9_4G]0GpU6_duj@5@0*&op">!%Y<0[?H'=+5]JJ@Z?MAc1&ic>FdM^*j-G([*8(Zf6mH
%=FPh2eW66qie!G%]Z@N$LtRq5e)78@!n7UXlUia^?lnfor;2KjmCBDHH?$p`T84t;US!NUd^"f+'Xk7u.=,7=nd1qEielUplcR`k
%#if16:m$YiSAtUTL"\s[S%)`G=eK`oOUn'iIm]H_)`Y[u*Dn19&n,o#2QmH]qLIes:3p9QP5R/?M"U2b(9n/*TRi(1'M_lC+d'c@
%+SOiJr_9ZKbI@]igU`1#.;mfXc<h"H/^'`#Xi>XAm2]V&[5nn6RN6]AFYA=`fch9Qa67.l/F<#s4i;I/2)"h"aN?&OpOt\$ei:#p
%h%#L\OfM>_+Q;=cIDMYQKf2I-/i\o!n5s,''=9%%5X49bI-"e\M`rmp/1&8`TdHrf_?ih[I`)nA*$e]<FM8go7tKD4R9.-8:Q#9`
%3,t"r32@(DP29Q+T7e^rqS;*u^qjY#NUkRLK,J]a_"g1e9-Zp(Dn@pH#>^_H7s40cB_N2nc;V`4'Ygac?GCPE5'oB9Ms!Q2+hPou
%R[sYESWZW,p]$s,/Y5L$[h@(VHn0TP*;4"]Zba[i]S6,eKH7q?)Tt%Z]h*M#n)*d;]dQY4QD=G(Z'F#MkH53#=s@/:^J0%QXai[K
%`[N&4fjqsJb8X;_`%et#Sud<@GHN]li]GUM;@B23Ho6P_$(u0d'hl6Qk7:..i,aG*]tT9Wrak@5&UO1?GE=iFYjP]2aO&(M_DFEo
%7M"bACO$Q-j-cK2Q\;rdFAFMC4[1qj:!Se4eb!.G4F)b<Q=`o'%-"9j2s!^co7hHRV<<u?#=J%p:W`?9?G^L[T3q?\_!Oc$kgXsg
%-eR+,)4nXa+V:je2"CM\[s'MgEX0XO:P]Ag-%YL=;]u7?^Go!HP9V;O][u)'j6bFN*BdiE!Djn9A`SB781-UG)+>YKksRj/!OrF4
%o5C7?]Ad%Nh%!hU7)$&9Tb'<m8N!I\8T3.SLkiRBH6,jSI$*tspJL0$Pnm^H6T<M[FHEUHM=8S1lG`Acj]Hn-VliG<;'Ah'Wp@g4
%T>"',kh[h$)<8J>Baf;g%u[-U/f6i/Ic::)1c]rScmTQI3V^T+:hHI<PV!I$9C^([l611$&Iu6h"k6S>73=\fGu*-_k@RC9$I67&
%nd;n9<=9A\T"8B8(Ep%&6GW;%]^LR#=SY:>![3>G^k@^lgk5MJMfM[Y=(/f9:cGF6fjo28)R"k@pusVZP8iDAM_4tmH[uWc\$>\p
%INT812nZN>?KjoHecXG#7BZ(H'i>73];Oj=h`BN$j>rKX`;rg>J;J6PU!bf0m#.i^#>;&/.5oaVj!5cJI/5Q5O:VCYC`Yia-\0Ya
%J-Dt@J2_hMK)g)F#f+r-7l!;mPZ[-^$gtHZ#Lo1cbTf`=3]ctmUE?.#r;tl:Qm%n@-+^Q+`.&c=T8>H=*IJ8P?u7U1_Lq^hhP9u,
%5p1m!:u>[2L1VOC$W)h?=0:tC"\-?TXrq,/eH$X67(\>/4q1m&"JQ9kc"W!JC-OK4i^nI5@!j)&U+B;4a$`5'K7Rudb,JD;pqDNc
%/aMki&dh6EY*&bdiSou&>F,o@f"G:6M'B\$C4S`VTgaE+/#=1Nn??('?>=D8;bCMVT=Gc0\^Wl3eH!>7,/-Yt;U(2ghVPb%Rq3p1
%>!7N*aO7m\]V2PDOn0i&]R5F-B<`KO?@K@32Xn/YC&iIA%o[>LjnfBX8J0&nKM*5j2-?T,fdGDu7sLAXcYe6NB<><]E%si724]38
%gC:4/d$@OB:LW5pmh6ZO2hm,QI5ne>.aebZmbu+pH#Yf[Sl=PlL^L#dI*HX**egkKU2GA!GJ4PJ:B!"pLUU;oK&:i:fuKcp)bab)
%Fl;9rhe7c=9=,1%(4+dPH@<Cb"3o=R%&YC)O<FSrb!<R_:VnF-jE:hqZh9,?KmWK7GH[SL_MV=6E+nVW.";CC][/q%4t\Q$a;48/
%cu;5pU>bU4R#5iBk%-OIp<rA1&I=N'$j7Em[gWC:"^h@dD!H?u_SN^ZfViFK#m`l$(^S!acp2R/Qj\4Za=P8.Y]S'-E(B&OqfXkb
%2Utn8q`F6]@f-cs<1cP4?VM+BTqL@V!65"'"D!Cd!(lW+\cL<?VN%dna&*eE#/CdGfmo"Ac`l:26M`mZP@8nkLt.(+#.s80CEeR#
%$g9I@5+\Wg'LG+K'>Y-6VAd5aL=Vhb1DQ4bQ>0b=eX:P!0?9#[)`AVMMSOj?cT:7es(h'3Rk6XX1]:Sko,hjp;-:]*;0Q)apM%9H
%<WWEX'ulCZ,d5'u#AF`Y7jBS'@fH=L<T]eHe=A[oR6a5#(-=(nWI+J@GMR>@hL%-FWVJX)j&c9Q#IMV8c[<b&e[JoP-GKMc=Yb2K
%`n1-JfGPrar[-t^n?i)fq0`!Z^QAd$oq1gXb(l&?.mMr.]7$l!d%9F$eMYY(rGH?cGiCN.qu,d*Nols;"+-'0IDG=NmRKKj"&nCV
%?bZKtQf[,pel-P$l>M+B2fl^:'ncF&^@1I(qmH^<08)O![R0+8m8&^9LHN5j2sj,-edK3+ch.\2gI_GC#7TLsgRn#rDuKF^?Ka\(
%I!KdjDqag-+7kQ&\*'rA'DeT^^5lY#ioM!Rg]-ARBDbB48:UTaq"S(jjTQIbq;]X_h1)-5rK"GVhu:7d\r1Z+<35[Ab8^IB^X]O#
%<O:?$6(?I)K`^A.4H;,\UGcct24l&KUTmYl?etR;n5(RPqgXY6l5%Qf0Eu0t\X;\IFZ8=KHR/R+LWt\SrdA)Jk%bQF:(5YOrn!9/
%\S[WrL`cNsJ+3.rI,'3Z?\/6&iQltX5E(M,it$V9rD2GY\"^ZMDk-nOg4'%D0D4IWmRA"Ap1aINIWiJ]&aaLYZ5EN;@r#H=J"A5I
%rUKX=D(jf*L]?qoIqXK3NX)cN2tFQejo*J#ga,2"AF5lVc>,QST0N>3>A`HXn^%1/SY,Z&/X`PNoh-sM5BNmlS+Ero*WB8uOhU_4
%U\g[4qt5I7pfDD.jR4+oC*n76^*Db:`q&DUhu'[GVS)SIpW+r`qB,OYg]-mk^@_9dlgOfO>G(l`Ispl@D<L<4k55^uD]5^lJ,Mfm
%r'nZSs588$a82XGDs=Xj#Od&T9bd'2VJlM3kD0*.hc`GAr[]SkrLQ"J_S0aQQi=i2X>`@ILJ8"\].3>4rCbTpWg=Je:Ak:;pYPr/
%!uYArQKXY".qZ\hWkNh_Bu.O7M[TAg>l7T-qU_YFc2G-37mHqp1(pe95Q&"JrM]`&juI(FcQYnQcQb3WU_H`dD-Mg?s-@$HT6:.l
%00]39hf8Og]\"=$=Yf0tiRn\>'Jk%)XlKFDHK3E14as_OLL8*Zd[fJ5h4XH=L/fc&Y2qCl\%$!"55O6u:RJ+@RpS@KhL#%Jmsj*L
%Z@;Gc_bWLDr:Yb-5!5a$q8WDX3rc\fG<^!-ja+87lhP",X`+71hFk'EGMgWJhRq\0F[(3>oe4)V_.Oj>p":.B++3n)S+$'Z%t=*C
%cenT8c$+*mh&i3Vrl:L0c?l!D3o>Dckgc7Mq5E-63UKR#YIFOZn:u?DrVkYHs5*bRdrmsJ[XZs>SNm'_HhBVKJ,SMGqnl.Aq8pm:
%s#/\\EprqZ]D#XCbYu2X\)mV%:!:fEhQSQOrNbe]bo)-#o61.;b+3BhiM5/"F>j&s\!?jfEEq6/g8DCfm;;\:n#an*.=T7lXa]BB
%L;&0+V/n'B\bFNlo?+*m+2#q_TC(=7oDNO\f(R:sIr2[o3?$LQmiP'Qqi+;8rUj@^Cl=2nh=ZWuSC>`pXj\B"s8;"k]"ag]4\n"$
%d3/I3DWI<1^]"%Q$U8<KoV8>VHe6<Of.Qj7?2+!eh=pQ5GOtL"9O0d.rU][NP\577]=EkZdU$hS2m&B7+'F?'BJ7OM?h$&65PH^A
%Rkrb?noXJ,96Rb>BDZc;0->T@n?'a'4T#_.Gjh[d^AMItS:Ahd2?#f.otT6Wm_-!lMiHWZ]DekEof_']qtmK=ZBk#pXE"$s>0@:;
%e,4U>o[LpLf6Vpo*,c]:`u=b5hXZ8ZZTR^:r2F&N;Ta8`\%\BcGjEK*8&Z#7K\?-P%p?W'LFi%Es-WQ>)5HSZ8(>l[K[KLF%p6T/
%#<\l)2S&L2C)\6kc,6lem00,!r?`kR\t(@!)/$m$)kX5CP((CUN4'OM_!Nd;UTF-7J%E&S7,.KQC?B"pgC$3rr_<=I[`&t"Sh8[a
%pq>p)I)'EB_$@XPKn"#j8hSmVTfaJE-neorfoBu[6Fg=,m%sY=Sre/?NQ-/.j,EWCC\VrXPHXLea.D6Y4P;Ie159-W08RY1?;R@Y
%[mp0s^V*OJpZk\rB8jhlSrjiQ)/m4gfq7dpKZg]En2/P^!X#nR:O_]+EW"P^]eO-Z>G$>fSl7!6kp\V6Y:fGFC#AXCnY5Q6\;1sb
%)/m4gfq7dpjMJ6Gn?h<R"U8jK/GpRo:6"<.K("[R)rLMYA+lEcoq-`>Fm@0$pm$ZT42)??5`^-TrQkIfc`p;2>6dr./Y?t*(k]kr
%N</u`97IB%pss)=#euM#rBIhWdmilbnXO`oc6_2AX2FrW>?_KtlE\A&[I/)l*U6PjY<K#;IC\6=CAc?-o=*KVM7Te_Qaj8C'ja\@
%3lRB744pX`hR<9n\YIX@r9W!X7BcUeV01O_9f63pC7.D'S?KOWDJa^lH7h4+g*uVR7"3s7ZB$Z^fsP16NcQ;'1M!]#p:?ctC\DsX
%qH/t>]=aI,ee0!0X,TR$d,A_L;0I&kg/s`&nFpcX(?NVW]^DnW3oqbrYC.\]P_43DXFiRs+J*Fu2!U6VG_WSR1ht->hD*buS6qZI
%oN5odlC-NMV8&$SO4$OnDV=,KrSr*D\_;:u;-A(Qq8XR;P/h1pEONhgC403^*6[Br`abQ\,`e^]a1B2SY1$qAZ'P1P[C/7?CQ2*@
%C%`&-O(Fjt)istgV/)!3Yskk^<6s/X\ubo$f,2M-CYjBU0Wrl:j)MMA.+`1Bn^s]UbLY7bA"-sZfBM"E*6[G)*Gmd]kUJWa-gP0@
%g$(WRG\f6!FmGoBCN_`l^*%@Il!/$e[QSu.CEJW)RR9*ilPRWe[IMmIo<%Urj0;B?Nq7-1InhgTQLiYHj.'gU>^P85Gp`DMqH07^
%dH/g=lScjQLZe$Ta.c?bIc3<!os&1o9O,-\=IbRKFEgQ+I4WZHA_P[8HOn^J`AZhcVBZ>Nc$6@CF.-7l64;K$1_YLdc?Oaoc=nSR
%H-=`-j.'2Ve&+Z8Cl<2SFOOijkjt>8g1["?8p#@(GkUZ3G'VAXI6=YMTWR%Ggj<7aA19DXk>W+)H-V)VM^+#JSG1<pF&IjG4D2>c
%*9Wh)j*4=FI5m5jII9!5B3Y(T[IHHDQ0e+HiA`3Nkk(D>H5CAj>3DA5ImfXd1h[uGk:!cQn7lepMUg=\F&%RSXOW'cS5j#HX0#TC
%$AkIXk/O#L8Gr&(WN`c]k]Ab=D-G;cgJ^q&Xj*qL9JH-YYFnTFeNRoZQ"rB-R<[A*.U8EUaLQCuQi?i;b8*%(VB"<2C,BEIB@:q)
%p@3!OM/1^,*mMLB0":F0VU>"DHNKt:bJ!'=g>&EgX1OR"%d\MOX,"6^:Q2En2NdjDRp=\ma0n^$]d6/A]^7TiqimYCGMP@5kNm:@
%2B"ZSdEP^pAM<7h[F&Y[-EabACY:G)p=G[>cA-,/dH;<oeC?c)o8DDX*L!G&ZITd9l)JPcn@Y2>>HX>`]..%=r"9h>7;KGC&p7'[
%>VVB/[W&X_m*eAUd\dqiR4)9!a-\8Z35qD^CcSDV(r\,MlIgo+[#6\TMc%-qAZN3ZfqjV4jhOQ9oaJfjRFHoCE\,m\(M:jABs\8S
%g=rp^-HoX4jqehG9:oVaBq$&GQt3A.E7+#U9q&Je(s;/a^;`"`AQe=3o4XJ%oqo+l7G#($.hedXQXsaF<-l]mp,`%+=]QlnU.prE
%/N!d<MmCpmRY,j$I4WMi:gt,EPa)OgWQ^k='587oV9+q2ZAZ"DjXduc;0I+:k:F2e;:aI`k]E;+)iZj*d`k3`CHLNZ>I_g\@O/F^
%>utMMce!S%:,/J/gq"nLDqe_4[k>h)m>+DZs7e`HEcY)Yjt"$U=r.EiD5+,%E[3]:qk@)V3W&03XS0*dF.R5.:-B5<\gApj"B1e(
%Z@X381JLnr%&T)$YI>LjY/tEsMc&i0XL7HcbM218L82dr]%/]@6)d@ilbd_BO6j4=Z;TiO[d16M&tO2OG'6]Jm'Q)aelHf6?'gft
%L$@'D)mC37D2TuNV$CJ@[O\]4j"OcMSZagRZU@E.03=M-2BLsFQ_qntS^=44ZITdsSuSkKm@ii>Q'EDAWN!"'"nC3q2;-YkO2(<Q
%`Q"Xm?[K0QYs8`+Q"jgVK.pTCp)\DLfgT%0"L`GMeiGe;l#*9$:?^1q=_l2U9pCocc;(Dl>\-XkYatftXJm,Hg)$lCphT2iXS0(>
%`%K29>C%cgMm<D4[(.S8cpsR^Z3#<YF\u24NjdXXXTF'\F\R&Q$%^U[qJ\\BD6Ctf,-]<L=kQ\6Co5=sQHEVt2-E6?[<53p5!C:@
%ehpTG98U$X[VQ[LUs1c"JOF6iI5i@32Uc4@)JSNKX?[tH?'h*&lmWs`Y01!QC5:&V=[<V-\LoCZC56ZtKaVnQB$.2?-#Hl0&YqhK
%>a6$pUs2nBJOJ3sPncicbuGYQ$iRN,O#BpJ"Td8aoi:=HWaTsC<Y0^s]6O\diRd4\X?[kE]6O\dqIo2hX?[hD-HZZ0dcR:*5Tsts
%apJj2k+\qB+`/jS$5Cpsqne%0CcbX"5lc)Bm\=ctE7iqp.u:sKX*G!TqIjqI<Y0du0$4Ond:T,SQos*(WJRp$A>$J=D:*r#g>"50
%-BL-nomk<h0Q2$=$k_.SR]I\;gY=Ef&BldjcIWq_D6h;,OZ$?R-B[Z+_sN+0Oo/BcAWTHbXbY4LOo/ChbGG\*\$!n(-'HKX):IJ_
%4(4_%+M08\H<Uehf4D&ng>Q^DIVUGoQ>W%3Q)(G!l$T$7BpVh3&o"[1[hH>@dWLItHqL3JX0U<"N@stfQ$%MNlc_t'VAR<-V%ui&
%@\uLD]Y18D^N9(5f.sR'l)r`$/AFi]+kXd<\2BjF2m0ti?flZE2aP-^X#MZHMcgQqJX>)][FLW%&ri1r`@AOM7=F5X]_%]WNCS.s
%m>h>7n5@kH%:6Egc009@EA8]f)g<A?/At2pqRBo^?Fg=!NA7Nb`#P*&AaNq:$h:OJl=8/#f>Yc6C[kjt`4-d?C[lE/$aMCg4t]s"
%>FM=jW\aM.L;gY?.+X#2U>EEWaC%/K(5hjJMmAa!]lD;Jm0d9>b[n=f.=GpT<I*h`KWW@FjgOs*?r:7SOr0PIenBL(Q!'GTjk])>
%fWE=Y/Bl@8l&0>[bKWhf50P(-7aK`Mb.O)t0s8dG<3`\_O45)[2piRcKl6pOX7Kf?KItK\DG^qT3\QdR>)+E8R4?bi(27hn2QbI)
%bgf2f$["71emXtQbau%=>$#$YA?\`\Q8fdalK5R#++&1d;b+MU([G\E/F0N@0A"1pBjKn[@4p$RDm=;u3k\YhBH7lSk.''RQsCVi
%2D/+8Rh=,]alRj5q'.NCc#rP?[`FI[Q9gE$H;UGs$^U.UQUPdq[/KR`<qOD=27am9C=2aP1+_)&N3R,K^1-EGWf9]+D;+BEecQ`V
%V'hFP@uZ/\EpQu;rQ<qsh@8<7,Z8!TFjXWM;IO>T9-]FsG&+J(rJ3(anjn2b<a/@`c5H-gcQZfFDPiBccr]Td)Jr=/Cm<&.4YGO7
%X6Fr.0Aa:oP=b7&b&eX>mc')!^2E6l:R&`M-qYdom4P^m9!NWA$CJ4S`GGudg<HU"h9[e2;U)l"7A>&b<rJG%7.Fg9JgI.:2<G5.
%$;ipR6rU^C26DdR6*J>eB,C.jBPBEs`pE5#%?"k_(+]s?WA/`^f7r:f"^UNXhXiF@FXTn*"+,n5=7785L>pm^"Ud[p_'iRUk25gi
%J?)u2[kLlff,eOek>GF)1`4rkcEWGV-)#QABu,\Rg`-.c>S)d*PNZb*f+ff&0i:G.]6)MRIWdG7kDlu'gtf\Nd%OT_['Yb'(1q:H
%g8"D(90k9i7mFVQRMu\&ilRu"b<YT.&l!5lPP\a&(\]Ks/-Vqt*";4D;N?3L0e):?[P"mc&hWKKYO7GfFQobMX8tbh,[1GRXm7qb
%g;O^s=9+5X3&e3;[.WrSbZ<<S*TZQo4IK`W[]VIk#>_rg"U@9(\7[NJkg:$>oX'NhPNZbNWn[h\]?%Cag#(Lg]-1W6VVO6+Rs&jO
%>8LI$M6;$Tgm3Sn>rK1R\uVrKf5Rt#=&Wuj[EC-h]9m7N9^Uim,eD]@F&S+*^1WYnC6p:"&?Z`aCn11C["+cS]Y9/]G*-P@9=oFs
%%k[/mf)h7]0r5(A]=:akT3Y-i%>K&r$6P_j7D8q!mG\jE1pr6h$^fYEaYXjg`FTtcls__e0XQbips@GA=81c`BbsPkdF'Xb>L:eN
%VU8db(GdZ,B,@cATqPcI\=fh'D(@HNMipXc[>V"?HJ54WP2KshcQsa3/mdPTOLhr;_2,[IM%<nZU21H/l=/b3+a(&#&hNEj\1NJT
%\pB2DUZq'lN37>HBuXht.[u*I\sbURWEi^`$&3Wr&g,-A<TVL3V5pXP]%U0;,_XUDWZ2*)lBrn7g=7rMO@RhY)+3WQjZTuXX(sHp
%crI%jaJ7HH).VmqM'VlLeMS3Hkj"UqnT4@)+.Cp62&W1PWal_VdO?pV6b@Xg$2UU3-tD=C?'NabXtIk1Bih-o&33ggOq9\+Y0(Ek
%=&1(bC9B23(c5;1AMgg\U;HXFSR04Lc;#rq$;\:B>S7`Koir+T;KY^RE4L:K%peSfRZ,('<Ak0BEcn\tVKT@X&gU@t?,f^O\h9bY
%?!WdO:p.qf5pB<?PMg1WpXu4&g.rP6='&slPH1`>]%Y\7)5H8mC_A!kX^dGth-bk!Wg65.4K>R+(`la3n"HR`?'@!&Y-,k`*S7I9
%(`ui.AG!4oC3`\]a46AFN/akcPA"]4f45;NX!a)J+4jGUdEo$Caqu)LFn^s3U.\-*dF,0Mb%PKj(M+#8X/D*t*V\:._9f?N87Gt3
%2p7IA0!7@*<!Q@6\gV&n>[<RK2QeCLk\8XtfbIf\rp^6)]\7TQ0")4TFYL4q.(k"^P4:`LeRQdQq"+)Ih;W,7"\e_j2h/J;6J76J
%ka;&D'="ce*/oU-Ipb8&L>,P`jd#(dL:=,MZI`+`KLu/("MjH00`XD]csQu=]=l2i\:7)YFbkS2AI*`tX8bKL3u?Cfq)-^gX`=l7
%eUZS%G$BsBDg*,.FU3HZ?JgK_h/*A?lE_;9+nV<9O/ucD\t-k!GB#R$_=+\bY3&p-68!I!&G%M\e40Je*<s*Im\)B!m97*1_>CUF
%[__aO^CKf%i[&FMG:/Fo&b3HG^kaqX+!T]MHk7.b>"RH[n(nCorNdC+H8(=TGLK&,f(ES$&F4YFBS^fcI!;Z%XP;lg@i]%7l8fBZ
%Y.G&MGO+TJ0&k\X'Hu=MbF%sQft9oBhM0^rrIO[NN-D<12,<A<dl=&imbf;INC4@+oW._:J@DA3qOJbe?!XKShHaEe+l7?oJKaKn
%plO-]DJdN.@7"mJRGCD/kfmJ5hPT7:?)qC#?X9[?:1#T"C14;QBZX1B^$FXLO/TN`^toijj5^:t'QSJhME3@+CFnMOoVk9m786:e
%%odRLI6K-k<Z_k,8RlTiel^#T>)dZ0mP4@<f.XejE3P;eYi.jo]2(U14m4J4Zf/-Z1tLeu%5I>>=q*dd?G(nJ`mHP.6d0?ATHWB5
%?kg54%!h_Lh:mHHEk-pd=!e$DhHo$Q%8j=*Jqfr-3=PlX&bNLo:qmMD]ra',hNpOseJpCM]lFu%oj4[.#D-8T":[)(ZP`'#1ZiOW
%TRIu=H(2cl?,eF9:B]J\HFqA)X@(om4`!LtpKA2C#^b<JhX:SUDkG=90n\8YF6au:hjt$U`n7cHlIumJ=q55%I?.)cAF/&uL41M3
%6Hs0,mt2Tp7ROp(7).Pm\/#"gdq%L!n9=;,_`!1_o@1eM(rG1@Gn%eKKYNM.jdi24RX6Mt=be,EmZtaGL;EJgg;m)9FjFJ8_Vf]S
%Mt\rZ_6**<[t?AZT!$oVio%B1K9e5+SkYgdZ1)T+Cl!f.DE_l(/3GkRf'`g3BeD;'<)$Yrh26sMY1/alM*.8.)e.g[[+Z')ccq#S
%]c\YnRp9`QK:'0Vos$eV4Ena[8S#TGq[gpf(saP_L;8'%7`71f`i[L38KfrMm8f8k0V5n&l^]$ZH1f")SsiBi%Irt)$>tZ\kJc%4
%`5cq?,MLrr5+\+Y`Wj"hmQ,5'KB0Qn\Rc25kH<pt0iFUTQs7U)o%_`"mjHXcC[7_tFZ#N"g'sbHgf</c7a#lI->pfGEu0#cQqa0a
%Z<P@cnnc`lLmVh=G!j21GA4OF.HS*u]4E#Bk./)<b8<7c?/Mbo<dF,Va?#W>c)0ubfQfB/2oO!_=*Vn"43q3l/OT.mGE'(lnakO)
%hE!!LkO)IE`YDc$2Eh[Wo/bS"+G-2sc<H#7HL=+<)8bUJ/%se2`mJjoHL"ZR2Oi8:!pSCFhN2,_D/F7%B56jDD]*T>F#Pb<+ekR?
%gfrB=kLA;EY`;TRCl3.eXCkIZ_q(ft/&#SNXlh>4Q6Ec0]B3><%9.CMII"CuC@3._3l]jZ$,7Y;T!urKLMKI_I`iRHGNlSqnTNN5
%laW'lmcpu7,4%5d2[8-9s+[(Do5<mR&:/O$\;[\:cSI._m+iuG3pro7qaKhQ!8M,C(kS4c*&^d@>m;oK&3b:Y\-t[uglkIUYbu7(
%8oPg2n@<2$eocegB+op8[]8$!i39=umUC,Q,4`:F_.AGDk:R!@L#fgiotfTrd^)^7(n&^I$&@nJo@;D\`oaUA_BCn29bS$6X6-Pk
%f.f=Y]..(+!.?b23(3#;l,$kieSMg9Lsp"cKgV@opC,P,CpKMA0O2X`II8P_Fc=g_dtYb@X4al=&?='R%>S&62JkEi[p$@">fU6#
%l.U(sU\/3H]#`SNWC(L5=sdSlZ&gL`%YoR_0l8md]3;d&>fVYKl.U(s6hWt.&3I'2M*o5Jb@HMTKD*9ki=NCM4YO2OM<^q@;<o(-
%03oO"A)+dh*$SCr8/u(V=\KeFOo&VAE6)-7Z`T%Bh3T`'f.hMWAmZ1=ZX+me&\Th1LBucR'8JsQ^6geudah'XL?gmRn4VAflPRMm
%M_Bq2>VB!1LuOc?<^_]4Mi#=pID,8HeM79u9CK*-Jl$p\ic&1Y"SO$^L]mDqFbjFS0m,HDo8AIC+c!`F>7hb!0-Lc:d2P)e*CKZl
%g(5G+inBJKrR:#:PM:AE%'@oST37J'ftA;cU>`D)W@V&eAN*[)0)XBZaG%eiK,&^kZEJ;[(N`kmM&17a$6(6XCNSIJU1:Nc@EMr#
%gE`>)iNgXFL0V6)LHPUDk?HtggRu;t=60uk0jHUm_pb6mCpkQ.@c;,AKYh<lNTID.0:QlFLJYKs?7/CBE7qmeS5S<^*%^s0Ad(oU
%#a`dpcpK$_<j.O8:OcN\M@(8q[Fodi,[=A'YbtKN=aP/l'&g.!1?Z!u)MMt[Xm3mRZ+mB_g-?fd<\LJM7(B>4m=;A<ff5p_bN`)G
%W=:KQnB//Gm4[!_kb&A;FVbQB`Be:H;1Wk>WLJ;3kdR_h7q$A9e[n@\E2hrJDS@aN2W*59IApOU:M"LEZO[Bor(CmPo4aEnX`9f,
%;&W\sb/_rK^D'Jp6Q03e[M(nF>`(E\^rUGR<`BNJE%.oZ?lI##jda?ABc=t,V0I7e]_kFm1'WPef&kea3k,mkb(-+63TjrA-KW'T
%3Ga?s%pEHb+^4`/`QL04%kc$HF`#P#U9,gT#a],q&V@4D)SMV>#a_Ca#XKV=Q4a@=0trRtZTo[=(9`(96>15EoDCl"POEKdKlB&%
%DSlR1E1*mn4Ri(uZWB(N+ge]Rejf&Mll4-A&2(;-5_m=.R;;05NfcKZCht4*/p$QfJ]iP2]q,N3iA,c9dtm/\rQZi'>+9B@:4[@u
%eL4@'j&7(*Y&/!$@g[l^GEctoKM/eGN_q!*qBFQ2=3Q6_4*k-:O`9QC?uOii=4;U)^%WOsZ#,#;A#b4*iZ/K/I.uc@3<PRb58sP&
%bIka@)Cb'kmA:u?TU^E9&&?UA4<0[,NG/Si@kL'O1aWk=94K_CYV^5h'.f-b"MrNR9lO2QpS9ZKg/(#3;G,NdWK\$bd0*)]lK;,=
%aniOpl`_DS@;4MUB!AY9H;90YXIdo?:[CF^/8_>W;^!G;kcBjY9$UjZ6Ns"f.9Ss76;$H$_:"&F3YbPuJkf8Tf$Lfs8o-e7=P?S9
%Vb0S4c`*'?&l,[<Tmfb%PcUJjQNIlG?tht7ST?fIbu#c5oUB6&gj(5K)H-lmV(m&LYV^5\CP=7^)$lPJSA?-%fF;,4rfZ%V<Do!L
%,;'3HSAWdB0JHTIdfk?"0jPo()E4/mQH"#t?ti:N#aWI^B+@REY+WVZQmWFrNEaX194OPYYVbJK"A@cuZNa'4L;7539Fr$lNTgJ[
%d^[IoYV`3^"A<6N5d3(W#7Qp<9kFl.@q%^-2!+rE9B-44_:"\e#Zr"M>_8f7bLL!7fO#t-)PLDfV%Lir=;pn!"Y>Yk*5U'b%1k'"
%43S\17V[t$dZ=Y==;j)a"Y:+Pb6!ua/3q#!O9H1H%D0eE/</a,Ju-<_%p0bDPm&^ujVEHE_>P0$NLS*2Q:CK'?tj`^"\YW\03B-:
%Q3iks$9H#OLb9DnNU0PuV%I%f?tfb1$C4/#WF0ECQO9$JE2d5Z"ID#K)QBPC9-^sr?tmQF$C4.tWF0GYQ3rpICoLfV7$efCNT<um
%V%Hu_=;oS`Ju'&b.TdV:V1PNU>q/qpiMETi#!C-YU'WFe/?M5]$'n&"WF0ECQO9$Z+cm\07WtcIdYKMu=B^DF&hK%';SgdP/eops
%jANhBN*NC/1P.4*V%&_KE(_4;<hYWY9,kC;%SIbNV'=PY,70YoJ4lGB96R:3Ce67%=IP@FojJ%t)p"kMfTKJh0ZOC[T"l=6QTCLd
%m*Z+#J4:/&D;^^@/8a=2MIB/dTYMOX$b#HCKU+Z`KA9@WEfaJiYdAsblEIXH=t5+UooTNge46tCR,Ck4Efc[KYV_M9"\U)N<3S3B
%9/dH!5qWm'NU5't9-^sr@;4eg$C4/!WF0H$Q3rpIDQ.#XjH_hXNTa8mV3,$JYV^r)"\U)M<3S329*Is5\5][hP"Qg]7W`?sV3+t3
%=;n`HJu+T6.TdV"V1PP+>:N_n_5.W7,J2H5BdB#PQ:>no?tgmQ$C4/%WF0EcQO9$JFK*1+a=_>61ic4m9-^oFYV_*gJu(3M(+bGb
%G(ZX=8U"8TZgS)kUR*T8)Qe+td[5=s/<*-1?to8\%@5#H]>N'aFVcTg2S*:1FO:7bA("Ye1j\A;V9qVJYVbLs*L9.s?*H/Sk^oWc
%gFcSH9m"5"kb1'hN=NP9d[4`m=;j>E_:%P@$^Sdp]3o@Fcim(;L$l0%VV)n>NV9njC%T^T94NQZYV[]Z"\YV=/m'%JF,-SH]l(&2
%]'"[Ad68?tNN%':dV,6\Q:CURYV`6.*L91d]YW$0SI:`QlWgYNk0sQ-UNJ1k)P(pig64cZbA%X4eR<1ab6+&b<-l@.-F1\I.@\C#
%F"^rGJ?2sdYf[,B,F1tt)$7$mV'1[:YV]h"jHLel$Wn=1kT,sY.[S'$a=WZU7W,25C#kT&.3l<$YV^Anh(9k_eD)gB9-'<fE2h&:
%JkI,M2LnG3Q4[AJQ#dIVWS:uPQX5`8>:Q\4geq9d/9c;?g/.5jX,I5N%SIbVV/DX)inY`cXEU"67WPKGdY<?tLSYFpmg_u0aJBA>
%)f+<T/fSQ^VniEN/<(.L?ti!E]>N'OMKaiPdJe$f[%Z@4&[ncb+3p^_ZE5.5(5ZkEd^\iP/<.hk^s\Um%TqGhWD'NQ0#@fc@kueI
%Bj?2kQGt41?ti;G#:tkVm!tpP+a-s+fAQp,@j9Z9Bj?5lQGtdA?tmhq#:tj-EPU#4(-=(,q.t\[E?Pfo)HYpKV/\'s=;k,l!DDI)
%*3_9&a::jQ;S0cnL7Mt/V%$YT"A9^-SdC]@Cd/RaD:jLg=PBtic%$bN4uB%D&)5HqdN/%TWQp&6d0*)]p7_kZ2XErg$nDDkfB/K8
%J@N&/?irL!7BRT^0u;;J2?tdm$Zs24\3dZE@q'e)ME;U:J>I7.%TjY@g&Xk,+s!mEY1!\M6XneYBiq599>`6MYV[W5':-Xq[t(<[
%i[nPPXE\eg)KOPi(UiG6_F8j<jJ`HOL2;%MdTGiOYV[--"Y:,9Cr+P%lt6&<QF[5NNO<X)91(0j@;.99$Wn=*h#`ms>dhPuL17W%
%gnGRg2!2%FQ8Xu=$'mK6\d=\B7!=3Z%:sG&j'\.A-';<i-<M0bfE"Vai%-'m&C."4&i/)D9,l5/Sjaio7Bj.McQZKF!,)rqD'61k
%b<\IQP"?q+1b8mr/=oBVT#G,P".r#],k>(XQ8\58PY*-l7B%R'=U`M?4GtSM88&U&K8:9hPDEml=PA:=;)3ua(>Hej&6`6iM0Kf^
%-'?Lt/dL01_:"]X(+bGleHANTIbA.D9J7>9N>pCN9B/K!_:"]\(+bG*B#2p*<DB\Sk*R0T`Y<KHV/_ij?tmh=$^Sd@ZX@M&V^>La
%1X+qrEnk);9J.88N>p@M94NERYVbL/"\[k[28R_.?T)")Zc`hOj5)W/d[4>V/<0I:_:#hN9s?Hl9bT(;q;hfR@rBt.C#"n!=;peS
%Ju(3:/6EhbU^<@,r3B^EbV'ndN>p:cQH&9s?tmh<$^Sg1Z=%D%NY\iUpnr_?_*77j1jBskV%I,`=;hcpJu-<<#ZquWG(QP&@HXjO
%Ql?N.j,SS*A;5RPYVc-Q!DC<?[",!h57L^5GP4*L%JFLkV%)2UI3UPWoa@(?"EVB,\?0*q52=_=reS[-LSZ`7Cp5ba2\Ra%l".]Z
%QsLOZNP!F<94N;$?ti:e4"Q@1blgZYkbU<MOml6hLId#fN^L`;1VqKDI-Ge/@HOdNDD2_TD#fpf5X]Wc*L=_$AV-`fgesu3a=ak&
%&]q9K6kUA\3Y7G7;Gl:B/p1872jOc92NUR+S^Go(YdAscC7`Cp/bK_uHJ3tI%G4Q3nJP.TSkYr[mBEqu?/!9N5V@1])GP(bdcbER
%QH!<9YV\huJu-lFG$#Y-l39mk0J-BF9l7_p(eP1%`^j:;1qMBMQGu2D@;-.F%@5!N>-KhEg4H.UJefns!OQ6K['U:.`YdE<BoJ\g
%9;A14=;p44_9s/a$^O7\>HfrQg's@fi7VOQ%%RPpUS08A)?XWgdMOnNQ:=MOYV_*[#"rI]m'&>Cfn-%TBGN.Y0sb8%%%.8lUT*Xb
%1ks6aQH"a6@;3*U"\W@8/6Egcjaa2DeIG\"=Y?l#aDs"@#"q$cB`lJrFW!b'dUa]78=.0C%TjWH0!<ESE]N#O6T\[i`4/@'&`Y'8
%#$3loBaBna/.FnN?tlEW)(Z5GG/2PIj:X#'9J1$7=PAA'0fh3p)WP=_V:!U)/<.KN?tkRZ"\YVi/Q`q/A&6S1+#d:?ULT(UdE`RZ
%NM3UbBaft)9;A=8=;lg%_9s/@)_?uBZ,>!,(^lYL\6,sl`l3P+0eO4mNNob+dMNqTITa\0Ju(1S(+bGbZ!_:)Mk;E1IUp(&Js-tH
%f&WV](_0:ZULC@S`q^]>d`smh*DXC*CE<"t.VndC:h;5VNMg^fcd!Zc/$lS!qDrY#F@&I:^5(#,aQdM[dTBg-:)\cBGo>VuH-lq'
%!@2aS%"d>=2;-bdmpU>S<f<0]\6#1W`kD!3a)=D-jtLa=^"6b842'gEGdN6r1nO%W,E2qT/38)-4M7qlg<G<pLZ"HMa<@JnS#:Q,
%p^W()pa@hU?k+)r#i.c++Wd48AYc@NC]qAM_$7m6[l"Z3Y&i$G@+S&U!GemJU0R_7#.\a+<ckh8UClYR:`Y;$3`CfBY&i#n7NJ!U
%P"8T(%4.YKm*$7K-]OijS?r;cWZEp&&=bSW*c]W,H;oQgklQ,<e3)`dO[^fq)JQ#,UnO;>3,'qAG41C?e1/CK0sq88XJY\7@6(_T
%Be6.t-]R6;ihWiLg<Z0r279&[c!kEPAW$01I`N5hWL]52e5JFVNV1f\UbUf`</QZ&[T&*Sjj_RIA&.E#[,HhCWmB";C2q[(:[OZ/
%L:b`&)iiQK+a-mb4"$!gYB/.3"1ES::erZ<)WTXZV:[b;99n.4:$nH-`k0Mf)\1OV:>0[.Q?1JV9eB*YUL!&YEC[D5$Oh9NPK&.)
%3GD/1Mj)/*=.D+e]AfV@Km_FUe[_>YF_Z%OC<fC\qUdfB9HK+U2@rKOP;[APSWh%rZ8cQWGK!-`bj1cUVN7:3`e[]d1e,.;UbR-G
%:)]m6ERG]t3[]o,YB/-Z3>O!%@BVY)%"#rbA)^U\1^:\RU^b6VkG0hT/5Fn!9Q<h]^e8Y[#4ojN8RpmB3,&IL7@^^cRGs_nk)RDP
%)h9At_AIMHNl#2l3&kUS0L_M=JXGGe1a\:&8K31/c:Jt".?;7^GU\Zi@.lQ>B`g%XS@!j7ig_j&O2X[0J17gL0]8c5Kn8$!E72g#
%#u2Ci.D\SCr\ulO'8^5E8L&LRS2?D<7)D4_3&t[UDZqMJi%8rsO@'LQ)R3N+U`hQ):)Xbd_+C+f)\XT9->cGH1ig'WPD1?'Emi%b
%&gr[o/[7!k65Cr.;0$X((aoV:NJZ`SUbPm[:)\arERG[TMj).g3B1`3Q@kC@O?#:7%%;g4`i(mWBagKM8RpC(:)_#^ERG[^Mj)/r
%3B1^]SV*-GfJtp*%%bF0A+2$E)M;[BdMP-*PK!kh3,&epK9O:l>+@Fhd,LiUL)).rfk#0OQsLOUN=g;PdY<Q]S2<^cihS<F/5@*N
%CN7c>>Dn]b1imWa(g[FpNA5Tqd[4_a-]QN^3,&f1`CXRF=e%;qRtHn_"Pi"4%:Q_ed[4nf-Z+[PSWbsbhTe]&c<6[E+nc[!D%+.L
%PK']13,(_cm[UX-#'Wf\K5bhY#!/c*dKVb43,&I9<LgFIO6W7BJWK)dZiQ6QS@!j-lC>3^N[dfX5XuP:D8;p(P;_o-SWbu$;4Wn/
%i)-&/2UG<lP;^cb`CV$<W8aT^HrT:)%=D.<U^_]NkG/Q3<9L%dFB%G!%<PQhdKVh63,&I:<Lbo:;8l*O+'"gf,43<?@s)-tdTG<A
%S2B:TP*<oN5&o"Qga>i8Oqb`(@sst/Bfp#a3,(Kf1H9(R!H67Tj"[%_Up7F*S2?hE.8Cd3r5;0:JR<BEGg9o?dTGET:)`Hq>T=7:
%CcWq\3,?u'BhVQcP;\r<.8JT9d\]!<9NR.92Oq5?ic$kpdlD-d=GrB_!'WAV%,li&`gh0jd[7BW-]M!93,&f]`CXS%>+@DRo"dn-
%-m+s9k,uZp@k99.)M<<Td[7]`-]R)t3,+?7K9O<24ud7M@#L5gOC"G6B!D<T8c'GSc!LF0PP-q1g>=l(J)d@'NK`Mnqu;M:7UmQ#
%BljQBP=BHjS@#gI?M7gb[skZSs#33lRY^1""DCtS9B_c1Jg&.7(KIo0`2Jql8L+_HH;4OO0/'>AD$aIRU<9?1DF;mO>9'*_RdrqN
%rH3/2XJD$%7aSNn(=2%fQ)uWhBX<a)&7Za$Su;!91p&XsED,EE*dC!"RS6<tS(F0I.)kb/9$/SKdoot=gNMJcQacM'Om.Ip[C1H,
%5L""SL/[94KCYmkapgcqLX&UaA^iF]FrZsZCoFI57HK7BZ)FTh_.-GDU'N+r.T&k$I#amSdRu&eWaiY+>>nG@<)Et]M!kI`D$a:e
%MTV`[WM1#9&lho.K@s&pgTlE*cnlMI$C]OiVT!EIam%Op8S50)KL?P3XgR8#?+!Zf\ST=b;9#b9<=+=U<)mP`g_s1XBtCBC<LGY"
%TP7+(a,P=L-%p8jVR>%G9WG)IH,>s#<'ihXRb$1J_sTCI4*&pDG\Vdsdoo[4d:2u590SCd.\Xca9l"U&>P!`p4iNAQBb]n<9l"K,
%$#.,9'>uV*<"bh$MTS(`#XQq.fT2q.74##_6.9"AN,C/Fgf$<q1lXeQTP:M[DF5_84#pq+9M+RaTOS43anIIW=h/4m1m[&\1p$p$
%nOQt`g"KnO*Lb!`7*r:VQfMXJe"c3EG:o'm=QfZEH"424o4FhpTP:M)'f<&#`A<@sER"-4TP9@=*1GHIii/pZVKaGkWas$nBNf2p
%B=^PHPn2sW*K#j.!-G#L^C&>M`LL]KFJS"GBNg>-@V?dNf%T,O]V^iHg'U)8_UZ(9Z6^Z2]3X=,3h0]t9jE)t2E[&(>AtD_:$]DS
%FVB@J>^8s"Hjfu5d'UM91u;3E"0h0Gk9-X!G`F;q@D[(jZXQq]1mVIOr]2)mGRb]ekhB>ZLC0L$g(Ha7WpB^F:oXr_lDhP>KU",q
%m%#!$EkBt.d'V@>O0n4Lc4n3KVD7]X1p+/3rG5PgS6WMg&0D:Kf&G_;,_Mu%[cEEN,f;TFd'V@>U[*;f(0egh\M-Ag\j=eK9@DC]
%5'*NA&2]A4\Y*Z=/T8R]f`CKuJ.BTe%S^_5Gp>h/*CK/>1fh@!Rb!)f!/sO9*RG:ZAM=-'1p+asnOP:UNmtZF9qt9&BNf2pU+h4s
%2<,ft_F_0i'*M$FD,FDNRujNn.m#S)+O)l&XgKIkb[\14Q%P`D"-H%ugBhtu8UCJ93AbCf]aKUmp$Km_44Bm;Xf]Ut4MW9"7[oGd
%J=8m3SLP](2BWZc@jKe81oK$9!Mj`I1i6X^3&IbF`?Cr/I6?W-Rt@Nb;fQJSCJ%Qq]h\(Ml5pQ'N^M9!>Jep6+-)QqJu0!%*f$UM
%F!`!P2BYfI**n3M_SHg@XgQ,(3Adk+3f.():\5nhXgQ-#3Adj`5B.p.ZR$E$Z*KLFTc#\h[3\Ag2ZpiM&i?_uj[6T)2J:iiK;K**
%+]DsS.5>JA1CTFHB$dmc6KHM#juapuc*t7-W>bt7)dl+CcXfj9etHf+K6l>;mN&*]-"pIt9;7noF.$)lQ#C^er5bRGXY"O(F+4XT
%RZ.LO8IeI1D/gL)9l"T#Yd)G!9a<u5RV`h$V6)?unFs%;TIh$<X]]EG@(Z8SUtuhCD1FC\:)<uO*5Oi%VLa_R?.<Ct+N5SE5*qMG
%>O6D3i5q[,I2@CG:]"D4hK*Aa!/&^+(Egu6/o*$FGgfD(*0BO6Zt9a/1MNa[q@6`rF9,OeTkVb:9L>25r@d+-D7AG%Y0'pPK%.I*
%IfU3ZqcjE+E`L]Enn_la*KRSp\aN$_L<]dE:=-?oF[JFCLqD@SS<;/Q=d>X3)DmFU/;L)S^q0oA[\Qh;cnq=0/SNk$H%CLC/O26%
%RPl-9II460Tkr+[5^3u"N?Bi>dh[Jq"AN+97hdds32>39Z]p[a%S\H&*!At\e4\/q!pLh@>(Lc,1_&kj5gp(9K1")pPf$N#YO97d
%ZkOnn6.61:K:lp<4?K3M"k#]`Zi]LMcnq-3%S\IH":CSu+<:SZKB!ru['J[\"AOMl#\Y-`K:lp-*=SC&\fmb]"J#jfQJ*LUBk`hY
%1lXm[gJ!op2M\/8E=7Gs=ke;t?CI=,]a1q&G=ZaXCWp%sPLBm*]HF*]qhJWRbf3T+Y1gbrOH["/a=@YL7`*ZFSCSSl:$-`F@7O5^
%MLhlGjL!K_Mju\A?)gpLQ#*m/H^U%;VOZ0:8b;:dfi+OK3N^h5jg-s-D:f>0jKnu0DfOb@8l\8S@qeu*dgF=4+K#saHU1D:'j$LG
%b+=*$:/3=qj\sVdCr6U#>(OX/jKnuL0?@iY$4ClX.gjJ_4#A^kVK)G:\T#"'F&1I&jKu2pW[2[(2h;,mXYhF<X_MBCT$teqX@72N
%>&/G9S6"SA"Z_Q2CI(]GnG@g-ef'`Q2JHtmXulM2H`E^W&),^Q_%Jbf2/kiV/$Sr'SCSUBI\tqkADm\P%G%/8e#oW(EcN(5lB7Z\
%:%=h9Zmu,]5u,<]\Kn)hr"D("mU%?>TgDQ91`1^6::h-H-?:"sq3%7kXgf&3o=P]Yk1CR@r/@.h"i<"8C%2.cSAs9u+K&LD'I>d,
%H5AT$<J4+B];"$D0E=jGc9tDP7PMntf9A]q::mAU8obhC&e>*+,]h5kh\CogRVBU,`?;(p##''kQ*<%\J1*;^EnWBLLe^],;AP+Z
%7QsV0dpN>+3UO>7S48a(aD#SqK:I+HY]_%,5Aj^GWTSo(G,.))EZ0*n#!!-!@$&iF"pR)IoH5BV*FN<dEre3RaD"$NM4A_hR3cn-
%O[k'-3K5R6hq*8:W<Ac^G2t(r,,\i[B9:T&/bUOr3=T"sOOH`YMK=#ml13*D#C(<=$kMhtg>%):JIb%A47Z(++K&Z.BTU]S+fI:X
%09-,FAf?afV<2(!%MUq*:-dUR3BWre3B=3:H,`7/F*R9"Pg7>tRRq/]bW3%Z##?;?,'"UrZ^*S(LWhV?bQ(\:aCtb@WN3Qjjd?lZ
%:9.<bcm!MaJ:l9)4B%gZ+`^bWng#$6e$t<:jL!4fM>,]+g0<XFJLoopS*NI7RNKC&Xgeg)c%$3P*PsULGUu(4B?KgUN1@nI]1u,%
%h$m?4'(i2K-69ukU6UqklGQuoILOO*cCcVr!IV</`o)(g5D<amj(^tWj'H/VdqZ>ne`K@qbnD/@cf)^3@OJ'RfRZLeX"XWE:)cH&
%3eq@n_aQsgX)f>H,BDK<jjH.Oh%A.rCcV\KSnm)9D9O<72?Q1:F*M'tMOZR)^2sk2$rGbDpT!IGQ5M]B$nrp(c$9pmOOLcU\-40q
%\oeWcOOIBa=M2u%Bs7]1S49*;PLF-JnO--A62M9TNS#tJe'&5BU6s#9H'V3gdrN@7OjgK/:a2fCo9k3#7YmJRBu'6B3=Yg.aD$<u
%M4Bmp]82uC`tXB#7O";BC#'6RU.s^UGc$%^VD^Yn#Blc(e*99,=W%_<EcP>hniRePe*<*O,Dhr11VQ7PlbKMFg['<lP/D(pN(8F:
%3N]^M,P`K]0EXa=j,%1gVmWr]6?6d@QTUC%j><G\k2`o#<9%i'^Xd7XSAkZP6r%N7-/Rft9J*4a6r)c.AW<3\i<D>'XY+.soi2AI
%R>IG7QdcHgV_ol(4HF85Sp2T&>$Y#b(ce^l]AetN#TatF-?<:D)(9N/Kc):Z)UD4n3N\T0dRWB*=scAa0q>W5jL!XS5edaEAK;Yc
%]6-uj"5-(;X7-0Z:9-&N78DmZD+7:$"V<9/-In:-60'komNusXCPuhG;-(:JW13Cr&TJ/JPLE]64BFT`&RM,ods+c\aD%b.0e9tS
%Q'Am)Vt!;<Oje&:l/:X0eeAX+\d[cIM4E.2BlU>Zb=YA3OjeP=S]GL[L7lV%m:T!/1M);Nlrjb0QBVh&VmWsX-E/a?FXM35CQ"mO
%.P%J=)EEetiAip#2'mpXY?DZ+6"r*ERjW5[]>;,df49$D"1]br!II:2CQB(:iL6jFBFm2K:>sC)IO%rgjWJSIXe6M'POUVB*K=/%
%M//ieVVZH9)@uHR3N]^.1O20`[H288.'"kib!fH-m3$FQCQ$4g<CX9\+-'HSV/pZ\CJ3_lnaX\Q"@Z($D=LjDAMplJPLJm66/@=0
%-(`6#C&N5rn%&:>i7MWhVq&r4j]g9eO1O*%/%$%_[`I\V5&Gl"'DSqc^gX'AYV,l&LBuD%gk\n:-0PY_g/-qn>HW3%;\XMfNITh7
%+2N7@[ddUDB2A"tZi^S5"Llte$Ad`k=PPbe6X?&;dfrL%9&-Z6g8hQ`5V!*G$C8c5V["*anS,)jlM.`;2fdIE't<[HXQX\Pg2N^=
%[^3ff&O)13?-ABW>tRq<24%WQp!3^6hb2:'7!_E_g`,5$=NVq;g3@^oI6LD^Z'2)1rd]JZX;`h54t<'W*sA*2T\YX\2C3_h/%J7a
%@5Pg_6O?gk72pg_YJd;RZg"7Dg?=op,>H3<A`pjc#`_^@*\H@"=N0Cs1_t)A].f=AkPK6O82=:)(tc>pe,pDPj3q,Q(&0VMEXA@m
%8hT)O:rjCH1mE#LU1bI,C>K%p_8<+DQ:q!0P]@)&#5^mb1q5Jq:I?j<jG6XW(&0UbEs4`:eQe,1ZXU(SnKo3;0#=X2;lJj8=HdAo
%;9U>6)QUE%:E-=E-4L6]\U6Z(OEETGCUlQ_g2"5W2&Q^uX"\=hqYWJt9)(4nkOLN>DGeY)at:qCoAMqdf@>WY[9SIt7j^9N:Lc,G
%n7bqIA[eoXF6cOq\MaE,RLGh.8hS/^Z'*<#Be8BZ5)mNd_PaZ+CDZ1m1Ru':\![\GI%"&Vq4/Bec)S=U8bb-CkOLOOVm2gdpb^QC
%3BiGa>jaAOR`k58/E_&$)U#[E:LcDOn7bqKjnH1k2mgS7$(khk>i'W0PEaq!j3q,XjnLZ5F:"SZMD!l:=OAFB)CrCP:Lch[j3t*(
%bAPVqBi`[D9q-I=`cDHY`gSO=dob'FHl?e3KMQ)PQge\kQ-&Q1/F4!5bmM'@Df\050C2S@&V"MPB+'*UQ$-`6o9URD*1t710&b8]
%hBdOfbI`F'@sM/6dobKBpbXMjo%S/3RMC(Hc1#FJiK\88^Fu0SKT(UU[Glf@-BIY1",BMD1tHpYT>k%fiR:oq-%)/HHg,DfT4\'t
%[+X)JGWOg4;"'\E1_b<@5)oIjiR?`U"?m8P?\)!?bu`oR;"U%JZsNFepF(EX=Zt/E@rooX'0Zl%?\(utGt[oh\35[EKADad1_bEc
%4q6U\M,-JB=Q%YS$.p#1I<<^,nM\FcRI0$O_P\"B(&0U&5D`0go98r+e:Iif%CKSp:I?^9imU^4QM@gn%CS^#%oA.E`2Alb+,Nc\
%9j$?&hua-HNGLB/dng^Dpp=!C^o+"5!BptZ^;QqG%S;%O$B`9)V%?4G)CSI6:EpQ*n7c82-9a#hoS?:AS+(-B"q$u'%c!'(dn8nf
%^o*G3,`,;I#9GPfB`t^JT*>^4i6q[K$@LQ\:f@'Fi!L-i#!?PXe)n<6`2BFk$%,oNFV=JVRd)0fBb^V9iR;0I,sI=0\A5#mXM,$h
%=p5gDpbYh%".rUm>R*HpVFCl>>"t!>pp:C`ADkodi*F3tO]EiW)@WCVVq'9GJPQA'54E8$,fd]ueJ-\n:TGpE!hWLlWrtVgJf5t`
%)C]sKVnk;aHs07HSbP$LlP#mk+]j=mX,njKVlc%2_PaMt/&J3d:b.)m,G6^ZBe(bGa/?$bRlNZljF#q8<i?bldoNC^iR:?M%t*(<
%YnHi='l$24Zk[=Epp:bI:uTl(,1R[*#(g7BdoM]A"[6cl+]dOM5ktq<g6r@2n7c[\Q,'<".9?SC[\d;$I+h2]S+(.Q:.ZG..9?SC
%#+.d9df=FpI+jHU/E,(/eDZ6[>>qXL5&F$)')8gkjbiPAj<b5+<kreg5-:nSYPF's1R!Mg.f_X65-6]^o19p>'CNlZiAT`l%S%V<
%=:m`V^rF0fQ&U6aj3q2.6*eV>,k?HhWC%dLKMO*`4:%Q;*5pe1['HM@%t%R6;Q9j`c"N5SFEIl;KCERYU^,l-`krfD+.O#p_Pd'9
%Lp/HW%>U]$Zm9Og<.n$t*V\K9-uHJj:/UQVT4b)+80o-gTM["&%CENRVubp'L)R!jqgJpo-C5GIP[p_DJ<C>K!So)W)B^HM:]h"m
%%(--+f!e<4:F6roi1M>_N@_SMW9#*1(i"S:)+0D=3+o/jLXI&T5bS<JNFY%(eF:MA$oQC.P+b>J?"9gM!;nfDD+en[0[pB-'133W
%P[LEjKouj%_X)lJL;+C7W8XpJ$oQs>JtWAg8hebF6V3"NGUU[1!tlmtC4N%#L)LqUc;4TR,oCA9H">33+DEJGC*95r6Od-31"8HW
%EJ>C!.)Aa7#WHf-"gNJbW+#9c1=SQX8VS/ZI_eju*f=L,!KA:X)UTsBW"G"%$oP=fJtY)1"3"(]+se(@A>B>qD4h:QYt3:d(IO1D
%P[LGPPS+B^Z;Q:J7U/P>e-9re(hs2NLnR:GMAU(1iD9q?1/idu7VYOLe-6\_(i&-/LnR:UMAU*hVMLp8DMf9GA>b6W2@pYC:a8+L
%(i%!eLnQ`2(h]D$QuZLA2=a\a:a87p$oK5.JtYYg8hea!\t_(2#Z21$N=ZgZe-62S1Xnrn$&0?q.`"q+9-kEiKW,)ANAQo.W/YI^
%B;cE@&e$WQ<J$o&?mruj,?6$,C;d+T6]G?9A>kWliXE6Zju56jbo^igbti4@m-qAJ;s^*Lh^=!!;Sf<6"(]("+>1C7O]VSZhFm=p
%Hg1(6Qeo:IdW+m$X#D,j040))Xa0p!_uKMsk.C$3?@2:eLC\n6pld@K^>gjgI/`W;a.GKlO4LPZ2m9pheJDTl0j=SHhFm6ae'/,i
%gj<a^^(4M`M%;2q`.upIpS$'\:KoQmEa5M_S3K.!KD)LFs)XgXE,e)AETeM$o"fr7)SGn(h>Z6f@>^X`L3[HWU^"=FIa+'.\EI#?
%qRl,mT"!P:?i6m9gDAN-$%)'ck@TT'BR5n;W)V9#G;S9qB7BXCYPI\A@)JnoAe[Et[,GHRg:Q'FA-DV@jp26aeGt(C8.%0gD3(u>
%SI+YgC[Z#u[Egr:f>$GRBU^in"1p%(nU''[W7HrDmqR33n%eHp*J&K\phR'<`8+W"+)ubhjU41eRJrWcgO5/!)Y9)$-TReD)tC"T
%q43Ku1(6r_jhI4O0D720ju[Tj$TA2j!BasS?$fZ-Mi>I#,fqu#!h0iK3V.);_oD&>[WOhFfsQ%3]u\E!Su/-oOV+N%Ar/S4:(R'3
%5cfrGgWEE"^\4fg>l2_in2.EEoF[I/4q07,25bTgXX]rUgH#V*mNgW9'N[K0j4!@?VOQ/cc&^S.IWO!#`]r8&e'1\V9n0!dGgD2m
%;nn$uH@,3m<0mI#NI63<NQ?;A]$Ks(PFXo1K:h+_T:u#ZFMlI7dV&I#GZn2\EUCFUMmLRTV"Y7FkgS&J'7\-ml5Mnc;9`G)gIT7$
%d<`FLL@j/:ltI[80/f=rdr6u2U%N,'l"^dlc%hdNj#*o<gZpSq'jL*uF]dtY<6T4RjTW]`RrC%Gf5r[;5.J)kr%Z9>IH%jXD)TJu
%D".!cYJ'qs=$QKHj0(ZDiphXSs4D5bjc<a4cM%&uYI9qto!?B/hRrF!)m=bhnaA\lpPZ3r[.h;gDY<+PpA+UgIeVfR7lRWarml)\
%f&sgHileNChY?+)O$EHrc+BTrqWk?_NL+pj:OhQ^%tCE72AGWVoQU<$Mr4@M>9`T5]^^t7^A@,Qci(QWf_tt'm-QaWL=b<d5Pj@!
%:YpQia+n#./n`)Fs75*sLHk\,_.SfMIX1CY:Oi,ss$")@nG%!MieP93Irt;HQOeRiriR=!r9i0Dr1UO*MrK>T?iK"[hn8^3rr]20a>j~>
%AI9_PrivateDataEnd

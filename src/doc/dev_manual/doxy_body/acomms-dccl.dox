
/*! \page acomms_dccl goby-acomms: DCCL (Dynamic Compact Control Language)

Table of contents for libdccl:
<ul>
<li> \ref dccl_designing
<li> \ref dccl_codec
<li> \ref dccl_options
<li> \ref dccl_encrypt
<li> \ref dccl_examples 
</ul>

Return to \ref acomms.

\section dccl_designing Designing a message

DCCL uses the Google Protocol Buffers (Protobuf) language to define messages. DCCL specific components are defined as extensions to the Protobuf language \ref dccl_options "message and field options". You should familiarize yourself with basic Protobuf using before reading the rest of this document: see \ref protobuf and <http://code.google.com/apis/protocolbuffers/docs/overview.html>. 

<b>Scenario 1: Send a string command to a vehicle</b>: 

We need to send an ASCII string command to an underwater vehicle. We thus make a Protobuf message with a single string field (let's call it "telegram") to hold our command:

\verbatim
message Simple
{  
  required string telegram = 1;
}
\endverbatim

The "= 1" indicates that this is the first field on the wire in our DCCL message. All fields must have a unique index, but otherwise these index values are not particularly important. "required" means a valid "Simple" message always contains something for "telegram" (could be an empty string).

To turn this Protobuf message into a DCCL message, we need to add a few options. All the options are defined in acomms_option_extensions.proto so we include that:

\verbatim
import "goby/protobuf/option_extensions.proto";

message Simple
{  
  required string telegram = 1;
}
\endverbatim

At a minimum we must give a unique ID for our DCCL message and a maximum number of bytes we allow the message to be before throwing an exception when it is loaded. This allows us to ensure that we are not creating messages larger than we can send with the physical hardware. We want to have the ability to use the lowest rate WHOI Micro-Modem message size, so we pick max_bytes to be 32. We are testing so we'll use an id of 124. See http://gobysoft.org/wiki/DcclIdTable for a list of the assigned DCCL IDs.

After these additions we have:

\verbatim
import "goby/protobuf/option_extensions.proto";

message Simple
{  
  option (dccl.msg).id = 124;
  option (dccl.msg).max_bytes = 32;

  required string telegram = 1;
}
\endverbatim

Finally, we need to pick an encoder/decoder (codec) for each field in our message. DCCL comes with defaults for all the Protobuf types. So if we don't specifically list a codec for a given field, the default is used. The default "string" codec is goby::acomms::DCCLDefaultStringCodec and is variable length. It uses one byte to list the length of the string and then up to 255 bytes to hold the contents. To ensure we stay within our bounds for the entire message (<tt>(goby.msg).dccl.max_bytes = 32</tt>), we have to give a maximum allowed length for a string when using the DCCLDefaultStringCodec (<tt>(goby.field).dccl.max_length</tt>). 

\verbinclude acomms/dccl/dccl_simple/simple.proto

See \ref acomms/dccl/dccl_simple/dccl_simple.cpp "dccl_simple.cpp" for an example of how to use this message.

<b>Scenario 2: Send a more realistic command and receive a status message from the vehicle</b>:

We want to be able to command our vehicle (to which we have assigned an ID number of "2") to go to a specific point on a local XY grid (meters from some known latitude / longitude), but no more than 10 kilometers from the datum. We also want to be able to turn the lights on or off, and send a short string for other new instructions. Finally, we need to be able to command a speed. Our vehicle can move no faster than 3 m/s, but its control is precise enough to handle hundredths of a m/s (wow!). It's probably easiest to make a table with our conditions:

<table border=1>
  <tr>
    <td><strong>message variable name</strong></td>
    <td><strong>description</strong></td>
    <td><strong>type</strong></td>
    <td><strong>bounds</strong></td>
  </tr>
  <tr>
    <td>destination</td>
    <td>id number of the vehicle we are commanding</td>
    <td>int32</td>
    <td>[0, 31]</td>
  </tr>
  <tr>
    <td>goto_x</td>
    <td>meters east to transit from datum</td>
    <td>int32</td>
    <td>[0, 10000]</td>
  </tr>
  <tr>
    <td>goto_y</td>
    <td>meters north to transit from datum</td>
    <td>int32</td>
    <td>[0, 10000]</td>
  </tr>
  <tr>
    <td>lights_on</td>
    <td>turn on the lights?</td>
    <td>bool</td>
    <td></td>
  </tr>
  <tr>
    <td>new_instructions</td>
    <td>string instructions</td>
    <td>string</td>
    <td>no longer than 10 characters</td>
  </tr>
  <tr>
    <td>goto_speed</td>
    <td>transit speed (m/s)</td>
    <td>float</td>
    <td>[0.00, 3.00]</td>
  </tr>
</table>

Taking all this into account, we form the first message (named GoToCommand) in the file two_message.proto (see \ref dccl_examples_two_message)

We choose a <tt>dccl.id</tt> of 125 to avoid conflicting with the message from Scenario 1 (simple.proto) and a <tt>dccl.max_bytes</tt> of 32 bytes to again allow sending in the WHOI Micro-Modem rate 0 packet.

Now, for the second message in two_message.proto. We want to receive the vehicle's present position and its current health, which can either be "good", "low_battery" or "abort". We make a similar table to before:

<table border=1>
  <tr>
    <td><strong>message variable name</strong></td>
    <td><strong>description</strong></td>
    <td><strong>type</strong></td>
    <td><strong>bounds</strong></td>
  </tr>
  <tr>
    <td>nav_x</td>
    <td>current vehicle position (meters east of the datum)</td>
    <td>integer</td>
    <td>[0, 10000]</td>
  </tr>
  <tr>
    <td>nav_y</td>
    <td>current vehicle position (meters north of the datum)</td>
    <td>integer</td>
    <td>[0, 10000]</td>
  </tr>
  <tr>
    <td>health</td>
    <td>vehicle state</td>
    <td>enumeration</td>
    <td>HEALTH_GOOD, HEALTH_LOW_BATTERY, or HEALTH_ABORT</td>
  </tr>
</table>

The resulting message, can be seen under \ref dccl_examples_two_message. An example of how to use this message is given under \ref acomms/dccl/two_message/two_message.cpp "two_message.cpp".

You can run <tt>analyze_dccl</tt> to view more information on your messages:
\code
> analyze_dccl /path/to/two_message.proto
\endcode
 When I ran the above command I got:

\verbatim
read in: two_message.proto
=== Begin DCCLCodec ===
2 messages loaded.
= Begin GoToCommand =
Actual maximum size of message: 18 bytes / 144 bits [dccl.id head: 8, user head: 0, body: 131, padding: 5]
Allowed maximum size of message: 32 bytes / 256 bits
== Begin Header ==
== End Header ==
== Begin Body ==
GoToCommand
 required int32 destination = 1;
 :: size = 5 bit(s)
 required int32 goto_x = 3;
 :: size = 14 bit(s)
 required int32 goto_y = 4;
 :: size = 14 bit(s)
 required bool lights_on = 5;
 :: size = 1 bit(s)
 required string new_instructions = 6;
 :: min size = 8 bit(s)
 :: max size = 88 bit(s)
 required double goto_speed = 7;
 :: size = 9 bit(s)
:: min size = 51 bit(s)
:: max size = 131 bit(s)
== End Body ==
= End GoToCommand =
= Begin VehicleStatus =
Actual maximum size of message: 6 bytes / 48 bits [dccl.id head: 8, user head: 0, body: 36, padding: 4]
Allowed maximum size of message: 32 bytes / 256 bits
== Begin Header ==
== End Header ==
== Begin Body ==
VehicleStatus
 required double nav_x = 1;
 :: size = 17 bit(s)
 required double nav_y = 2;
 :: size = 17 bit(s)
 required .VehicleStatus.HealthEnum health = 3;
 :: size = 2 bit(s)
:: size = 36 bit(s)
== End Body ==
= End VehicleStatus =
=== End DCCLCodec ===
\endverbatim

Besides validity checking, the most useful feature of <tt>analyze_dccl</tt> is the calculation of the size (in bits) of each message variable. This lets you see which fields in the message are too big. To make fields smaller, tighten up bounds.

\section dccl_options DCCL Protobuf Options

This section gives an overview of the DCCL message and field options available for use with DCCL and the default field codecs. The full list is available in option_extensions.proto (as messages DCCLFieldOptions and DCCLMessageOptions).

DCCL message options:


<table border=1>
  <tr>
    <td><strong>name</strong></td>
    <td><strong>type</strong></td>
    <td><strong>default</strong></td>
    <td><strong>description</strong></td>
  </tr>
  <tr>
    <td>id</td>
    <td>uint32</td>
    <td><i>required</i></td>
    <td>A unique ID for each DCCL message</td>
  </tr>
  <tr>
    <td>max_bytes</td>
    <td>uint32</td>
    <td><i>required</i></td>
    <td>Maximum allowed size in bytes for the encoded message</td>
  </tr>
  <tr>
    <td>codec</td>
    <td>string</td>
    <td>"_default"</td>
    <td>Name of the codec to use for encoding the base message (add more codecs with goby::acomms::DCCLFieldCodecManager::add())</td>
  </tr>
</table>

DCCL field options:

<table border=1>
  <tr>
    <td><strong>name</strong></td>
    <td><strong>type</strong></td>
    <td><strong>default</strong></td>
    <td><strong>required for codecs</strong></td>
    <td><strong>description</strong></td>
  </tr>
  <tr>
    <td>codec</td>
    <td>string</td>
    <td>"_default"</td>
    <td>optional</td>
    <td>Name of the codec to use for encoding this field</td>
  </tr>
  <tr>
    <td>omit</td>
    <td>bool</td>
    <td>false</td>
    <td>optional</td>
    <td>Omit this field from all DCCL encoding (has_field() will be false on receipt)</td>
  </tr>
  <tr>
    <td>in_head</td>
    <td>bool</td>
    <td>false</td>
    <td>optional</td>
    <td>Set true for fields in the header (will <i>not</i> be encrypted, rather will be used to create the encrytion IV).</td>
  </tr>
  <tr>
    <td>precision</td>
    <td>int32</td>
    <td>0</td>
    <td>goby::acomms::DCCLDefaultNumericFieldCodec (double, float)</td>
    <td>Number of decimal digits of precision to keep (can be negative).</td>
  </tr>
  <tr>
    <td>min</td>
    <td>double</td>
    <td>0</td>
    <td>goby::acomms::DCCLDefaultNumericFieldCodec (double, float, int32, uint32, int64, uint64, fixed32, fixed64, sfixed32, sfixed64)</td>
    <td>Minimum value that can be encoded in this field.</td>
  </tr>
  <tr>
    <td>max</td>
    <td>double</td>
    <td>0</td>
    <td>goby::acomms::DCCLDefaultNumericFieldCodec (double, float, int32, uint32, int64, uint64, fixed32, fixed64, sfixed32, sfixed64)</td>
    <td>Maximum value that can be encoded in this field.</td>
  </tr>
  <tr>
    <td>static_value</td>
    <td>string</td>
    <td>""</td>
    <td>goby::acomms::DCCLStaticCodec (any type)</td>
    <td>The static value for use on decoding this placeholder field.</td>
  </tr>
  <tr>
    <td>max_length</td>
    <td>uint32</td>
    <td>0</td>
    <td>goby::acomms::DCCLDefaultStringCodec, goby::acomms::DCCLDefaultBytesCodec (string)</td>
    <td>The maximum length of the string that can be stored in this field.</td>
  </tr>
  <tr>
    <td>max_repeat</td>
    <td>uint32</td>
    <td>0</td>
    <td>any `repeated` field</td>
    <td>The maximum length of the `repeated` array (or vector).</td>
  </tr>
</table>

\section dccl_codec Interacting with the DCCLCodec

Using the goby::acomms::DCCLCodec is a fairly straightforward endeavor (this example uses \ref acomms/dccl/dccl_simple/dccl_simple.cpp "dccl_simple.cpp"). First you need to get a pointer to the DCCLCodec singleton:

\code
goby::acomms::DCCLCodec* codec = goby::acomms::DCCLCodec::get();
\endcode

Validate all messages with the DCCLCodec to ensure all bounding constraints are met:

\code 
try 
{
  dccl->validate<Simple>();
}
catch(DCCLException& e)
{
  std::cerr << "Oh no! " << e << std::endl;
  exit(1);
}
\endcode

Then, to encode a message, create a Protobuf message, set its fields and pass it to goby::acomms::DCCLCodec::encode():

\code
Simple message;
message.set_telegram("hello");
std::string bytes;
dccl->encode(&bytes, message);
\endcode

\texttt{bytes} will now contain the encoded message in the form of a byte string (each char will contain a single byte of the message).

You may now send this message through whatever channel you would like.

To decode a message (stored in \texttt{bytes} as a byte string), simply pass bytes as a reference along with pointers to the Protobuf message to store the results.

\code
message.Clear();
dccl->decode(bytes, &message);
\endcode

For line by line interaction with the goby::acomms::DCCLCodec and for advanced use, investigate the code examples given in the Examples column of this \ref OSI_table "table".

\section dccl_encrypt Encryption
         
Encryption of all messages can be enabled by providing a secret passphrase to the \link dccl.proto goby::acomms::protobuf::DCCLConfig \endlink object passed to goby::acomms::DCCLCodec::set_cfg(). All parties to the communication must have the same secret key. 

DCCL provides AES (Rijndael) encryption for the body of the message. The header, which is sent in plain text, is hashed to form an initialization vector (IV), and the passphrase is hashed using SHA-256 to form the cipher key. You will want to make sure the header (designate fields for the header with <tt>(goby.field).dccl.in_head = true</tt>) is a nonce by including a constantly changing value such as time.

AES is considered secure and is used for United States top secret information.

\section dccl_examples Example messages

This section provides a listing of DCCL example Protobuf messages used in the code examples and unit tests.

\subsection dccl_examples_simple Minimal functional DCCL message

simple.proto
\verbinclude simple.proto

\sa \ref acomms/dccl/dccl_simple/dccl_simple.cpp "dccl_simple.cpp"


\subsection dccl_examples_two_message Two Message example

two_message.proto
\verbinclude two_message.proto

\sa \ref acomms/dccl/two_message/two_message.cpp "two_message.cpp"

<b>Test1 showing all Protobuf types (using default codecs):</b>

dccl1/test.proto
\verbinclude dccl1/test.proto

\sa \ref dccl1/test.cpp

\subsection dccl_examples_test2 DCCL Test2 showing an embedded message encoded by a custom (non-default) codec

dccl2/test.proto
\verbinclude dccl2/test.proto

\sa \ref dccl2/test.cpp

\subsection dccl_examples_test3 DCCL Test3

dccl3/test.proto
\verbinclude dccl3/test.proto
protobuf/header.proto
\verbinclude protobuf/header.proto

\sa \ref dccl3/test.cpp

\subsection dccl_examples_test4 DCCL Test4

dccl4/test.proto
\verbinclude dccl4/test.proto

\sa \ref dccl4/test.cpp

\subsection dccl_examples_test5 DCCL Test5

dccl5/test.proto
\verbinclude dccl5/test.proto

\sa \ref dccl5/test.cpp

\subsection dccl_examples_test6 DCCL Test6

dccl6/test.proto
\verbinclude dccl6/test.proto

\sa \ref dccl6/test.cpp

\subsection dccl_examples_test7 DCCL Test7

dccl7/test.proto
\verbinclude dccl7/test.proto

\sa \ref dccl7/test.cpp

\subsection dccl_examples_test8 DCCL Test8

dccl8/test.proto
\verbinclude dccl8/test.proto

\sa \ref dccl8/test.cpp

\subsection dccl_examples_test9 DCCL Test9

dccl9/test.proto
\verbinclude dccl9/test.proto

\sa \ref dccl9/test.cpp

*/

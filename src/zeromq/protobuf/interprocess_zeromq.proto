syntax = "proto2";
import "goby/protobuf/option_extensions.proto";

package goby.zeromq.protobuf;

enum Request
{
    PROVIDE_PUB_SUB_SOCKETS = 1;  // provide sockets for publish/subscribe
    PROVIDE_HOLD_STATE = 2;  // query if hold has been released so this process
                             // can begin publishing
}

message ManagerRequest
{
    required Request request = 1
        [(goby.field).description =
             "Request to be made of the Manager (gobyd)"];
    required string client_name = 2
        [(goby.field).description =
             "Unique name for the client making the request"];
    required int32 client_pid = 3
        [(goby.field).description =
             "PID for the client making the request"];
    optional bool ready = 4 [
        default = false,
        (goby.field).description =
            "Client is ready to commence accepting publications (all required "
            "subscriptions are complete"
    ];
}

message Socket
{
    enum SocketType
    {
        PUBLISH = 1;
        SUBSCRIBE = 2;
        REPLY = 3;
        REQUEST = 4;
        // PUSH = 5;
        // PULL = 6;
        // DEALER = 7;
        // ROUTER = 8;
    }
    enum Transport
    {
        INPROC = 1;  // intraprocess - interthread communication
        IPC = 2;     // interprocess - uses Unix Sockets
        TCP = 3;
        PGM = 4;   // reliable multicast
        EPGM = 5;  // encapsulated PGM over UDP
    }
    enum ConnectOrBind
    {
        CONNECT = 1;
        BIND = 2;
    }
    required SocketType socket_type = 1;
    optional uint32 socket_id = 2 [
        default = 0,
        (goby.field).description =
            "defines a socket or group of sockets that are send and "
            "receive together. Sockets with the same id that are must be "
            "compatible (generally have the same SocketType)"
    ];
    optional Transport transport = 3 [default = EPGM];
    optional ConnectOrBind connect_or_bind = 4 [default = CONNECT];

    // required for TCP, PGM, EPGM
    optional string ethernet_address = 5 [
        default = "127.0.0.1",
        (goby.field).description =
            "primary IP address of the interface to use"
    ];
    optional string multicast_address = 6 [
        default = "239.255.7.15",
        (goby.field).description =
            "only required if `transport`=PGM or EPGM; multicast IP "
            "address to use; 239.252.0.0-239.255.255.255 is recommended "
            "(site-local). See also "
            "http://www.iana.org/assignments/multicast-addresses/"
            "multicast-addresses.ml"
    ];
    optional uint32 ethernet_port = 7 [default = 11142];

    // required for INPROC, IPC
    optional string socket_name = 8;

    optional uint32 send_queue_size = 10 [default = 1000];
    optional uint32 receive_queue_size = 11 [default = 1000];
}

message ManagerResponse
{
    required Request request = 1;
    required string client_name = 2;
    required int32 client_pid = 3;
    optional Socket publish_socket = 4;
    optional Socket subscribe_socket = 5;
    optional bool hold = 6 [
        default = true,
        (goby.field).description =
            "Used to synchronize start of multiple processes. If true, wait "
            "until receiving a hold == false before publishing data"
    ];
}

message InprocControl
{
    enum InprocControlType
    {
        PUB_CONFIGURATION = 1;  // read -> main
        SUBSCRIBE = 2;          // main -> read
        SUBSCRIBE_ACK = 3;      // read -> main
        UNSUBSCRIBE = 4;        // main -> read
        UNSUBSCRIBE_ACK = 5;    // read -> main
        RECEIVE = 6;            // read -> main
        SHUTDOWN = 7;           // main -> read
        REQUEST_HOLD_STATE = 9; // read -> main
        NOTIFY_HOLD_STATE = 10; // main -> read
    }
    required InprocControlType type = 1;

    optional Socket publish_socket = 2;
    optional bytes subscription_identifier = 3;
    optional bytes received_data = 4;

    optional bool hold = 10;
}

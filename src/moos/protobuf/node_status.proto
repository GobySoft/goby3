import "dccl/protobuf/option_extensions.proto";

package goby.moos.protobuf;

message NodeStatus
{
  option (dccl.msg).id = 20;
  option (dccl.msg).max_bytes = 32;

  required double time = 1 [(dccl.field).codec="_time", (dccl.field).in_head=true];
  required string name = 2 [(dccl.field).codec = "_platform<->modem_id"];

  // defined in goby/core/proto/config.proto
  optional VehicleType type = 3;
  
  // lat, lon, depth
  required GeodeticCoordinate global_fix = 4;  
  // x, y, z on local cartesian grid
  required CartesianCoordinate local_fix = 5;
  
  // roll, pitch, yaw
  required EulerAngles pose = 7;
  
  // speed over ground (not relative to water or surface)
  required double speed = 8 [(dccl.field).max=20.0,
                             (dccl.field).min=-2.0,
                             (dccl.field).precision=1];

  optional SourceSensor speed_source = 9 [(dccl.field).omit=true, default = SOURCE_UNKNOWN];  
  optional double speed_time_lag = 11 [(dccl.field).omit=true];
}

// Type of vehicle for a given node
enum VehicleType { UNKNOWN = 0;
  AUV = 1;
  USV = 2;
  SHIP = 3;
  GLIDER = 4;
  TARGET = 5;
  BUOY = 6;
  OTHER = -1; }

enum SourceSensor {
    SOURCE_UNKNOWN = 0;
    GPS = 1;
    DEAD_RECKONING = 2;
    INERTIAL_MEASUREMENT_UNIT = 3;
    PRESSURE_SENSOR = 4;
    COMPASS = 5;
    SIMULATION = 6;
}

message GeodeticCoordinate
{
  required double lat = 1 [(dccl.field).omit = true]; // dccl sends Cartesian Y
  required double lon = 2 [(dccl.field).omit = true]; // dccl sends Cartesian X
  optional double depth = 3 [default = 0,
                             (dccl.field).max=6400.0,
                             (dccl.field).min=0.0,
                             (dccl.field).precision=1]; // negative of "height"
  optional double altitude = 4 [(dccl.field).max=5000.0,
                                (dccl.field).min=-10.0,
                                (dccl.field).precision=1];

  optional SourceSensor lat_source = 5 [(dccl.field).omit = true, default = SOURCE_UNKNOWN];
  optional SourceSensor lon_source = 6 [(dccl.field).omit = true, default = SOURCE_UNKNOWN];
  optional SourceSensor depth_source = 7 [(dccl.field).omit = true, default = SOURCE_UNKNOWN];
  optional SourceSensor altitude_source = 8 [(dccl.field).omit = true, default = SOURCE_UNKNOWN];

  // time lags (in seconds) from the message Header time
  optional double lat_time_lag = 9 [(dccl.field).omit = true];
  optional double lon_time_lag = 10 [(dccl.field).omit = true];
  optional double depth_time_lag = 11 [(dccl.field).omit = true];
  optional double altitude_time_lag = 12 [(dccl.field).omit = true];
}

// computed from GeodeticCoordinate
message CartesianCoordinate
{
  required double x = 1 [(dccl.field).max=100000,
                         (dccl.field).min=-100000,
                         (dccl.field).precision=0];
  required double y = 2 [(dccl.field).max=100000,
                         (dccl.field).min=-100000,
                         (dccl.field).precision=0];
  optional double z = 3 [default = 0, (dccl.field).omit = true]; // negative of "depth"  
}

// all in degrees
message EulerAngles
{
  optional double roll = 1 [(dccl.field).max=180,
                            (dccl.field).min=-180,
                            (dccl.field).precision=1];
  optional double pitch = 2 [(dccl.field).max=180,
                             (dccl.field).min=-180,
                             (dccl.field).precision=1];
  optional double heading = 3 [(dccl.field).max=360,
                               (dccl.field).min=0,
                               (dccl.field).precision=1]; 

  optional double roll_rate = 4 [(dccl.field).omit=true];
  optional double pitch_rate = 5 [(dccl.field).omit=true];
  optional double heading_rate = 6 [(dccl.field).omit=true];  
  
  optional SourceSensor roll_source = 10 [(dccl.field).omit = true, default = SOURCE_UNKNOWN];
  optional SourceSensor pitch_source = 11 [(dccl.field).omit = true, default = SOURCE_UNKNOWN];
  optional SourceSensor heading_source = 12 [(dccl.field).omit = true, default = SOURCE_UNKNOWN];
  optional SourceSensor roll_rate_source = 13 [(dccl.field).omit = true, default = SOURCE_UNKNOWN];
  optional SourceSensor pitch_rate_source = 14 [(dccl.field).omit = true, default = SOURCE_UNKNOWN];
  optional SourceSensor heading_rate_source = 15 [(dccl.field).omit = true, default = SOURCE_UNKNOWN];

  // time lags (in seconds) from the message Header time
  optional double roll_time_lag = 20 [(dccl.field).omit = true];
  optional double pitch_time_lag = 21 [(dccl.field).omit = true];
  optional double heading_time_lag = 22 [(dccl.field).omit = true];
  optional double roll_rate_time_lag = 23 [(dccl.field).omit = true];
  optional double pitch_rate_time_lag = 24 [(dccl.field).omit = true];
  optional double heading_rate_time_lag = 25 [(dccl.field).omit = true];
}

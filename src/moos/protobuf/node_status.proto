syntax = "proto2";
import "dccl/option_extensions.proto";

package goby.moos.protobuf;

message NodeStatus
{
    option (dccl.msg) = {
        unit_system: "si"
    };

    required double time = 1 [(dccl.field).units.derived_dimensions = "time"];
    optional string name = 2;
    optional VehicleType type = 3;

    // lat, lon, depth
    required LatLonPoint global_fix = 10;
    // x, y, z on local cartesian grid
    required CartesianCoordinate local_fix = 11;

    // roll, pitch, yaw
    required EulerAngles pose = 20;

    required Speed speed = 30;

    optional Source source = 40;
}

// Type of vehicle for a given node
enum VehicleType
{
    UNKNOWN = 0;
    AUV = 10;
    GLIDER = 11;

    USV = 20;
    USV_POWERED = 21;
    USV_SAILING = 22;

    ROV = 30;

    TARGET = 50;

    BUOY = 60;
    MOORING = 61;
    MOORING_SUBSURFACE = 62;
    MOORING_SURFACE = 63;

    SHIP = 100;

    OTHER = -1;
}

message Source
{
    enum Sensor
    {
        GPS = 1;
        USBL = 2;
        LBL = 3;
        INERTIAL_NAVIGATION_SYSTEM = 4;

        PRESSURE = 10;

        DVL = 20;
        RPM_LOOKUP = 30;

        MAGNETIC_COMPASS = 40;
    }

    optional Sensor position = 1;
    optional Sensor depth = 2;
    optional Sensor speed = 3;
    optional Sensor heading = 4;
}

message LatLonPoint
{
    option (dccl.msg).unit_system = "si";

    optional double lat = 1 [(dccl.field) = {units {
                                 derived_dimensions: "plane_angle"
                                 system: "angle::degree"
                             }}];

    optional double lon = 2 [(dccl.field) = {units {
                                 derived_dimensions: "plane_angle"
                                 system: "angle::degree"
                             }}];
    optional double depth = 3
        [(dccl.field).units.derived_dimensions = "length", default = 0];
    optional double altitude = 4
        [(dccl.field).units.derived_dimensions = "length", default = nan];
}

// computed from LatLonPoint
message CartesianCoordinate
{
    option (dccl.msg).unit_system = "si";

    required double x = 1 [(dccl.field).units.derived_dimensions = "length"];
    required double y = 2 [(dccl.field).units.derived_dimensions = "length"];
    optional double z = 3
        [(dccl.field).units.derived_dimensions = "length", default = 0];
}

message EulerAngles
{
    option (dccl.msg).unit_system = "si";

    optional double roll = 1 [(dccl.field) = {units {
                                  derived_dimensions: "plane_angle"
                                  system: "angle::degree"
                              }}];
    optional double pitch = 2 [(dccl.field) = {units {
                                   derived_dimensions: "plane_angle"
                                   system: "angle::degree"
                               }}];
    optional double heading = 3 [(dccl.field) = {units {
                                     derived_dimensions: "plane_angle"
                                     system: "angle::degree"
                                 }}];

    optional double roll_rate = 10 [(dccl.field) = {units {
                                        derived_dimensions: "plane_angle/time"
                                        system: "angle::degree"
                                    }}];
    optional double pitch_rate = 11 [(dccl.field) = {units {
                                         derived_dimensions: "plane_angle/time"
                                         system: "angle::degree"
                                     }}];
    optional double heading_rate = 12
        [(dccl.field) = {units {
             derived_dimensions: "plane_angle/time"
             system: "angle::degree"
         }}];
}

message Speed
{
    option (dccl.msg).unit_system = "si";

    required double over_ground = 1
        [(dccl.field).units.derived_dimensions = "length/time"];
    optional double over_water = 2
        [(dccl.field).units.derived_dimensions = "length/time"];
}

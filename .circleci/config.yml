## Pre-declare environmental variables
environment-template-common: &environment-template-common
  DEBIAN_FRONTEND: "noninteractive"
  DEBIAN_PRIORITY: "critical"
  DEBCONF_NOWARNINGS: "yes"
  DEBFULLNAME: "GobySoft CircleCI"
  DEBEMAIL: "toby@gobysoft.org"
  QUILT_PATCHES: debian/patches
  QUILT_REFRESH_ARGS: "-p ab --no-timestamps --no-index --strip-trailing-whitespace"
  
environment-template-amd64: &environment-template-amd64
  TARGET_ARCH: "amd64"
  # OOM issues on amd64 builds
  DEB_BUILD_OPTIONS: "parallel=3"
  # one job only must do the source build for each distro
  DO_SOURCE_BUILD: "true"

environment-template-arm64: &environment-template-arm64
  TARGET_ARCH: "arm64"
  DEB_BUILD_OPTIONS: "parallel=3 nocheck"
  
environment-template-armhf: &environment-template-armhf
  TARGET_ARCH: "armhf"
  DEB_BUILD_OPTIONS: "parallel=3 nocheck"
  
environment-template-buster: &environment-template-buster
  DISTRO_RELEASE_CODENAME: "buster"
  DISTRO_RELEASE_VERSION: "debian10"

environment-template-bullseye: &environment-template-bullseye
  DISTRO_RELEASE_CODENAME: "bullseye"
  DISTRO_RELEASE_VERSION: "debian11"

environment-template-focal: &environment-template-focal
  DISTRO_RELEASE_CODENAME: "focal"
  DISTRO_RELEASE_VERSION: "ubuntu20.04"

environment-template-jammy: &environment-template-jammy
  DISTRO_RELEASE_CODENAME: "jammy"
  DISTRO_RELEASE_VERSION: "ubuntu22.04"
  
## Pre-declare Docker containers
docker-base-buster: &docker-base-buster
  - image: gobysoft/goby3-debian-build-base:10.1
docker-arm64-buster: &docker-arm64-buster
  - image: gobysoft/goby3-debian-build-arm64:10.1
docker-armhf-buster: &docker-armhf-buster
  - image: gobysoft/goby3-debian-build-armhf:10.1

docker-base-bullseye: &docker-base-bullseye
  - image: gobysoft/goby3-debian-build-base:11.1
docker-arm64-bullseye: &docker-arm64-bullseye
  - image: gobysoft/goby3-debian-build-arm64:11.1
docker-armhf-bullseye: &docker-armhf-bullseye
  - image: gobysoft/goby3-debian-build-armhf:11.1


docker-base-focal: &docker-base-focal
  - image: gobysoft/goby3-ubuntu-build-base:20.04.1
docker-arm64-focal: &docker-arm64-focal
  - image: gobysoft/goby3-ubuntu-build-arm64:20.04.1
docker-armhf-focal: &docker-armhf-focal
  - image: gobysoft/goby3-ubuntu-build-armhf:20.04.1

docker-base-jammy: &docker-base-jammy
  - image: gobysoft/goby3-ubuntu-build-base:22.04.1
docker-arm64-jammy: &docker-arm64-jammy
  - image: gobysoft/goby3-ubuntu-build-arm64:22.04.1
docker-armhf-jammy: &docker-armhf-jammy
  - image: gobysoft/goby3-ubuntu-build-armhf:22.04.1

    
## Pre-declare job templates
job-template-amd64: &job-template-amd64
  working_directory: /root/goby3
  resource_class: large
  steps:
    - checkout
    - run: &run-add-continuous-packages
        name: Add continuous build package sources.list (if not a tagged release)
        command: |
          [ -z "${CIRCLE_TAG}" ] &&
          echo "deb http://packages.gobysoft.org/ubuntu/continuous/ ${DISTRO_RELEASE_CODENAME}/" >> /etc/apt/sources.list.d/gobysoft_continuous.list ||
          true
    - run: &run-update-apt
        name: Update apt packages
        # TODO: Remove libdccl4-dev from this command once all Docker containers are updated to include it
        command: |
          apt-get update && apt-get dist-upgrade -y &&
          (apt-get install default-libmysqlclient-dev:${TARGET_ARCH} -y ||
          apt-get install libmysqlclient-dev:${TARGET_ARCH} -y ||
          apt-get install libmariadb-dev:${TARGET_ARCH} libmariadb-dev-compat:${TARGET_ARCH} default-libmysqlclient-dev:${TARGET_ARCH} -y ||
          apt-get install libmariadbclient-dev:${TARGET_ARCH} libmariadbclient-dev-compat:${TARGET_ARCH} default-libmysqlclient-dev:${TARGET_ARCH} -y)
          apt-get install libdccl4-dev:${TARGET_ARCH} libdccl4:${TARGET_ARCH} dccl4-compiler -y || true
    - run: &run-build
        name: Build
        command: mkdir -p build && cd build && cmake -Denable_testing=ON -Dbuild_doc=ON -Dbuild_doc_pdf=OFF -DCMAKE_BUILD_TYPE=Debug .. && cmake --build . -- -j4
    - run: &run-tests
        name: Run tests
        command: cd build && ctest --output-on-failure

job-template-deb-amd64: &job-template-deb-amd64
  <<: *job-template-amd64
  steps:
    - run: *run-add-continuous-packages
    - run: *run-update-apt
    - run: &run-import-gpg
        name: Import GPG key
        command: echo -e "$GPG_KEY" | gpg --import
    - attach-workspace: &attach-src-workspace
        at: /root/src
    - run: &run-extract-src
        name: Extract the original source tarball
        command: |
          cp /root/src/*.orig.tar.xz ${CIRCLE_WORKING_DIRECTORY}/.. &&
          tar xfJ ../*.orig.tar.xz --strip-components=1
    - run: &run-update-deb
        name: Update the debian source repo and pull the branch with the same name as the project branch (if it exists)
        command: |        
          cd /root/debian &&
          git reset --hard HEAD &&
          git pull &&
          git checkout origin/${CIRCLE_BRANCH} ||
          echo "No branch in debian called ${CIRCLE_BRANCH}, using $(git rev-parse --abbrev-ref HEAD)"
    - run: &run-nest-deb
        name: Nest debian source into project source
        command: |
          mv /root/debian ${CIRCLE_WORKING_DIRECTORY} &&
          cp /root/src/changelog ${CIRCLE_WORKING_DIRECTORY}/debian &&
          sed -i "s/DISTRORELEASEVERSION/${DISTRO_RELEASE_VERSION}/;s/DISTRORELEASECODENAME/${DISTRO_RELEASE_CODENAME}/" ${CIRCLE_WORKING_DIRECTORY}/debian/changelog
    - run: &run-patch-version
        name: Patch the version patch number automatically in CMakeLists.txt
        command: |
          export NEWVERSION="$(echo ../*.orig.tar.xz | sed 's/.*_\(.*\)\.orig\.tar\.xz/\1/')"
          quilt new 01-patch-version
          quilt add CMakeLists.txt
          export NEWVERSION_PATCH=$(echo $NEWVERSION | cut -d . -f 3)
          sed -i "s/^set(GOBY_VERSION_PATCH *\".*\"/set(GOBY_VERSION_PATCH \"${NEWVERSION_PATCH}\"/" CMakeLists.txt
          quilt refresh                  
    - run: &run-build-pkg
        name: Build the Debian package 
        command: |
          export DPKG_BUILDPACKAGE_BUILD_TYPE="-B"
          # default is to do source and binary build
          [[ "${DO_SOURCE_BUILD}" == "true" ]] && DPKG_BUILDPACKAGE_BUILD_TYPE=""        
          CONFIG_SITE=/etc/dpkg-cross/cross-config.${TARGET_ARCH} && dpkg-buildpackage -k19478082E2F8D3FE -a${TARGET_ARCH} ${DPKG_BUILDPACKAGE_BUILD_TYPE}
    - run: &run-store-next-build
        name: Store deb files for next build
        command: |
          mkdir -p /root/deb &&
          find .. -maxdepth 1 -type f -exec cp {}  /root/deb \; &&
          rm -f /root/deb/*-build-deps*.*
    - run: &run-store-for-artifacts
        name: Store deb files for storing artifacts
        command: mkdir -p /tmp/deb && cp /root/deb/* /tmp/deb
    - store_artifacts: &store
        path: /tmp/deb
    - run: &remove-orig-source
        name: Remove original source file to avoid conflicts in merging
        command: |        
          rm -f /root/deb/*.orig.tar.xz || true
    - persist_to_workspace: &persist-debs
        root: /root/deb
        paths:
          - '*.dsc'
          - '*.tar.xz'
          - '*.deb'
          - '*.ddeb'
          - '*.changes'
          - '*.buildinfo'
  
job-template-deb-cross: &job-template-deb-cross
  <<: *job-template-deb-amd64

# base sanitizer off Focal build
job-template-sanitizers: &job-template-sanitizers
  <<: *job-template-amd64
  environment:
    <<: *environment-template-common
    <<: *environment-template-focal
    <<: *environment-template-amd64
    SANITIZER_NUM_JOBS: 4
    TSAN_OPTIONS: "suppressions=/root/goby3/src/test/suppressions.tsan.txt history_size=6"    
  docker: *docker-base-focal

# Base upload off Jammy build
job-template-upload: &job-template-upload
  <<: *job-template-amd64
  docker: *docker-base-jammy
  resource_class: small


  
# which branches to run the Debian build and upload on
filter-template-master-only: &filter-template-master-only
  filters:
    tags:
      only: /.*/
    branches:
      only:
        - "3.0"
        - "3.0-fix-zmq-regression"

filter-template-non-master: &filter-template-non-master
  filters:
    branches:
      ignore:
        - "3.0"
        - "3.0-fix-zmq-regression"
        
## Begin actual config
version: 2
workflows:
  version: 2
  commit:
    jobs:


      - amd64+tsan-build:
          <<: *filter-template-non-master
      - amd64-buster-build:
          <<: *filter-template-non-master
      - amd64-bullseye-build:        
          <<: *filter-template-non-master
      - amd64-focal-build:
          <<: *filter-template-non-master
      - amd64-jammy-build:
          <<: *filter-template-non-master

          
      # - amd64-jammy-minimal-build:
      #     <<: *filter-template-master-only
      
      - get-orig-source:
          <<: *filter-template-master-only

      # - amd64-buster-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source
      # - arm64-buster-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source
      # - armhf-buster-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source

      # - amd64-bullseye-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source
      # - arm64-bullseye-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source
      # - armhf-bullseye-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source


      # - amd64-focal-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source
      # - arm64-focal-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source
      # - armhf-focal-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source
            
      - amd64-jammy-deb-build:
          <<: *filter-template-master-only
          requires:
            - get-orig-source
      # - arm64-jammy-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source
      # - armhf-jammy-deb-build:
      #     <<: *filter-template-master-only
      #     requires:
      #       - get-orig-source
            
      # always do the continuous upload if we did the deb builds
      - continuous-upload:
          requires:
            - amd64-buster-deb-build
            - arm64-buster-deb-build
            - armhf-buster-deb-build
            - amd64-bullseye-deb-build
            - arm64-bullseye-deb-build
            - armhf-bullseye-deb-build
            - amd64-focal-deb-build
            - arm64-focal-deb-build
            - armhf-focal-deb-build
            - amd64-jammy-deb-build
            - arm64-jammy-deb-build
            - armhf-jammy-deb-build

      # only do the release upload on tagged builds
      - release-upload:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
          requires:
            - amd64-buster-deb-build
            - arm64-buster-deb-build
            - armhf-buster-deb-build
            - amd64-bullseye-deb-build
            - arm64-bullseye-deb-build
            - armhf-bullseye-deb-build
            - amd64-focal-deb-build
            - arm64-focal-deb-build
            - armhf-focal-deb-build
            - amd64-jammy-deb-build
            - arm64-jammy-deb-build
            - armhf-jammy-deb-build
            
      # - amd64+scan-build:
      #     <<: *filter-template-master-only
      # - amd64+asan-build:
      #     <<: *filter-template-master-only


#      - amd64+ubsan-build:
#          <<: *filter-template-master-only          
          
jobs:

  get-orig-source:
    <<: *job-template-deb-amd64
    docker: *docker-base-jammy
    environment:
      <<: *environment-template-common
      <<: *environment-template-jammy
      <<: *environment-template-amd64
    steps:
      - checkout
      - run:
          name: Get original source tarball
          command: |
            # use long format for continuous builds so they always rank after release builds
            [ -z "${CIRCLE_TAG}" ] && export DESCRIBE_ARGS="--long" || export DESCRIBE_ARGS=""
            export NEWVERSION="$(git describe --tags HEAD ${DESCRIBE_ARGS} | sed 's/_/~/' | sed 's/-/+/g')"
            git config tar.tar.xz.command "xz -c" &&
            mkdir -p /root/src &&
            git archive --prefix=goby3-${NEWVERSION}/ -o /root/src/goby3_${NEWVERSION}.orig.tar.xz HEAD;
      - run:
          name: Add changelog entry 
          command: |
            cd .. &&
            export NEWVERSION="$(echo /root/src/*.orig.tar.xz | sed 's/.*_\(.*\)\.orig\.tar\.xz/\1/')"
            COMMENT="Autobuild for version ${NEWVERSION}" &&
            dch --newversion=${NEWVERSION}-0~DISTRORELEASEVERSION.1 -D DISTRORELEASECODENAME "${COMMENT}" &&
            cp debian/changelog /root/src
      - store_artifacts:
          path: /root/src
      - persist_to_workspace:
          root: /root/src
          paths:
            - '*.tar.xz'
            - 'changelog'

  amd64-buster-build:
    <<: *job-template-amd64
    docker: *docker-base-buster
    environment:
      <<: *environment-template-common
      <<: *environment-template-buster

  amd64-bullseye-build:
    <<: *job-template-amd64
    docker: *docker-base-bullseye
    environment:
      <<: *environment-template-common
      <<: *environment-template-bullseye
      
  amd64-focal-build:
    <<: *job-template-amd64
    docker: *docker-base-focal
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal

  amd64-jammy-build:
    <<: *job-template-amd64
    docker: *docker-base-jammy
    environment:
      <<: *environment-template-common
      <<: *environment-template-jammy
      
      
  amd64-jammy-minimal-build:
    docker:
      - image: ubuntu:jammy
    working_directory: /root/goby3
    environment:
      DEBIAN_FRONTEND: "noninteractive"
      DEBIAN_PRIORITY: "critical"
    steps:
      - run:
          name: Install packages server
          command: |
            apt-get update && apt-get -y install dirmngr ca-certificates && \
            echo "deb http://packages.gobysoft.org/ubuntu/release/ jammy/" >> /etc/apt/sources.list.d/gobysoft_release.list && \
            apt-key adv --recv-key --keyserver keyserver.ubuntu.com 19478082E2F8D3FE    
      - run: 
          name: Install apt packages
          command: |
            apt-get update &&
            apt-get -y install git build-essential cmake libboost-dev libboost-system-dev libboost-date-time-dev libboost-program-options-dev libboost-filesystem-dev libprotobuf-dev libprotoc-dev protobuf-compiler libproj-dev libdccl4-dev dccl4-compiler
      - checkout
      - run: 
          name: Build
          command: mkdir -p build && cd build && cmake -Denable_testing=ON .. && cmake --build . -- -j4
      - run: *run-tests
      
  amd64-buster-deb-build:
    <<: *job-template-deb-amd64
    docker: *docker-base-buster
    environment:
      <<: *environment-template-common
      <<: *environment-template-buster
      <<: *environment-template-amd64
  arm64-buster-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-arm64-buster
    environment:
      <<: *environment-template-common
      <<: *environment-template-buster
      <<: *environment-template-arm64
  armhf-buster-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-armhf-buster
    environment:
      <<: *environment-template-common
      <<: *environment-template-buster
      <<: *environment-template-armhf
  amd64-bullseye-deb-build:
    <<: *job-template-deb-amd64
    docker: *docker-base-bullseye
    environment:
      <<: *environment-template-common
      <<: *environment-template-bullseye
      <<: *environment-template-amd64      
  arm64-bullseye-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-arm64-bullseye
    environment:
      <<: *environment-template-common
      <<: *environment-template-bullseye
      <<: *environment-template-arm64
  armhf-bullseye-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-armhf-bullseye
    environment:
      <<: *environment-template-common
      <<: *environment-template-bullseye
      <<: *environment-template-armhf
  amd64-focal-deb-build:
    <<: *job-template-deb-amd64
    docker: *docker-base-focal
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      <<: *environment-template-amd64
  arm64-focal-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-arm64-focal
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      <<: *environment-template-arm64
  armhf-focal-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-armhf-focal
    environment:
      <<: *environment-template-common
      <<: *environment-template-focal
      <<: *environment-template-armhf
  amd64-jammy-deb-build:
    <<: *job-template-deb-amd64
    docker: *docker-base-jammy
    environment:
      <<: *environment-template-common
      <<: *environment-template-jammy
      <<: *environment-template-amd64
  arm64-jammy-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-arm64-jammy
    environment:
      <<: *environment-template-common
      <<: *environment-template-jammy
      <<: *environment-template-arm64
  armhf-jammy-deb-build: 
    <<: *job-template-deb-cross
    docker: *docker-armhf-jammy
    environment:
      <<: *environment-template-common
      <<: *environment-template-jammy
      <<: *environment-template-armhf
      
  amd64+scan-build:
    <<: *job-template-sanitizers
    steps:
      - checkout
      - run: *run-add-continuous-packages
      - run: *run-update-apt
      - run:
          name: Build with static analyzer
          command: |
            mkdir -p build && cd build &&
            scan-build --use-cc=/usr/bin/clang --use-c++=/usr/bin/clang++ cmake .. -Denable_testing=ON -DCMAKE_BUILD_TYPE=Debug -Denable_llvm=OFF &&
            scan-build --exclude /usr/include/boost --use-cc=/usr/bin/clang --use-c++=/usr/bin/clang++ --status-bugs cmake --build . -- -j${SANITIZER_NUM_JOBS}
      - run:
          name: Store static analyzer results
          command: cd /tmp && tar cfvz scan-build.tar.gz scan-build*
          when: on_fail
      - store_artifacts:
          path: /tmp/scan-build.tar.gz
          when: on_fail
  amd64+asan-build:
    <<: *job-template-sanitizers
    steps:
      - checkout
      - run: *run-add-continuous-packages
      - run: *run-update-apt
      - run:
          name: Build with AddressSanitizer (and LeakSanitizer)
          command: mkdir -p build && cd build && cmake -DSANITIZE_ADDRESS=ON -Denable_testing=ON -Denable_llvm=OFF .. && cmake --build . -- -j${SANITIZER_NUM_JOBS}
      - run: &run-tests-sanitizers
          name: Run tests
          command: cd build && ctest --output-on-failure
  amd64+tsan-build:
    <<: *job-template-sanitizers
    steps:
      - checkout
      - run: *run-add-continuous-packages
      - run: *run-update-apt
      - run: 
          name: Build with ThreadSanitizer
          command: mkdir -p build && cd build && cmake -DSANITIZE_THREAD=ON -Denable_testing=ON  -Denable_llvm=OFF .. && cmake --build . -- -j${SANITIZER_NUM_JOBS}
      - run: *run-tests-sanitizers
  amd64+ubsan-build:
    <<: *job-template-sanitizers
    steps:
      - checkout
      - run: *run-add-continuous-packages
      - run: *run-update-apt
      - run:
          name: Build with UndefinedBehaviorSanitizer
          command: mkdir -p build && cd build && cmake -DSANITIZE_UNDEFINED=ON -Denable_testing=ON  -Denable_llvm=OFF .. && cmake --build . -- -j${SANITIZER_NUM_JOBS}
      - run: *run-tests-sanitizers
  continuous-upload:
    <<: *job-template-upload
    environment:
      <<: *environment-template-common
      <<: *environment-template-jammy
      <<: *environment-template-amd64
      UPLOAD_DESTINATION: "gobysoft-continuous"
    steps: &steps-upload
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "cd:15:c9:43:48:20:c9:56:58:9e:91:01:74:0d:fe:d2"
      - run: *run-import-gpg
      - attach-workspace:
          at: /root/deb
      - attach-workspace: *attach-src-workspace
      - run:
          name: Move original source into output directory
          command: mv /root/src/* /root/deb
      - run:
          name: Upload packages to packages.gobysoft.org
          command: |
            echo 'trusted-key A8E48CFF6650A07F6EF2B9AD19478082E2F8D3FE' >> ~/.gnupg/gpg.conf
            echo '|1|HjIjI40ko7XtgqXNK8DNuiVcy4Q=|7PEGcXNRmsj1tzGeRjb9UgWIWwE= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIK8LmTLyo7inmKCa28F2JZBSpQFT1VrwnFpeV1v6PlQE' >> ~/.ssh/known_hosts
            for change_file in /root/deb/*.changes;
            do dput -c ${CIRCLE_WORKING_DIRECTORY}/.circleci/dput.cf ${UPLOAD_DESTINATION} $change_file;
            done
          

  release-upload:
    <<: *job-template-upload
    environment:
      <<: *environment-template-common
      <<: *environment-template-jammy
      <<: *environment-template-amd64
      UPLOAD_DESTINATION: "gobysoft-release"
    steps: *steps-upload
